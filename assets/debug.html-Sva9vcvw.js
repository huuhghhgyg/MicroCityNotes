import{_ as o,r as t,o as c,c as u,a as n,b as e,d as a,w as d,e as l}from"./app-1QMhKQuE.js";const r={},p=l(`<h1 id="调试相关" tabindex="-1"><a class="header-anchor" href="#调试相关" aria-hidden="true">#</a> 调试相关</h1><p>本页介绍 MicroCity Web 调试（debug）相关的函数和快捷键。</p><h2 id="清除输出" tabindex="-1"><a class="header-anchor" href="#清除输出" aria-hidden="true">#</a> 清除输出</h2><p>右键输出区域可以输入命令，输入 <code>print()</code> 可以清除输出区域的内容。</p><h2 id="调试器快捷键" tabindex="-1"><a class="header-anchor" href="#调试器快捷键" aria-hidden="true">#</a> 调试器快捷键</h2><p>在调试程序的过程中，特别是在断点处，可以使用F9（Step Over）、F10（Step Into）、F11（Step Out）控制程序运行。</p><ul><li><kbd>F9</kbd> <strong>Step Over</strong>：跳过当前行，执行下一行</li><li><kbd>F10</kbd> <strong>Step Into</strong>：进入当前行，如果当前行是函数调用，则进入函数内部</li><li><kbd>F11</kbd> <strong>Step Out</strong>：跳出当前函数，执行函数调用的下一行</li></ul><h2 id="debug命令" tabindex="-1"><a class="header-anchor" href="#debug命令" aria-hidden="true">#</a> Debug命令</h2><h3 id="监视变量" tabindex="-1"><a class="header-anchor" href="#监视变量" aria-hidden="true">#</a> 监视变量</h3><p>在控制台使用 <code>debug.watch()</code> 命令监视变量。</p><p>例如，在调试的过程中想要监视 <code>a</code> 变量的值，可以使用 <code>debug.watch(&#39;a&#39;)</code> 命令。</p><blockquote><p>右键输出区域可以输入命令</p></blockquote><h3 id="堆栈跟踪" tabindex="-1"><a class="header-anchor" href="#堆栈跟踪" aria-hidden="true">#</a> 堆栈跟踪</h3><p>使用 <code>debug.traceback()</code> 函数可以打印出当前的堆栈跟踪信息</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">-- 某些代码逻辑</span>
    <span class="token function">print</span><span class="token punctuation">(</span>debug<span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span><span class="token string">&quot;Stack trace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">-- 其他代码逻辑</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Stack trace
stack traceback:
[string &quot;function myFunction() ...&quot;]:3: in function &#39;myFunction&#39;
[string &quot;function myFunction() ...&quot;]:8: in function &#39;anotherFunction&#39;
[string &quot;function myFunction() ...&quot;]:11: in main chunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行状态" tabindex="-1"><a class="header-anchor" href="#运行状态" aria-hidden="true">#</a> 运行状态</h3>`,18),h=n("code",null,"debug.debug()",-1),b=n("li",null,[n("code",null,"debug.pause()"),e(" 暂停程序运行。顶部运行按钮▶️会亮起，暂停按钮⏸️熄灭。")],-1),k=n("h2",{id:"其他调试命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他调试命令","aria-hidden":"true"},"#"),e(" 其他调试命令")],-1),m=n("p",null,"Lua 的 Debug 函数大多都适用于 MicroCity Web，可以参考：",-1),v={href:"https://www.lua.org/manual/5.4/manual.html#6.10",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.runoob.com/lua/lua-debug.html",target:"_blank",rel:"noopener noreferrer"};function f(_,x){const i=t("RouterLink"),s=t("ExternalLinkIcon");return c(),u("div",null,[p,n("ul",null,[n("li",null,[h,e(" 进入Debug模式。常用于在程序运行过程中进入Debug模式。如果想要启动时就进入Debug模式，可以右键顶部▶️按钮。详见 "),a(i,{to:"/notes/web-ui.html#%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6"},{default:d(()=>[e("用户界面简介 - 运行状态")]),_:1}),e("。")]),b]),k,m,n("ul",null,[n("li",null,[n("a",v,[e("The Debug Library | Lua 5.4 Reference Manual"),a(s)])]),n("li",null,[n("a",g,[e("Lua 调试(Debug) | 菜鸟教程"),a(s)])])])])}const w=o(r,[["render",f],["__file","debug.html.vue"]]);export{w as default};
