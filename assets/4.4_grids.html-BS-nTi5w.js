import{_ as p}from"./icon_script_editor-S0ak5iz0.js";import{_ as e,c as o,b as a,a as s,f as l,g as i,e as c,r as u,o as r}from"./app-TX6nqiCH.js";const d={};function k(g,n){const t=u("RouteLink");return r(),o("div",null,[n[10]||(n[10]=a("h1",{id:"_4-4-栅格图形",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_4-4-栅格图形"},[a("span",null,"4.4 栅格图形")])],-1)),a("p",null,[n[1]||(n[1]=s("在MicroCity中，")),n[2]||(n[2]=a("strong",null,"栅格图形",-1)),n[3]||(n[3]=s("具有简单的结构（")),l(t,{to:"/docs/desktop/3.3_raster_grids.html"},{default:i(()=>n[0]||(n[0]=[s("3.3")])),_:1}),n[4]||(n[4]=s("），但是如果在其上应用算法，可以高效利用时间和空间。本章的示例代码可以在")),n[5]||(n[5]=a("strong",null,"项目",-1)),n[6]||(n[6]=s('选项卡的"grid_samples"文件夹中找到，该选项卡位于')),n[7]||(n[7]=a("img",{src:p,alt:"icon"},null,-1)),n[8]||(n[8]=a("strong",null,"ScriptEditor",-1)),n[9]||(n[9]=s("中。"))]),n[11]||(n[11]=c(`<h2 id="栅格数据操作" tabindex="-1"><a class="header-anchor" href="#栅格数据操作"><span>栅格数据操作</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">CreateGrid</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Int|Float|Double&quot;</span><span class="token punctuation">,</span> XMax<span class="token punctuation">,</span> YMax <span class="token punctuation">[</span><span class="token punctuation">,</span> CellSize <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> xMin <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> yMin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回一个<em>Grid</em>对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetCellSize</span><span class="token punctuation">(</span>Grid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>Grid</em>的Cellsize值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetGridMaxXY</span><span class="token punctuation">(</span>Grid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>Grid</em>的XMax和YMax值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">ConvertToGridXY</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1 <span class="token punctuation">[</span><span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>将实际坐标转换为<em>Grid</em>中的坐标。返回X1，Y1，X2，Y2，...。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">ShapeToGrid</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> Shape<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在<em>Grid</em>中将<em>Shape</em>栅格化。栅格单元值将根据覆盖面积和输入的值设置。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">ShapeToGrid</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> Shapes<span class="token punctuation">,</span> <span class="token string">&quot;field_name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在<em>Shapes</em>中栅格化所有的<em>Shape</em>对象。栅格单元值将根据覆盖面积和<em>Shapes</em>字段的值设置。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetValue</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> X1<span class="token punctuation">,</span> Y1 <span class="token punctuation">[</span><span class="token punctuation">,</span> X2<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回指定<em>Grid</em>坐标的单元格值：value1，value2，...。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">SetValue</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> value<span class="token punctuation">,</span> X1<span class="token punctuation">,</span> Y1 <span class="token punctuation">[</span><span class="token punctuation">,</span> X2<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>设置指定<em>Grid</em>坐标单元的值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetCenterXY</span><span class="token punctuation">(</span>Grid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>Grid</em>的中心实际坐标（x，y）。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetCenterXY</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> X1<span class="token punctuation">,</span> Y1 <span class="token punctuation">[</span><span class="token punctuation">,</span> X2<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回单元格中心的实际坐标：x1，y1，x2，y2，...。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetExtent</span><span class="token punctuation">(</span>Grid<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>Grid</em>范围的左下角和右上角坐标：Lx，By，Rx，Ty。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetExtent</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回单元格范围的左下角和右上角坐标：Lx，By，Rx，Ty。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token function">GetFractalDim</span><span class="token punctuation">(</span>Grid<span class="token punctuation">,</span> X1<span class="token punctuation">,</span> Y1<span class="token punctuation">,</span> X2<span class="token punctuation">,</span> Y2<span class="token punctuation">,</span> fold <span class="token punctuation">[</span><span class="token punctuation">,</span> MultiFractalQ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>计算<em>Grid</em>中指定区域的分形维度。返回维度，线性回归的RSQ值以及每个折叠中的盒子数。</p><blockquote><p>这篇文章使用ChatGPT翻译自其他语言，如果有问题请在<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>页面提交反馈。</p></blockquote>`,28))])}const x=e(d,[["render",k],["__file","4.4_grids.html.vue"]]),G=JSON.parse('{"path":"/docs/desktop/4.4_grids.html","title":"4.4 栅格图形","lang":"zh-CN","frontmatter":{"prev":"./4.3_shapes_and_tables.md","next":"./4.5_3d_scenes.md","description":"4.4 栅格图形 在MicroCity中，栅格图形具有简单的结构（），但是如果在其上应用算法，可以高效利用时间和空间。本章的示例代码可以在项目选项卡的\\"grid_samples\\"文件夹中找到，该选项卡位于iconScriptEditor中。 栅格数据操作 返回一个Grid对象。 返回Grid的Cellsize值。 返回Grid的XMax和YMax值。 ...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/desktop/4.4_grids.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.4 栅格图形"}],["meta",{"property":"og:description","content":"4.4 栅格图形 在MicroCity中，栅格图形具有简单的结构（），但是如果在其上应用算法，可以高效利用时间和空间。本章的示例代码可以在项目选项卡的\\"grid_samples\\"文件夹中找到，该选项卡位于iconScriptEditor中。 栅格数据操作 返回一个Grid对象。 返回Grid的Cellsize值。 返回Grid的XMax和YMax值。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T05:56:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T05:56:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.4 栅格图形\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T05:56:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"栅格数据操作","slug":"栅格数据操作","link":"#栅格数据操作","children":[]}],"git":{"updatedTime":1710827784000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":6,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"docs/desktop/4.4_grids.md","autoDesc":true,"excerpt":"\\n<p>在MicroCity中，<strong>栅格图形</strong>具有简单的结构（<a href=\\"/MicroCityNotes/docs/desktop/3.3_raster_grids.html\\" target=\\"_blank\\">3.3</a>），但是如果在其上应用算法，可以高效利用时间和空间。本章的示例代码可以在<strong>项目</strong>选项卡的\\"grid_samples\\"文件夹中找到，该选项卡位于<strong>ScriptEditor</strong>中。</p>\\n<h2>栅格数据操作</h2>\\n<div class=\\"language-lua\\" data-highlighter=\\"prismjs\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre><code><span class=\\"line\\"><span class=\\"token function\\">CreateGrid</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"name\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Int|Float|Double\\"</span><span class=\\"token punctuation\\">,</span> XMax<span class=\\"token punctuation\\">,</span> YMax <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> CellSize <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> xMin <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> yMin <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">,</span> init <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>"}');export{x as comp,G as data};
