import{_ as i,r as s,o as c,c as u,a as n,b as e,d as t,w as r,e as l}from"./app-XO24SDXX.js";const d={},p=l(`<h1 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h1><p>This page introduces the functions and shortcuts related to debugging in MicroCity Web.</p><h2 id="clearing-output" tabindex="-1"><a class="header-anchor" href="#clearing-output" aria-hidden="true">#</a> Clearing Output</h2><p>Right-clicking on the output area allows you to enter commands. Entering <code>print()</code> clears the content of the output area.</p><h2 id="debugger-shortcuts" tabindex="-1"><a class="header-anchor" href="#debugger-shortcuts" aria-hidden="true">#</a> Debugger Shortcuts</h2><p>During the process of debugging a program, especially at breakpoints, you can use F9 (Step Over), F10 (Step Into), and F11 (Step Out) to control the program execution.</p><ul><li><kbd>F9</kbd> <strong>Step Over</strong>: Skips the current line and executes the next line.</li><li><kbd>F10</kbd> <strong>Step Into</strong>: Enters the current line. If the current line is a function call, it enters the function body.</li><li><kbd>F11</kbd> <strong>Step Out</strong>: Exits the current function and executes the next line after the function call.</li></ul><h2 id="debug-commands" tabindex="-1"><a class="header-anchor" href="#debug-commands" aria-hidden="true">#</a> Debug Commands</h2><h3 id="watching-variables" tabindex="-1"><a class="header-anchor" href="#watching-variables" aria-hidden="true">#</a> Watching Variables</h3><p>Use the <code>debug.watch()</code> command in the console to monitor variables.</p><p>For example, if you want to monitor the value of variable <code>a</code> during debugging, you can use the <code>debug.watch(&#39;a&#39;)</code> command.</p><blockquote><p>Right-clicking on the output area allows you to enter commands.</p></blockquote><h3 id="stack-trace" tabindex="-1"><a class="header-anchor" href="#stack-trace" aria-hidden="true">#</a> Stack Trace</h3><p>The <code>debug.traceback()</code> function can print the current stack trace information.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">-- Some code logic</span>
    <span class="token function">print</span><span class="token punctuation">(</span>debug<span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span><span class="token string">&quot;Stack trace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">-- Other code logic</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Stack trace
stack traceback:
[string &quot;function myFunction() ...&quot;]:3: in function &#39;myFunction&#39;
[string &quot;function myFunction() ...&quot;]:8: in function &#39;anotherFunction&#39;
[string &quot;function myFunction() ...&quot;]:11: in main chunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-status" tabindex="-1"><a class="header-anchor" href="#running-status" aria-hidden="true">#</a> Running Status</h3>`,18),h=n("code",null,"debug.debug()",-1),g=n("li",null,[n("code",null,"debug.pause()"),e(" pauses program execution. The Run button ▶️ at the top will light up, and the Pause button ⏸️ will turn off.")],-1),b=n("h2",{id:"other-debug-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#other-debug-commands","aria-hidden":"true"},"#"),e(" Other Debug Commands")],-1),m=n("p",null,"Most of Lua's Debug functions are applicable to MicroCity Web. For reference, please see:",-1),k={href:"https://www.lua.org/manual/5.4/manual.html#6.10",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.runoob.com/lua/lua-debug.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},_=n("strong",null,"feedback",-1);function x(y,w){const o=s("RouterLink"),a=s("ExternalLinkIcon");return c(),u("div",null,[p,n("ul",null,[n("li",null,[h,e(" enters Debug mode. It is often used to enter Debug mode during program execution. If you want to start in Debug mode, you can right-click the top ▶️ button. See "),t(o,{to:"/en/notes/web-ui.html#program-control"},{default:r(()=>[e("User Interface Introduction - Running Status")]),_:1}),e(" for details.")]),g]),b,m,n("ul",null,[n("li",null,[n("a",k,[e("The Debug Library | Lua 5.4 Reference Manual"),t(a)])]),n("li",null,[n("a",f,[e("Lua Debugging | Runoob Tutorial"),t(a)])])]),n("blockquote",null,[n("p",null,[e("This post is translated using ChatGPT, please "),n("a",v,[_,t(a)]),e(" if any omissions.")])])])}const S=i(d,[["render",x],["__file","debug.html.vue"]]);export{S as default};
