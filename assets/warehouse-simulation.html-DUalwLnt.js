import{_ as o,a as c,b as r,c as u,d as m,e as h,f as d,g as k,h as g,i as _,j as b,k as x,l as v,m as y,n as E,o as w}from"./6-1trend-CU1sNEUw.js";import{_ as A,r as p,o as f,c as B,a as s,b as n,d as a,w as i,e as t}from"./app-D3ILpDDS.js";const q={},G=t('<h1 id="自动化仓库仿真思路" tabindex="-1"><a class="header-anchor" href="#自动化仓库仿真思路"><span>自动化仓库仿真思路</span></a></h1><blockquote><p>本文思路仅供参考，建议做出适当改进。</p></blockquote><h2 id="具体问题-基于元胞自动机的仓库仿真" tabindex="-1"><a class="header-anchor" href="#具体问题-基于元胞自动机的仓库仿真"><span>具体问题：基于元胞自动机的仓库仿真</span></a></h2><p><img src="'+c+'" alt="Problem1"></p><p>其中，出入库位置可以更改，叉车为AGV。</p><p>也就是说，这其实是一个移动货架仓库的元胞自动机仿真。AGV可以从货架底部穿过，可以移动到货架底部，把货架抬起并运送到出入库点。</p><h3 id="基本假设" tabindex="-1"><a class="header-anchor" href="#基本假设"><span>基本假设</span></a></h3><ul><li>所有货架上的货物相同</li><li>一个货架只放一个货物</li></ul><p>因此，出库和入库可以看做完全相反的过程，所以此处只需要详细讨论出库的情况。即默认货架上本身就有货物。</p><h3 id="总体实现思路" tabindex="-1"><a class="header-anchor" href="#总体实现思路"><span>总体实现思路</span></a></h3>',10),V=s("ul",null,[s("li",null,[n("将整个 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"3"),s("mo",null,"×"),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"3\\times3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),n(" 的仓库中每个元胞的位置赋予 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"("),s("mi",null,"x"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"(x,y)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mclose"},")")])])]),n(" 坐标，方便后续的移动操作。")]),s("li",null,"以AGV为核心，对货架进行操作。AGV处于升起状态移动货架时，只需要将货架的坐标位置同步设为AGV的位置即可达到AGV移动货架的效果。")],-1),M=s("h4",{id:"业务流程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#业务流程"},[s("span",null,"业务流程")])],-1),L=s("p",null,"先按照需求数量乱序生成订单列表，AGV根据订单顺序依次将货架移动到出库点进行出库操作。",-1),C=s("h4",{id:"业务逻辑",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#业务逻辑"},[s("span",null,"业务逻辑")])],-1),F=s("p",null,"当执行出库时，AGV先找到最近的货架并移动到那个货架的位置，抬起货架。为货架（AGV）设定移动的终点，计算曼哈顿距离差值。",-1),T=s("ul",null,[s("li",null,[n("每次移动前都通过是否有障碍物判断货架移动的方向（"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])]),n(" 方向或 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),n(" 方向）。")]),s("li",null,[n("如果两个方向都被堵塞，则优先选择 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),n(" 方向（人为规定），将这个方向的障碍物递归移走，为货架移动腾出空间。如果 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"y")]),s("annotation",{encoding:"application/x-tex"},"y")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y")])])]),n(" 方向没有空间才选择移动 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x")]),s("annotation",{encoding:"application/x-tex"},"x")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x")])])]),n(" 方向。")])],-1),J=s("h3",{id:"过程优化-关于旧方法和新方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#过程优化-关于旧方法和新方法"},[s("span",null,"过程优化：关于旧方法和新方法")])],-1),N=s("p",null,[n("这两种方法都是可用的方法，但是 "),s("strong",null,"新方法对特定场景进行了优化，通过对障碍进行预判减少了操作步骤。"),n(" 问题见下图")],-1),U=s("p",null,[s("strong",null,"旧方法：无障碍预判"),n("（进出货点在 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"="),s("mn",null,"3"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",null,"="),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"x=3,y=3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),n(" 的位置）")],-1),j=s("div",{style:{"text-align":"center"}},[s("p",null,[s("img",{src:o,alt:"旧方法效果动图"})])],-1),P=s("p",null,"👉 AGV完成第一个货架的出库后，向第二个货架移动，但是发现第一个货架挡住了去路，因此又回到第一个货架的位置将其移开，再回到第二个货架进行出库操作。",-1),S=s("p",null,[s("strong",null,"新方法：预判障碍"),n("（进出货点在 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"="),s("mn",null,"3"),s("mo",{separator:"true"},","),s("mi",null,"y"),s("mo",null,"="),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"x=3,y=3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8389em","vertical-align":"-0.1944em"}}),s("span",{class:"mord"},"3"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),n(" 的位置）")],-1),K=t('<div style="text-align:center;"><p><img src="'+r+'" alt="新方法效果动图"></p></div><p>👉 AGV完成第一个货架的出库操作后判断后一个货架是否需要移动其他位置的货架才能到达出入库点。如果需要，则移动障碍货架后才前往后一个货架进行出库。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>本着尽量少占用出入库点的原则，当有空位时AGV将把在出入口的货架移走。因此某些看起来冗余的操作并非没有考虑全面。</p></div><p>不同数量货架对应的最优布局方案（动图） 8个货架的情况，上面已经进行了展示。下面仅展示表中货架数为5和7的情况。其他情况详见附件。</p><h3 id="仿真数据收集分析" tabindex="-1"><a class="header-anchor" href="#仿真数据收集分析"><span>仿真数据收集分析</span></a></h3><h4 id="出入库效率最高" tabindex="-1"><a class="header-anchor" href="#出入库效率最高"><span>出入库效率最高</span></a></h4><p>仿真结果如下图所示，表示相同货架数量下得到的效率最佳货架的货架布局</p><ul><li>最佳货架布局：相同货架数量下，取出所有货物操作次数（ticks）最小</li></ul><p><strong>布局图说明</strong></p><ul><li>白色：没有放置货架</li><li>浅灰色：货架，但是AGV一开始位于这个货架下方</li><li>灰色：货架。</li></ul><p><strong>表格说明</strong></p><ul><li>货架数量：存在于布局图中的货架数量</li><li>旧ticks：使用旧方法（无预判障碍）实现取货的操作次数。</li><li>新ticks：使用新方法（预判障碍）实现取货的操作次数。后面将对新方法进行说明。</li><li>黄色高亮：相同布局下操作次数最少（ticks最小）的方案</li></ul><div style="text-align:center;"><p><img src="'+u+'" alt="最佳布局"></p></div><h4 id="空间利用率最大" tabindex="-1"><a class="header-anchor" href="#空间利用率最大"><span>空间利用率最大</span></a></h4><p>如果所有位置都放置货架，则无法访问到所有货架。因此，空间利用率最大的方法是放置8个货架。</p><p><strong>颜色说明</strong></p><ul><li>绿色：有货物的货架</li><li>紫色：没有货物的货架</li><li>浅紫色：AGV抬起的货架</li><li>深紫色：AGV在这个货架下面，但是没有抬起货架</li><li>深灰色：进出货点</li></ul><blockquote><p>有时候刷新太快可能看不出AGV抬起</p></blockquote><p><strong>进出货点在x=2，y=3的位置</strong></p><p><img src="'+m+'" alt="8个货架动图"></p><h3 id="创新点" tabindex="-1"><a class="header-anchor" href="#创新点"><span>创新点</span></a></h3><ul><li>额外考虑货物种类不同的情况。</li><li>每次仿真会根据货架上的货物乱序生成需求。</li><li>面向对象编程。使用面向对象的思想编程有助于将问题抽象化、有助于流程细节的改进；再加上好的命名方式会让整个程序的流程和逻辑清晰很多，不至于睡一觉起来就忘了😂</li></ul><p>不同的货物类型用不同的颜色表示。AGV状态颜色、空货架的颜色、进出库点的颜色含义与之前相同。</p><ul><li>紫色：没有货物的货架</li><li>浅紫色：AGV抬起的货架</li><li>深紫色：AGV在这个货架下面，但是没有抬起货架</li><li>深灰色：进出货点</li></ul><p>5个货架的情况示例</p><div style="text-align:center;"><p><img src="'+h+'" alt="不同种类货物-5个货架"></p></div><p>8个货架的情况示例</p><div style="text-align:center;"><p><img src="'+d+'" alt="不同种类货物-8个货架"></p></div><h2 id="仿真改进-三维化自动仓库仿真" tabindex="-1"><a class="header-anchor" href="#仿真改进-三维化自动仓库仿真"><span>仿真改进：三维化自动仓库仿真</span></a></h2><p><img src="'+k+'" alt="Problem2"></p><p>在这一部分题目也稍微有所变化，要求将元胞自动机仿真仓库案例<strong>三维化</strong>，进行自动化仓库仿真。具体要求如上图。</p><h3 id="总体思路" tabindex="-1"><a class="header-anchor" href="#总体思路"><span>总体思路</span></a></h3><h4 id="三维化" tabindex="-1"><a class="header-anchor" href="#三维化"><span>三维化</span></a></h4><p>以<a href="#%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98-%E5%9F%BA%E4%BA%8E%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E4%BB%93%E5%BA%93%E4%BB%BF%E7%9C%9F"><strong>基于元胞自动机的仓库仿真</strong></a>为核心，<strong>将其中元胞自动机仿真的部分改写为内部数据表，作为内部数据模型</strong>，对整个仿真过程的状态进行监视和控制。</p><p>由于<a href="#%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98-%E5%9F%BA%E4%BA%8E%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E4%BB%93%E5%BA%93%E4%BB%BF%E7%9C%9F">基于元胞自动机的仓库仿真</a>使用了<strong>面向对象</strong>的方法封装对象，业务逻辑和流程的构建中大面积使用了对象方法，因此此处只需要改写对象方法（如 <code>Agv:Move(dx, dy)</code> 等）即可实现由元胞自动机仿真到三维化自动仓库的仿真。</p><blockquote><p>如果程序整体结构设计优良，应用“面向对象”将会大幅提升程序的可维护性，降低移植难度。</p></blockquote><p>对于AGV、货架直接套用现成模型；对于货物，只需要设置其距离货架的相对高度列表即可实现货物自动存放于指定高度。</p>',37),R={class:"hint-container tip"},z=s("p",{class:"hint-container-title"},"提示",-1),X=t('<h4 id="出入库需求波动极大" tabindex="-1"><a class="header-anchor" href="#出入库需求波动极大"><span>出入库需求波动极大</span></a></h4><ul><li>根据题目要求，基本上只存在有限的2种情况：3个货架、6个货架。</li><li>由于货架数量情况有限，而<a href="#%E5%85%B7%E4%BD%93%E9%97%AE%E9%A2%98-%E5%9F%BA%E4%BA%8E%E5%85%83%E8%83%9E%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%9A%84%E4%BB%93%E5%BA%93%E4%BB%BF%E7%9C%9F">基于元胞自动机的仓库仿真</a>中得到了性能最佳的仓库布局，因此可以直接套用对应货架数量的最佳布局，本问题中只需要考虑固定货架布局下货物的位置摆放问题。</li><li><strong>对于3个货架的情况</strong>，其最佳布局属于高度对称的形态，距离出入库点的距离都为1，因此这种情况下只需要对1种情况进行仿真、收集其数据。</li><li><strong>对于6个货架的情况</strong>，选取了3种情况进行多次仿真，得到每种情况出入库耗费Ticks的平均值、最大值、最小值。 <blockquote><p>当前Ticks是AGV移动的次数，相当于单位操作时间。后文<a href="#%E6%94%B9%E8%BF%9B%E7%A9%BA%E9%97%B4">改进空间</a>中提到了可以进行的改进</p></blockquote></li><li>经过以上分析可以看出情况有限，因此可以通过控制货物需求总数不变，每次随机生成需求货物种类的方式对各种货物摆放位置进行仿真、对得到数据进行分析，最终确定最佳的货物布局方案。</li></ul><h3 id="改进" tabindex="-1"><a class="header-anchor" href="#改进"><span>改进</span></a></h3><p>在测试的过程中发现原有移动货架的策略不合理，改进了移动货架的策略。</p><p><strong>旧策略：</strong> 找到离AGV最近的装有需求货物的货架，将其移动到出入库点。</p><p><img src="'+g+'" alt="旧策略"></p><p>可以看到AGV已经将需要出库的同种货物（青色方块）移动到了出入库点，但是由于AGV移动的货架对象是旁边的货架，因此没有对已经在出入库点的货物进行出库。</p><p><strong>新策略：</strong> 找到离出入库点最近的装有需求货物的货架，将其移动到出入库点。改变策略后，没有发现以上提到的不合理情况出现。</p><p><img src="'+_+'" alt="新策略"></p><h3 id="创新" tabindex="-1"><a class="header-anchor" href="#创新"><span>创新</span></a></h3><p>由于测试的次数较多，因此将主体流程写入函数并进行适应性改进，实现自动对所有情况进行仿真测试并将数据输出。下图为自动仿真测试运行为示例。</p><p><img src="'+b+`" alt="自动测试"></p><p>自动仿真测试流程代码，仅供参考</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token comment">-- 批量测试</span></span>
<span class="line"><span class="token keyword">local</span> cargo_ubs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span> <span class="token comment">-- 测试需求(上限)序列</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> output_string_list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 测试结果列表字符串</span></span>
<span class="line"><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>cargo_ubs<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">local</span> test_result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 本需求上限测试结果序列</span></span>
<span class="line">    cargo_ub <span class="token operator">=</span> v <span class="token comment">-- 设置需求数量上限</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> test_count <span class="token keyword">do</span></span>
<span class="line">        scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            grid <span class="token operator">=</span> <span class="token string">&#39;plane&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            clear <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 清空场景内容</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;测试(&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> test_count<span class="token punctuation">,</span> <span class="token string">&quot;)：需求数量为&quot;</span><span class="token punctuation">,</span> cargo_ub<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> tick <span class="token operator">=</span> <span class="token function">ModelRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 运行仿真模型返回测试结果</span></span>
<span class="line">        table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>test_result<span class="token punctuation">,</span> tick<span class="token punctuation">)</span> <span class="token comment">-- 将测试结果插入测试结果序列</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">local</span> output_string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;需求数量为&quot;</span><span class="token punctuation">,</span> cargo_ub<span class="token punctuation">,</span> <span class="token string">&quot;的测试结果序列:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>test_result <span class="token keyword">do</span> <span class="token comment">-- 输出测试结果序列到列表字符串</span></span>
<span class="line">        output_string <span class="token operator">=</span> output_string <span class="token operator">..</span> test_result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">..</span> <span class="token string">&quot;\\t&quot;</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>output_string<span class="token punctuation">)</span></span>
<span class="line">    table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>output_string_list<span class="token punctuation">,</span> output_string<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 输出测试测试结果列表</span></span>
<span class="line"><span class="token keyword">for</span> i<span class="token punctuation">,</span> str <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>output_string_list<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;需求数量为&quot;</span><span class="token punctuation">,</span> cargo_ubs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;的测试结果序列:&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在自动仿真测试的过程中发现了BUG，详见下文说明。</p><h3 id="货架布局方案" tabindex="-1"><a class="header-anchor" href="#货架布局方案"><span>货架布局方案</span></a></h3><p><img src="`+x+'" alt="货架布局方案"></p><p>颜色说明</p><ul><li>浅蓝色：出入库点</li><li>白色：空格</li><li>深蓝、红、黄：3种货物对应的颜色</li></ul><p>条件假设</p><ul><li>每个货架上都放有2个同类货物</li><li>货物需求随机，没有种类偏好</li><li>每次只取出一个货物</li></ul><h3 id="仿真结果及分析" tabindex="-1"><a class="header-anchor" href="#仿真结果及分析"><span>仿真结果及分析</span></a></h3><p>对每个货物布局方案中每种需求数量的情况仿真测试30次，求单方案结果中的最大值、最小值、平均值。最终得到结论为在6个货架的情况中，方案2的布局表现最优。</p><h4 id="方案3-3个货架" tabindex="-1"><a class="header-anchor" href="#方案3-3个货架"><span>方案3：3个货架</span></a></h4><p><img src="'+v+'" alt="方案3"></p><h4 id="方案6" tabindex="-1"><a class="header-anchor" href="#方案6"><span>方案6</span></a></h4><p>方案6平均Ticks总趋势图 <img src="'+y+'" alt="方案6平均Ticks总趋势图"></p><p>方案6最优布局方案：方案2 <img src="'+E+'" alt="方案6最优布局方案"></p><p>还应绘制分方案的“需求量-最短平均服务时间”单位趋势图。以下以方案6-1为例，横坐标为货物需求数量，纵轴为最短平均服务时间（Ticks）。</p><p><img src="'+w+'" alt="方案6-1"></p><h3 id="改进空间" tabindex="-1"><a class="header-anchor" href="#改进空间"><span>改进空间</span></a></h3><p>由于题目没有给定具体事件的执行时间，也没有指定时间单位，因此此处只计量货架的操作次数作为耗费的时间。也就是说，时间是后计算的，我想大部分同学做到这里可能都是这样的思路。虽然最终得出的结果没有问题，但是思路还可以转变一下，适应于后面的学习。</p><p>当前思路是以任务驱动的。虽然能够得到一个正确的结果，但是没有利用仿真时间，这种做法在只控制一个实体的时候不会出现问题。当要同时处理多个实体的时候，当前思路就无法做到同时操作多个实体完成任务，只能实现多个实体依次完成任务的情况。当前思路的具体流程如下：</p>',33),Z=s("p",null,"由于应用的是时间推进法，因此仿真世界中有属于它自己的时间。对于我们来说，我们可以通过在仿真时间上乘一个倍率实现控制仿真速度，这个倍率就是仿真速度。此外，这种做法更加容易支持考虑多对象的情况。具体流程如下：",-1),D=s("p",null,"这样就改为了以时间为核心的仿真，在刷新任务执行进度的时候就可以直接刷新场景中的所有实体。由于仿真以时间为核心，因此就需要设定各种操作的速率/时间，保证时间计算的准确性。在MicroCityWeb中，有一些技巧可以用于时间推进法的仿真。",-1),I=s("h4",{id:"使用系统时间更新仿真时间",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#使用系统时间更新仿真时间"},[s("span",null,"使用系统时间更新仿真时间")])],-1),Y=s("code",null,"os.clock()",-1),W=s("p",null,"由于整个仿真的核心为时间，因此需要对之前没有规定的操作规定其需要花费的时间长度。在改进的部分中，又额外考虑了以下操作所要花费的时间：",-1),Q=s("ul",null,[s("li",null,"货物出入库所要花费的时间"),s("li",null,"AGV举起和降落货架所要花费的时间")],-1);function H(O,$){const l=p("RouteLink"),e=p("FlowChart");return f(),B("div",null,[G,V,M,L,C,F,T,J,N,U,j,P,S,K,s("div",R,[z,s("p",null,[n("如果需要套用现成模型，或者申请上传模型到本文作者维护的仓库，请参考文档 "),a(l,{to:"/notes/3d-objects.html#%E5%A4%96%E9%83%A8%E6%A8%A1%E5%9E%8B"},{default:i(()=>[n("3D对象-外部模型")]),_:1})])]),X,a(e,{id:"flowchart-475",code:"eJxLLUvNK7G1Ky5JLCqxUniye/fTroUvZ8x/2jGdCyyVnJ+XYmsHIjNLMvPzrBRe7J/xbE4nRCFXakVqsq1dfkFqUSJE9lnn8hcLe57unfy0sxeqJjElpSQzNxVF2Yt1C5+vm/6iYfqLLTufTd/2cvoWruLSXIiy1LwUK4Wn+6Y/7djwrGE3VBbiGF07uJsQrtOoTC3WyUlNK9EESgPdo2sHtRG76rx8naT8kpL8XKByqJ1cAJD+ePk=",preset:"vue"}),Z,a(e,{id:"flowchart-479",code:"eJxLLUvNK7G1Ky5JLCqxUniye/fTroUvZ8x/2jGdCyyVnJ+XYmsHIjNLMvPzrBRe7J/xbE4nRCFXSWZuqq1dfkFqUSJUtm/70/5pT/dOftrZ+2z6tpfTt7zf0/GiofnFzIlPdu9/Pmf+y4b5T3cte7+nkyu1IjUZRe/Tju3Ppm2AmPysc/mLhT0v9s8GKuYqLs2FWJSalwJUtm/6044Nzxp2Q8zngrhT1w7uXITDNSpTi3VyUtNKNHXtQCYAFQEtxa40L18nKb+kJD8XqBZqIRcAJqKMLw==",preset:"vue"}),D,I,s("p",null,[Y,n("函数可以获取系统当前的时间（以秒为单位，但是是小数）。有了这个函数就可以做到仿真与现实时间的同步。用法示例可以参考"),a(l,{to:"/notes/timelapse.html#%E4%B8%BB%E5%AF%BC%E6%97%B6%E9%92%9F%E6%8E%A8%E8%BF%9B%E6%B3%95"},{default:i(()=>[n("时间推进法")]),_:1})]),W,Q])}const as=A(q,[["render",H],["__file","warehouse-simulation.html.vue"]]),ts=JSON.parse('{"path":"/notes/warehouse-simulation.html","title":"自动化仓库仿真思路","lang":"zh-CN","frontmatter":{"description":"自动化仓库仿真思路 本文思路仅供参考，建议做出适当改进。 具体问题：基于元胞自动机的仓库仿真 Problem1 其中，出入库位置可以更改，叉车为AGV。 也就是说，这其实是一个移动货架仓库的元胞自动机仿真。AGV可以从货架底部穿过，可以移动到货架底部，把货架抬起并运送到出入库点。 基本假设 所有货架上的货物相同 一个货架只放一个货物 因此，出库和入库可...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://huuhghhgyg.github.io/MicroCityNotes/en/notes/warehouse-simulation.html"}],["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/notes/warehouse-simulation.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"自动化仓库仿真思路"}],["meta",{"property":"og:description","content":"自动化仓库仿真思路 本文思路仅供参考，建议做出适当改进。 具体问题：基于元胞自动机的仓库仿真 Problem1 其中，出入库位置可以更改，叉车为AGV。 也就是说，这其实是一个移动货架仓库的元胞自动机仿真。AGV可以从货架底部穿过，可以移动到货架底部，把货架抬起并运送到出入库点。 基本假设 所有货架上的货物相同 一个货架只放一个货物 因此，出库和入库可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-26T16:30:53.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-26T16:30:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自动化仓库仿真思路\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-26T16:30:53.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"具体问题：基于元胞自动机的仓库仿真","slug":"具体问题-基于元胞自动机的仓库仿真","link":"#具体问题-基于元胞自动机的仓库仿真","children":[{"level":3,"title":"基本假设","slug":"基本假设","link":"#基本假设","children":[]},{"level":3,"title":"总体实现思路","slug":"总体实现思路","link":"#总体实现思路","children":[]},{"level":3,"title":"过程优化：关于旧方法和新方法","slug":"过程优化-关于旧方法和新方法","link":"#过程优化-关于旧方法和新方法","children":[]},{"level":3,"title":"仿真数据收集分析","slug":"仿真数据收集分析","link":"#仿真数据收集分析","children":[]},{"level":3,"title":"创新点","slug":"创新点","link":"#创新点","children":[]}]},{"level":2,"title":"仿真改进：三维化自动仓库仿真","slug":"仿真改进-三维化自动仓库仿真","link":"#仿真改进-三维化自动仓库仿真","children":[{"level":3,"title":"总体思路","slug":"总体思路","link":"#总体思路","children":[]},{"level":3,"title":"改进","slug":"改进","link":"#改进","children":[]},{"level":3,"title":"创新","slug":"创新","link":"#创新","children":[]},{"level":3,"title":"货架布局方案","slug":"货架布局方案","link":"#货架布局方案","children":[]},{"level":3,"title":"仿真结果及分析","slug":"仿真结果及分析","link":"#仿真结果及分析","children":[]},{"level":3,"title":"改进空间","slug":"改进空间","link":"#改进空间","children":[]}]}],"git":{"updatedTime":1701016253000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":4}]},"filePathRelative":"notes/warehouse-simulation.md","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p>本文思路仅供参考，建议做出适当改进。</p>\\n</blockquote>\\n<h2>具体问题：基于元胞自动机的仓库仿真</h2>\\n<p></p>\\n<p>其中，出入库位置可以更改，叉车为AGV。</p>\\n<p>也就是说，这其实是一个移动货架仓库的元胞自动机仿真。AGV可以从货架底部穿过，可以移动到货架底部，把货架抬起并运送到出入库点。</p>\\n<h3>基本假设</h3>\\n<ul>\\n<li>所有货架上的货物相同</li>\\n<li>一个货架只放一个货物</li>\\n</ul>\\n<p>因此，出库和入库可以看做完全相反的过程，所以此处只需要详细讨论出库的情况。即默认货架上本身就有货物。</p>"}');export{as as comp,ts as data};
