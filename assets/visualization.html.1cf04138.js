import{_ as d,r,o as n,c as i,a as o,b as e,d as t,w as s,e as c}from"./app.e5db67fa.js";const p="/MicroCityNotes/assets/LookupTableProperties.0ecb4f51.png",l="/MicroCityNotes/assets/TableSelect.dc014ed8.png",u="/MicroCityNotes/assets/LookupTableColor.10db14bb.png",h="/MicroCityNotes/assets/SelectLinksColor.240a09ee.png",b="/MicroCityNotes/assets/GraduatedColorProperties.7cfa6748.png",m="/MicroCityNotes/assets/GraduatedColorResult.c782c941.png",_="/MicroCityNotes/assets/GraduatedColorSettings.ed4a8a9a.png",g="/MicroCityNotes/assets/RelateToMapBig.d6b0ca1c.png",k="/MicroCityNotes/assets/RelateToMapSmall.6e9a8bd7.png",S="/MicroCityNotes/assets/RelateToScreenBig.bca4cb07.png",C="/MicroCityNotes/assets/RelateToScreenSmall.3831f1e8.png",T="/MicroCityNotes/assets/SizeProperties.453146b0.png",L="/MicroCityNotes/assets/LabelAttribProperties.626ac855.png",f="/MicroCityNotes/assets/SetParameterProperties.0acb1156.png",M={},y=c('<h1 id="结果可视化" tabindex="-1"><a class="header-anchor" href="#结果可视化" aria-hidden="true">#</a> 结果可视化</h1><p>本文介绍了多种将计算结果可视化的方法。包括改变内容的颜色，改变形状大小，改变元素显示的属性标签等。</p><h2 id="改变形状颜色" tabindex="-1"><a class="header-anchor" href="#改变形状颜色" aria-hidden="true">#</a> 改变形状颜色</h2><p>在程序界面左下角的图形属性框内可以通过改变<code>Colors</code>栏目下的<code>Type</code>属性改变显示颜色的种类。共有3种选项：</p><ul><li>Unique Symbol：指定颜色</li><li>Lookup Table：通过数值查询表格显示对应的颜色</li><li>Graduated Color：渐变色</li></ul><h3 id="lookup-table-通过表中值改变颜色" tabindex="-1"><a class="header-anchor" href="#lookup-table-通过表中值改变颜色" aria-hidden="true">#</a> Lookup Table 通过表中值改变颜色</h3><p>将<code>Type</code>为<code>Lookup Table</code>，根据表格中的数值改变图形的颜色，达到选中指定图形的效果。</p><p><img src="'+p+'" alt="LookupTable属性"></p><p>此处示例将<code>Lookup Table</code>中的<code>Attribute</code>改为表格中的<code>SELECT</code>，通过表中的<code>SELECT</code>列值控制线的颜色（属性设置见上图）。当值为0时显示黑色，值为1时显示红色。表格中<code>SELECT</code>列的值和<code>Lookup Table</code>中的具体设置如下图。</p><p><img src="'+l+'" alt="Table中的Select列值"><img src="'+u+'" alt="LookupTable中的颜色设置"></p><p>最终实现的效果 <img src="'+h+'" alt="选中线的颜色"></p><h3 id="graduated-color-根据值的大小显示渐变色" tabindex="-1"><a class="header-anchor" href="#graduated-color-根据值的大小显示渐变色" aria-hidden="true">#</a> Graduated Color 根据值的大小显示渐变色</h3><p>将<code>Type</code>为<code>Graduated Color</code>，根据表格中不同数值的大小显示不同的颜色，达到显示渐变色的效果。</p><p><img src="'+b+'" alt="GraduatedColor属性设置"></p><p>此处示例根据每个国家的人口数量显示渐变色。可以看到中国人口数量大，因此显示红色，印度人口数量也较大，因此显示橙色。其他地区人口数量较低，但也能通过颜色看出一些差别。</p><p><img src="'+m+'" alt="GraduatedColor结果"></p><p><code>Graduated Color</code>下的<code>Colors</code>属性中还可以调整其他配色方案。设置界面如下图，此处就不不一一列举了。</p><p><img src="'+_+'" alt="GraduatedColor颜色设置"></p>',18),N=c('<h2 id="更改图形和标签的显示大小" tabindex="-1"><a class="header-anchor" href="#更改图形和标签的显示大小" aria-hidden="true">#</a> 更改图形和标签的显示大小</h2><h3 id="参考系的选择" tabindex="-1"><a class="header-anchor" href="#参考系的选择" aria-hidden="true">#</a> 参考系的选择</h3><p>显示内容尺寸的参考系有2个，一个是以地图为参考系，一个是以屏幕为参考系。此处将图形和标签的显示尺寸都设置为相同的参考系。</p><p>内容以地图为参考系时，显示内容的大小会根据地图大小同步缩放，如下图： <img src="'+g+'" alt="地图为参考系_放大"> (以地图为参考系放大) <img src="'+k+'" alt="地图为参考系_缩小"> (以地图为参考系缩小)</p><p>内容以屏幕为参考系时，无论地图怎么缩放内容的大小都差不多，如下图： <img src="'+S+'" alt="屏幕为参考系_放大"> (以屏幕为参考系放大) <img src="'+C+'" alt="屏幕为参考系_缩小"> (以屏幕为参考系缩小)</p><p>因此，绘图的时候要根据绘图的目的选定参考系。</p><ul><li>如果需要在地图上绘制确定尺寸的形状或者标明确定尺寸的标签，如绘制一个半径为10km的圆，此时应选用<strong>以地图为参考系</strong>。</li><li>如果仅需要在任何尺寸下都能清晰显示标签和图形，此时可以选择<strong>以屏幕为参考系</strong>。</li></ul><h3 id="参考系的设定" tabindex="-1"><a class="header-anchor" href="#参考系的设定" aria-hidden="true">#</a> 参考系的设定</h3><p>在程序界面左下角的图形属性框内可以设置图形及其标签的尺寸参考系。 <img src="'+T+'" alt="图形大小属性设置"></p><p>如图标记的两个位置可以分别调整图形尺寸的参考系和标签尺寸的参考系。</p><ul><li><strong>图形尺寸参考系设置</strong>：<code>Size</code>栏目下的<code>Size relates to...</code>调整图形尺寸的参考系，<code>Default Size</code>调整图形的相对于坐标系的尺寸。</li><li><strong>标签尺寸参考系设置</strong>：<code>Labels</code>栏目下的<code>Size relates to...</code>调整标签尺寸的参考系，<code>Default Size</code>调整的是标签(Labels)相对于坐标系的尺寸。</li></ul><h2 id="更改显示的标签" tabindex="-1"><a class="header-anchor" href="#更改显示的标签" aria-hidden="true">#</a> 更改显示的标签</h2><p>在程序界面左下角的图形属性框内可以设置图形及其标签的尺寸参考系。上图中显示的标签为<code>ID</code>，如果需要改为表格中的其他列，可以更改<code>Lables</code>栏目下的<code>Attribute</code>属性实现。</p><p>需要更改的属性位置如图，图中需要显示表中对应<code>MSG</code>列的值，只需要将<code>Labels</code>栏目下的<code>Attribute</code>属性值改为<code>MSG</code>即可。</p><p><img src="'+L+'" alt=""></p><p>但是每次更改图形并执行<code>Update()</code>函数后标签（Label）会取消显示。如果需要执行的脚本中含有此对于此图层的<code>Update()</code>函数，不必在每次执行完脚本后手动重新设置显示的标签，可以通过脚本自动选择显示的标签。</p><p>通过<code>SetParameter()</code>函数可以更改属性值。以上图<code>Labels</code>栏目下的<code>Attribute</code>属性为例，选中这条属性后可以看到底栏显示其<code>ID</code>为<code>LABEL_ATTRIB</code>，其类型为<code>Choice</code>。</p><blockquote><p>需要注意的是，当类型为<code>Choice</code>时，参数值从1开始编号，编号顺次对应下拉菜单的内容。</p></blockquote><p>点开这条属性以后，可以看到<code>MSG</code>在第二个。由于LUA中编号一般由1开始，因此此处<code>MSG</code>的编号对应2，<code>ID</code>的编号对应1。</p><p><img src="'+f+`" alt=""></p><p>此时已经得到了所有需要的参数，可以使用SetParameter()对其进行更改</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- transports为图形图层</span>
<span class="token function">SetParameter</span><span class="token punctuation">(</span>transports<span class="token punctuation">,</span> <span class="token string">&quot;LABEL_ATTRIB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>SetParameter()</code>函数需要在<code>Update()</code>函数执行后再执行，否则效果会被<code>Update()</code>函数覆盖。</p></blockquote><p>现在回过头来再看看<code>SetParameter()</code>函数的具体用法：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetParameter</span> <span class="token punctuation">(</span>Shapes<span class="token operator">|</span>Table<span class="token operator">|</span>Grid<span class="token operator">|</span>Scene<span class="token operator">|</span>Module<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> Number<span class="token operator">|</span><span class="token string">&quot;String&quot;</span><span class="token operator">|</span>Object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>参数1</td><td>输入的对象，可以是<code>Shapes</code>、<code>Table</code>、<code>Grid</code>、<code>Scene</code>、<code>Module</code></td></tr><tr><td>参数2</td><td>其中的<code>id</code>为属性对应的ID。如果是上文的情况，就是<code>LABEL_ATTRIB</code></td></tr><tr><td>参数3</td><td>如果需要更改属性值，只接受数值(Number)、字符串(String)、对象(Object)三种类型</td></tr></tbody></table>`,26),v=o("code",null,"SetParameter()",-1);function G(x,P){const a=r("RouterLink");return n(),i("div",null,[y,o("p",null,[e("如果感兴趣可以参考文档"),t(a,{to:"/docs/2.1_showing_a_world_map.html"},{default:s(()=>[e("2.1 展示世界地图")]),_:1}),e("中的示例手动尝试更改此属性。")]),N,o("p",null,[v,e("函数的介绍出现在文档 "),t(a,{to:"/docs/4.2_ui_control.html"},{default:s(()=>[e("4.2 控制用户界面")]),_:1}),e(" 中，请参阅。")])])}const q=d(M,[["render",G],["__file","visualization.html.vue"]]);export{q as default};
