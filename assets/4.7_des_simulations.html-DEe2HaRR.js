import{_ as a}from"./icon_script_editor-S0ak5iz0.js";import{_ as n,o as s,c as t,e as p}from"./app-BliQTEsv.js";const e={},o=p('<h1 id="_4-7-离散事件仿真" tabindex="-1"><a class="header-anchor" href="#_4-7-离散事件仿真"><span>4.7 离散事件仿真</span></a></h1><p>MicroCity有一个内置的仿真时间计数和事件调度机制。它提供了几个嵌入的Lua函数来方便创建<strong>离散事件仿真</strong>，这对于动态系统分析非常有用。本章的示例代码可以在<strong>项目</strong>选项卡的“simulation_samples”文件夹中的<img src="'+a+`" alt="icon"><strong>ScriptEditor</strong>找到。</p><h2 id="随机数生成" tabindex="-1"><a class="header-anchor" href="#随机数生成"><span>随机数生成</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_01&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个二进制分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_real&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从均匀分布的实数随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_int&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从均匀分布的整数随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;triangle&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从三角分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;bernoulli&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从伯努利分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;cauchy&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> median <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从柯西分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;exponential&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> lambda <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从指数分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;geometric&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从几何分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;normal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从正态分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;lognormal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用种子创建一个服从对数正态分布的随机数生成引擎，并返回该对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetNextRandom</span> <span class="token punctuation">(</span>Engine<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从随机数生成引擎中获取一个随机数。</p><h2 id="仿真控制" tabindex="-1"><a class="header-anchor" href="#仿真控制"><span>仿真控制</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateEvent</span> <span class="token punctuation">(</span>time<span class="token punctuation">,</span> Funcion <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从<em>Lua Function</em>或<em>Lua Coroutine</em>创建一个将来的事件，并返回一个<em>Coroutine</em>对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">ExecAllEvents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>最后调用这个函数。它会将所有事件作为<em>Lua Coroutines</em>执行。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">Delay</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>relativeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在<em>Lua Coroutine</em>中调用这个函数，让它先暂停一段指定的相对时间，然后再恢复执行。如果没有设置参数<em>relativeTime</em>，当前的<em>Coroutine</em>将暂停而不会自动恢复。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">Resume</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> <span class="token punctuation">]</span> Coroutine <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>立即或在指定的时间恢复一个已暂停的协程。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSimTime</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回当前的仿真时间。</p><blockquote><p>这篇文章使用ChatGPT翻译自其他语言，如果有问题请在<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>页面提交反馈。</p></blockquote>`,37),l=[o];function c(u,i){return s(),t("div",null,l)}const g=n(e,[["render",c],["__file","4.7_des_simulations.html.vue"]]),k=JSON.parse('{"path":"/docs/desktop/4.7_des_simulations.html","title":"4.7 离散事件仿真","lang":"zh-CN","frontmatter":{"prev":"./4.6_networks.md","next":"./4.8_mixed_integer_programming.md","description":"4.7 离散事件仿真 MicroCity有一个内置的仿真时间计数和事件调度机制。它提供了几个嵌入的Lua函数来方便创建离散事件仿真，这对于动态系统分析非常有用。本章的示例代码可以在项目选项卡的“simulation_samples”文件夹中的iconScriptEditor找到。 随机数生成 使用种子创建一个二进制分布的随机数生成引擎，并返回该对象。 ...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/desktop/4.7_des_simulations.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.7 离散事件仿真"}],["meta",{"property":"og:description","content":"4.7 离散事件仿真 MicroCity有一个内置的仿真时间计数和事件调度机制。它提供了几个嵌入的Lua函数来方便创建离散事件仿真，这对于动态系统分析非常有用。本章的示例代码可以在项目选项卡的“simulation_samples”文件夹中的iconScriptEditor找到。 随机数生成 使用种子创建一个二进制分布的随机数生成引擎，并返回该对象。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T05:56:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T05:56:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.7 离散事件仿真\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T05:56:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"随机数生成","slug":"随机数生成","link":"#随机数生成","children":[]},{"level":2,"title":"仿真控制","slug":"仿真控制","link":"#仿真控制","children":[]}],"git":{"updatedTime":1710827784000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":2}]},"filePathRelative":"docs/desktop/4.7_des_simulations.md","autoDesc":true,"excerpt":"\\n<p>MicroCity有一个内置的仿真时间计数和事件调度机制。它提供了几个嵌入的Lua函数来方便创建<strong>离散事件仿真</strong>，这对于动态系统分析非常有用。本章的示例代码可以在<strong>项目</strong>选项卡的“simulation_samples”文件夹中的<strong>ScriptEditor</strong>找到。</p>\\n<h2>随机数生成</h2>\\n<div class=\\"language-lua\\" data-highlighter=\\"prismjs\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre class=\\"language-lua\\"><code><span class=\\"line\\"><span class=\\"token function\\">CreateRandEng</span> <span class=\\"token punctuation\\">(</span>seed<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"uniform_01\\"</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{g as comp,k as data};
