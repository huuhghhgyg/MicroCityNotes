import{_ as o,e as l,i as e,j as t,h as s,g as a,r as c,o as i}from"./app-CGYoAsnN.js";const u="/MicroCityNotes/assets/build-an-elevator-thumbnail-C8hy0A9A.webp",k={};function r(d,n){const p=c("Mermaid");return i(),l("div",null,[n[0]||(n[0]=e('<h1 id="构建电梯仿真模型" tabindex="-1"><a class="header-anchor" href="#构建电梯仿真模型"><span>构建电梯仿真模型</span></a></h1><p><img src="'+u+`" alt="build a clock thumbnail"></p><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><p>本文的目标是利用<a href="https://github.com/huuhghhgyg/Container-Terminal-Simulation" target="_blank" rel="noopener noreferrer">仿真框架</a>创建一个电梯情景的仿真模型。主要内容包括<a href="#%E5%88%9B%E5%BB%BA-queue">队列的创建</a>、<a href="#%E5%88%9B%E5%BB%BA-elevator">人物的创建</a>、<a href="#%E5%88%9B%E5%BB%BA-elevator">电梯的创建</a>、<a href="#%E4%BB%BF%E7%9C%9F%E9%80%BB%E8%BE%91">仿真逻辑的实现</a>。</p><h2 id="创建-queue" tabindex="-1"><a class="header-anchor" href="#创建-queue"><span>创建 Queue</span></a></h2><p>当等待电梯的人比较多时，需要排队。所以这里我们首先需要创建队列。这里创建一个队列类，方便后续复用。队列类实现了队列的基本功能，包括进入（<code>add</code>）、退出（<code>pull</code>），并在对应的操作中刷新队列元素位置（<code>refreshpos</code>）。</p><p>创建 Queue 类的代码如下</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> queue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;nil&quot;</span> <span class="token keyword">then</span></span>
<span class="line">        config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 设置属性</span></span>
<span class="line">    queue<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;queue&#39;</span></span>
<span class="line">    queue<span class="token punctuation">.</span>len <span class="token operator">=</span> config<span class="token punctuation">.</span>len <span class="token keyword">or</span> <span class="token number">20</span> <span class="token comment">-- 队列长度</span></span>
<span class="line">    queue<span class="token punctuation">.</span>origin <span class="token operator">=</span> config<span class="token punctuation">.</span>origin <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 原点</span></span>
<span class="line">    queue<span class="token punctuation">.</span>vec <span class="token operator">=</span> config<span class="token punctuation">.</span>vec <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 增长方向</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 计算</span></span>
<span class="line">    queue<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>len <span class="token keyword">do</span></span>
<span class="line">        queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">local</span> pt <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            vertices <span class="token operator">=</span> queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            size <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 任务相关函数</span></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>len <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">pull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> pullItem <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> pullItem</span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">#</span>queue <span class="token operator">==</span> queue<span class="token punctuation">.</span>len <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span> <span class="token operator">..</span> queue<span class="token punctuation">.</span>type <span class="token operator">..</span> queue<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;] 队列已满，加入失败&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> obj<span class="token punctuation">)</span></span>
<span class="line">        obj<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span><span class="token operator">#</span>queue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        obj<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span><span class="token operator">#</span>queue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">-- 复制</span></span>
<span class="line">        queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> queue</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-person" tabindex="-1"><a class="header-anchor" href="#创建-person"><span>创建 Person</span></a></h2><p>然后创建一个人物模型，用于测试队列的功能。由于每个人有不同的目标，且能够移动，因此可以将其看作能够执行不同任务的 Agent。因此，Person 类需要继承自 Agent 类以实现任务相关函数，如任务添加、任务执行、任务删除等操作。</p><p>由于 Person 类定义了模型，因此需要重新实现<code>setrot()</code>方法，以便在设置旋转时同时设置模型的旋转；而 Agent 类中已经实现了对于单个模型的<code>setpos()</code>方法，因此不需要重新实现，只用设置<code>person.model</code>即可。</p><p>Person 类中主要新定义了 stay 任务和 waitelevator 任务。</p><ul><li>stay 任务指的是人物在电梯内原地不动，等待电梯到达其指定楼层；</li><li>waitelevator 任务指的是人物在 Queue 中等待电梯到达。</li></ul><p>创建 Person 类的代码如下</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> person <span class="token operator">=</span> <span class="token function">Agent</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    person<span class="token punctuation">.</span>model <span class="token operator">=</span> config<span class="token punctuation">.</span>model <span class="token keyword">or</span> <span class="token string">&#39;https://www.zhhuu.top/ModelResource/models/mc/steve.glb&#39;</span></span>
<span class="line">    person<span class="token punctuation">.</span>model <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token comment">-- 添加模型</span></span>
<span class="line">    person<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;person&#39;</span></span>
<span class="line">    person<span class="token punctuation">.</span>id <span class="token operator">=</span> person<span class="token punctuation">.</span>model<span class="token punctuation">.</span>id</span>
<span class="line">    person<span class="token punctuation">.</span>targetFloor <span class="token operator">=</span> config<span class="token punctuation">.</span>targetFloor <span class="token keyword">or</span> <span class="token number">2</span> <span class="token comment">-- 目标楼层</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> person<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">        person<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 等待电梯到达目标楼层</span></span>
<span class="line">    <span class="token comment">-- {&#39;stay&#39;, {elevator=}}</span></span>
<span class="line">    person<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>stay <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>elevator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> params<span class="token punctuation">.</span>elevator<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;elevator&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;输入的电梯类型有误&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有dt，等待elevator调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> params<span class="token punctuation">.</span>elevator<span class="token punctuation">.</span>floor <span class="token operator">==</span> person<span class="token punctuation">.</span>targetFloor <span class="token keyword">then</span></span>
<span class="line">                person<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> person<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 在队列中等待电梯到达</span></span>
<span class="line">    <span class="token comment">-- {&#39;waitelevator&#39;}</span></span>
<span class="line">    person<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>waitelevator <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有dt，等待elevator调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> person<span class="token punctuation">.</span>elevator <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                person<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> person<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> person</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-elevator" tabindex="-1"><a class="header-anchor" href="#创建-elevator"><span>创建 Elevator</span></a></h2><p>电梯（Elevator）是该仿真中任务较为复杂的一个 Agent，其中存储了电梯的信息（如层数、层高度）、工作状态、队列信息、当前楼层等信息。</p><p>电梯的任务主要包括：</p><ul><li>pull：从队列中拉人</li><li>push：从队列中卸人</li><li>waitagents：等待 Agent 操作，如等待 Agent 到位</li></ul><p>在电梯内的人物是一个队列，因此 Elevator 中定义了一个队列<code>Elevator.queue</code>，用于存储电梯内的人物；还通过<code>Elevator.places</code>定义了其中每个队列位置的具体位置坐标。</p><p>创建 Elevator 类的代码如下</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Elevator</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;nil&#39;</span> <span class="token keyword">then</span></span>
<span class="line">        config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">local</span> elevator <span class="token operator">=</span> <span class="token function">Agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>model <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        width <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        height <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token string">&#39;#eee&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;elevator&#39;</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>id <span class="token operator">=</span> elevator<span class="token punctuation">.</span>model<span class="token punctuation">.</span>id</span>
<span class="line">    elevator<span class="token punctuation">.</span>origin <span class="token operator">=</span> config<span class="token punctuation">.</span>origin <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>doorRadian <span class="token operator">=</span> config<span class="token punctuation">.</span>doorRadian <span class="token keyword">or</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">-- 出门的方向</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>places <span class="token operator">=</span> config<span class="token punctuation">.</span>places <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 物品队列</span></span>
<span class="line"></span>
<span class="line">    elevator<span class="token punctuation">.</span>floorHeights <span class="token operator">=</span> config<span class="token punctuation">.</span>floors <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment">-- 默认两层楼，其高度对应为0和5</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>floor <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">move2y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> ox<span class="token punctuation">,</span> _<span class="token punctuation">,</span> oz <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>origin<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>ox<span class="token punctuation">,</span> y<span class="token punctuation">,</span> oz<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">local</span> p <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                p<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                p<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">false</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">true</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">minFloor</span><span class="token punctuation">(</span>exceptFirst<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> fmin <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor <span class="token operator">&lt;</span> fmin <span class="token keyword">then</span></span>
<span class="line">                <span class="token comment">-- 除了最低楼层为1楼、并且除去1楼的情况</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> exceptFirst<span class="token punctuation">)</span> <span class="token keyword">then</span></span>
<span class="line">                    fmin <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor</span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> fmin <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">nil</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> fmin</span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">getplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> _<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _ <span class="token operator">=</span> elevator<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">getpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">move2y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> floorList<span class="token punctuation">,</span> doPull<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;电梯去&#39;</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">&#39;楼，taking:&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                        <span class="token function">print</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;-&gt;&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">            args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>floorHeights<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;setvalue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> <span class="token string">&#39;floor&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            value <span class="token operator">=</span> f</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">-- push</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>f<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 弹出到对应楼层的人</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">-- pull</span></span>
<span class="line">        <span class="token keyword">if</span> doPull <span class="token keyword">then</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;pull&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                floor <span class="token operator">=</span> elevator<span class="token punctuation">.</span>floor<span class="token punctuation">,</span></span>
<span class="line">                queue <span class="token operator">=</span> floorList<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;waitagents&#39;</span><span class="token punctuation">)</span> <span class="token comment">-- 从队列中pull到的agent</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 从楼层队列中拉取person</span></span>
<span class="line">    <span class="token comment">-- {&#39;pull&#39;, {floor=,queue=}}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>pull <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>floor<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的pull任务floor参数不为number&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的pull任务queue参数不为table&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- 检查剩余位置</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                    <span class="token comment">-- pull到剩余位置中</span></span>
<span class="line">                    <span class="token keyword">local</span> p <span class="token operator">=</span> params<span class="token punctuation">.</span>queue<span class="token punctuation">:</span><span class="token function">pull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;nil&quot;</span> <span class="token keyword">then</span> <span class="token comment">-- pull不到了</span></span>
<span class="line">                        <span class="token keyword">break</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">                    p<span class="token punctuation">.</span>elevator <span class="token operator">=</span> elevator</span>
<span class="line">                    elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p</span>
<span class="line">                    p<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 唤醒</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 删除任务</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 从电梯中弹出person</span></span>
<span class="line">    <span class="token comment">-- {&#39;push&#39;, {floor}}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的push任务参数非number&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 弹出目标为对应楼层的人</span></span>
<span class="line">            <span class="token keyword">for</span> i<span class="token punctuation">,</span> people <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> people<span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> elevator<span class="token punctuation">.</span>floor <span class="token keyword">then</span></span>
<span class="line">                    <span class="token comment">-- 唤醒agent(弹出)</span></span>
<span class="line">                    people<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    people<span class="token punctuation">.</span>arrived <span class="token operator">=</span> <span class="token keyword">false</span> <span class="token comment">-- 设置到达sink的状态</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- 检查离开状态（需要people唤醒）</span></span>
<span class="line">            <span class="token keyword">local</span> arrived <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">local</span> p <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> p<span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> elevator<span class="token punctuation">.</span>floor <span class="token keyword">then</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token keyword">not</span> p<span class="token punctuation">.</span>arrived <span class="token keyword">then</span></span>
<span class="line">                        arrived <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">                    <span class="token keyword">else</span></span>
<span class="line">                        <span class="token comment">-- 删除位置</span></span>
<span class="line">                        elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 删除任务</span></span>
<span class="line">            <span class="token keyword">if</span> arrived <span class="token keyword">then</span></span>
<span class="line">                elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 检测agent是否到位</span></span>
<span class="line">    <span class="token comment">-- {&#39;waitagents&#39;}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>waitagents <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有结束时间，等待person调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">local</span> all_arrived <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 判断是否全部wait的agent都到达</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>queue <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> <span class="token keyword">not</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arrived <span class="token keyword">then</span></span>
<span class="line">                    all_arrived <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 全部到达，删除任务</span></span>
<span class="line">            <span class="token keyword">if</span> all_arrived <span class="token keyword">then</span></span>
<span class="line">                elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> elevator</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="仿真逻辑" tabindex="-1"><a class="header-anchor" href="#仿真逻辑"><span>仿真逻辑</span></a></h2><h3 id="环境创建" tabindex="-1"><a class="header-anchor" href="#环境创建"><span>环境创建</span></a></h3><p>首先创建场景。创建一个电梯，给定层高和层数。然后在每层创建一个队列，用于存放等待电梯的人；创建一个离开点，令到达目标楼层的人从这个位置离开。其中，队列点位颜色为灰色，离开点颜色为红色。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token comment">-- 创建环境</span></span>
<span class="line"><span class="token keyword">local</span> floorNum <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> floorHeights <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> floorNum <span class="token keyword">do</span></span>
<span class="line">    floorHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> elevator <span class="token operator">=</span> <span class="token function">Elevator</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    floors <span class="token operator">=</span> floorHeights</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> floors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- {queue, sinkPos}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> f<span class="token punctuation">,</span> height <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>floorHeights<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        origin <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>id <span class="token operator">=</span> f</span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sinkPos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line">    scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        vertices <span class="token operator">=</span> floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sinkPos<span class="token punctuation">,</span></span>
<span class="line">        size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="人物创建流程" tabindex="-1"><a class="header-anchor" href="#人物创建流程"><span>人物创建流程</span></a></h3><p>人物生成具体操作使用 <code>genPeople()</code> 函数实现，主要设置了人物的流程：</p>`,28)),t(p,{id:"mermaid-99",code:"eJx1kc9Kw0AQxu99ihzTQy8+gCDoXdAXiLq2xZjEzSbFWwQraa2gUFQqUhW0Ctp6UTFp8jSZbHryFdw/mtiAc1jYne/7zczOtm62NhsaJsr6ckVhYRN+qdUWlToyVpFp6agiE85GHWtWQwH/GkbH0DsXzzxypQr+FYRBEgS081QVlD0HOUhNP0Lo3oD/Orscgn9RFVZkbJXQUpaE7LzN6YIgWC2tSVZ05GrExCp96UDcpv239G4ieTz+SoRn13TRgmXaKh0x6iNrQVrgqE0HhzD5hKCfRCc0GheQX48AaBg3XZSXzcYx0zJMFseSRLvvqXfwNe3NvAEd3pc7mvcLJDaJKv8oi57h9KwQs4xQsC3sz00oCxZCLijms5vGjkofQph65fJ5XnIRWRL9rHGHnOXH9/8UfE/f7ev16w=="}),n[1]||(n[1]=s("p",null,[a("人物定时生成使用 "),s("code",null,"randomPeopleSummoner()"),a(" 函数实现，主要设置了人物的生成时间间隔和根据 Elevator 的状态激活 "),s("code",null,"elevatorNextFloor()"),a(" 函数。人物生成时间随机生成，遵循负指数分布。")],-1)),n[2]||(n[2]=s("h3",{id:"电梯运行逻辑",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#电梯运行逻辑"},[s("span",null,"电梯运行逻辑")])],-1)),n[3]||(n[3]=s("p",null,[a("电梯通过 "),s("code",null,"elevatorNextFloor()"),a(" 来控制电梯到达的下一个楼层。")],-1)),n[4]||(n[4]=s("p",null,"对应流程图如下：",-1)),t(p,{id:"mermaid-112",code:"eJyNUktOwkAY3vcULmFBAgeAjcpO44ILEBygsWaQDlGTWaABDCKgiQ8CJAqKiUZBiSLhdZrOFFZewaHTB0WC7qb5/+/5NyzB/VA0GEcrgTVhLwESYDUKQjub4AD5JQjjjkk9RZplpZtTukn6UqP3SXrbUCtNendCGwPyfuwUBBkxApfLJ8rruzF06FAvP2m9RTJpWmqR80dazSq9npMtYNqusSeOALQBZbQFYEwCXGdc+CLFazakV2+0miQPZbWcMhR+70/J+LLXjcVtCTjGzZE6bCrdnvrUm9y01dMOTR4th/rcWAbIympS8LhM+ntwRnOG+wX1CIKeWQun5cSsUSAbjFoqlkcZFowwM3OOsoZeDxZlf0KS9Ar1/vo1clHi/WlPHIEezq9WPmihQQp9DyP40yzn1u/AqHDIfmt+XDP87PXU1ywZpTUPKJ4AOMaILCAzYKG4BcHOPQWGg5IMsIhAfF6SZPImXtMwv3yeOZOCDW/bZe0ZxQjLWmacohyAMd3BzIQnZj/ApNYxrGhxI9DcZ1n59B91GyArPYKLW2NkpPhM8t0lfD/gJuN/"}),n[5]||(n[5]=e(`<blockquote><p>虽然当前任务逻辑看上去已经比较复杂，但是仍有改进的空间</p></blockquote><p>最后通过 <code>elevatorNextFloor(elevator)</code> 令电梯进入楼层检查流程。</p><h3 id="人物生成流程" tabindex="-1"><a class="header-anchor" href="#人物生成流程"><span>人物生成流程</span></a></h3><p>通过设置随机数种子控制人物生成的规律。此处设置如下</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token comment">-- 创建泊松分布的随机数种子</span></span>
<span class="line"><span class="token keyword">local</span> seed <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    distribution <span class="token operator">=</span> <span class="token string">&quot;exponential&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    mu <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 负指数分布，均值为5</span></span>
<span class="line"><span class="token keyword">local</span> summonCount <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后通过 <code>randomPeopleSummoner()</code> 函数串联人物生成流程和电梯唤醒。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">randomPeopleSummoner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> f <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> floorNum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> people <span class="token operator">=</span> <span class="token function">genPeople</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">    table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ActionObjs<span class="token punctuation">,</span> people<span class="token punctuation">)</span></span>
<span class="line">    summonCount <span class="token operator">=</span> summonCount <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>status <span class="token operator">~=</span> <span class="token string">&#39;busy&#39;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">elevatorNextFloor</span><span class="token punctuation">(</span>elevator<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> summonCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">        coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>seed<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> randomPeopleSummoner<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token function">randomPeopleSummoner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="仿真控制" tabindex="-1"><a class="header-anchor" href="#仿真控制"><span>仿真控制</span></a></h2><p>仿真控制相关代码。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token comment">-- 仿真控制</span></span>
<span class="line"><span class="token keyword">local</span> ActionObjs <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">local</span> simv <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment">-- 仿真速度</span></span>
<span class="line"><span class="token keyword">local</span> watchdog <span class="token operator">=</span> <span class="token function">WatchDog</span><span class="token punctuation">(</span>simv<span class="token punctuation">,</span> ActionObjs<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    isImmediateStop <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token comment">-- 无任务不立刻停止仿真</span></span>
<span class="line">    recycleType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">}</span> <span class="token comment">-- 指定回收Agent类型</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">watchdog<span class="token punctuation">:</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本案例中包含：</p><ul><li>如何创建可用的逻辑组件，对应本文中的 Queue；</li><li>如何根据需求创建对应的 Agent（本文中的 Person 和 Elevator），包括如何使用 Agent 基类内置的任务（如 move2、fn、setvalue）、向其中创建指定任务以完成相应的业务逻辑（如 <code>person.tasks.stay</code>、<code>elevator.tasks.pull</code> 等）；</li><li>如何在流程中，包括 <code>coroutine</code> 唤醒的函数流程中添加任务到 Agent 中；</li><li>仿真框架实现的其他所需设置，如创建 ActionObjs、WatchDog 等。</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><p>需要注意的问题：</p><ul><li>需要注意添加任务的顺序，对应的操作需要使用任务完成还是直接完成。</li><li>由于 Person 在排队时受等待任务阻塞，因此当前 Person 在结束阻塞之前都不会前进补齐空位。这是一个可能的改进方向。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><iframe src="https://mcw.zhhuu.top/#/H4sIAAAAAAAACu0c224bxzXP/IqB87BkS1KkbDmAURoI2gYt0KTuBeiDIAQrciitvdxld5fyRWAg3yXLlp34LstWlEi22sC2nMQOTUrOx5S7FJ/8C81cd2Z3SEqujSCFBgbM3Zk5c86Zc59ZFe0SfO8dt1wulzt48AD6P//BSE78P5fL7f/gwMjwe/kDBw+MfHDw4MjI/vfywyP796N57xox1Gqupzvv5XKe7ozrpnnU7TFuUP8vtGUyIJ9tN+a3t7b8i1vBzQ2/ed2f3di+uxjML3e+Pt25dydRdQzLS2rB46/9pXUytv3q/vbzW/Gx2WxWSyVsN1urmrZeSmqTnld1Dw0NHT9+PHtqcrJWy3p2dehjuwTNv0LXrjlFOGQa4+5Q0RvSJ6DlZc2a/uYgjutecbJkT/wPUDx93ISu51AQlHjKoieXg9lrWiqRyYDhrL95s3Nj3W9eTzjwnzXDgUkNk6ClwhcMIfEdW0FLJRJuEVow60IPWlPJ6QQAAEw4RgkUgFY1dQtqiTrDIZVIlGtW0TNsC/ylBmswWbStsjGRwrNMu6ib4J/oPSiA6XoCvzXKwDtZ5SNBoQD2WYa5D3iT0MIjUCO9ZBp6hlaJTM9kwPaTV52tJ/6zB8HMI/wOL5FFUBGS+EkTOkxogQKFiB9sBwznEKTunWV/9nb35o9+86EwwXaMCUOYQ59tB0zn0gD9q6PZ/sJy58xLYd4ULIaT0AOaMSzO+OpB9+aPwa2X/rXPBXJWOk9uC2CqthsSXrYdYIACyKcFako2ZxSfMmqMoVkiBaP5MfDrEDf0+CuQNEAG5FNpidbRYXnksDiSrxVtEoT9MoT9AoQ6h0BEouqBAiBippdK9vjRpFa1DctztTSYllabgo5nFCHih0iojJJrnEIbP8Jf1lMxmWm3Wv6llc69hn/+O2JVCHeZ9GLohxxYdqA7WbXdZIpDG7QDolDjAaPGGBZrolWaLNgS70aNsUN6qeTp7rGkVrGn4DDiAJ6WrVlVvXgsKZKdqqckOIjA6G9OdIS0as00BaLoRtRM848erIACIIs6EGFBFk2DfEoWM5E/nlODqQTvd6BXcywOsC8qeqmUtMePhsCNMnifmomCwOMY36jhG9VANisqPX8ySui3NkYV2//h26C18nrzsn/pS//8mr/6bPv7NU3mIUFcYiN/IDwxLBc6HuOJhLg9fvSQCz3MD/WmEbrGUtIcpuED5hCTsXrFn33Rex8iok73AQ9L4LeZDDgCHde2QlNNnhW2uoo7QAF8iJyGNIB0ZSvIO4VGjjzaDtiRM8Oj3aFKccj14BTMTpjjmgq4ZBrEvhTiSPBDy7/0ZbC+4j+YF2cz+08eJcDYe4mAskZJmqo7E9D7yLRtJ6RNfIk8Blq7c+9J8OXFYG3Tf3YmItsEFBIHx/aSJ9LgZBqcCrddXF05SLRWncdz/qvznRvPg6+eonDm1StpYTpqWnM9/SSyGNCEU7pnO4V6XSbLPeZm0SAkbaG6WQYywAzzZFV39Iorq4XuYqHHRo30Z9kikm3TrRKI9NONKACNvdHiLmTf9qvr/vm1zuI5QmXnWct/MB8szW0/fbpPsCuYGgK/hJC2DFPVR0lCRknqRuLy7UqwNFfyXm9eJmxlWG1vnP0pVoInYLHmQf/GavfCF6IZCHGmQ0SWlbw0ULHNKMe4USZSVVDJmtIzUEEqQRP7hVRsQNF27JpnWDCL1TyZSzPYFFP2jNWl8828P9sK5h5tr1xuN+bbjZl249/EHQ50JnUukf7SOrGp7cbjuHSGEnlcNzy+7QphFPt3LZS/MEGge8Ko/Qwj/UvZc+bQietgnuT3lJjQl7A3krNQxPiaZZjaDmN84owEMSHuiNpJplhKb6GN2yekKNKE1oQ3CQrgQLiPx41S9NUkNCYmkeTksvm0gKGJ19feh5CmFPUIFszrcKGXu7HnkVFmvoe/3UG6IU8o2bbzV71k6MIk4Z3tgIruTWarBhgibsu/2OzeXu8snqOphwStauokwqaQ6DNafjqTxwjk62nAfmfwQ/x3vh7BMkz8sEjO/cu/fprYkIQ8EFvIP+ANENDAb13GhREMpNu6s/1ktd1Y9Z+dCdY2UWR3/kX3mzt+86H/9KXfvNFuNHP+F5dHFAugCD7istmAQzj0Ppk8GY2P7RNp8Gka2Kd4gEyDtcjehfPkrWbBoU08vX1K8GxCWvF+dC8i2QUNzkRJYumDMgupDk4/qgy1yNKjxthofgxjq+jZPxa3TFUWze4SUn2gJYrnD3zDDPcjOZ/ZBTeNcpyNiF89jTM1hWXddOFApIUJ3An1IaRiWDgUSMITRVj1PjIc14tKYbmCrUMeDIHcG8kPk4sY2bFQLjZCCld+Q1BRMglp593VdvNCsDTT3logkWq70cwHa5v/mTntv3zRbtzo3l31F1roFbJFZ8/7F57HABllYNkeiCMrR+mIHxhjgW9qzDCzCAv7woxNFLdUtd1i/koWoJsUx4NKhBi0SBCYiFUMa5DETEAP73LSiMrJp1jZPo05HDxFKmnQ5d5MZfvgRm1KLPnpYWj7QPJsohblNMDW+0+G66VByT5SM00FXF5EKVuxGlJZjNcU9osUFWg4u9DS0qCcBhpxL55+zLAmDmnxabtQP0FMdqCGPWU4RFYhxierMK0Qb6OUBlrmsKbqE0Q/Th5QyL/qnRQfo6Y7E0L1EoQRE1DuFy96RTwqlkNlhDBaFnt48bHvKi70pnSzBmOycQyi1FjD8CNZKp6AREckhP/OZEC15k72WRN1o/XKdRyS+5sv/YtNf3aDBCrEPnYWz7WbzQhUM7QRRpmKfFwqVAuaZoxA1Fj4I7MznpOzgI0r3Gh5jIiLNFTktGgRYwihXA+fPrhaitRgF3gOiZD1Zzc6i+fwiFgFpN2iLoTPCObn/Ku3aD4CWL7JiMY4F9IY20I0EiWpJxr6NuogeCma09Qq41BV3pDTg2xWSghQibKzeA7hQ3IyDNG/eia4udFuXGk3mhTuQFQwuaL1SO9yZQxAXJmAeTsFmDfNnVGu/vVMsLzmz/2rvXW3vXWls/VENum7M767jvhAqItIYwU02o3HytFhiC5uTbTqHkFKCNbDIzC2cLtxxZ/daDcv9HQG4w7Uj/W03MqOaliOCO2BGkScYaCqhnmI7m2SGDq5gCKi1BdFNHX2SxRDKuoUzLaoCySK4ghHn5dHwvLlDgsk8SJYu7VAwoR24zGx53FzRI0+0uheZsidfAtmaDQ/JtugHWq+O0nIJErfvf+A25rYbmAKSeG53Wgq/JY4AaskKkLZVRMCwwJGVTccNxKrpHqoJ5kWjfAjCXw/VSVSh31JkiCu1jqyUCixfQZldccxpiAq4ODUTzh6xkVP17COofr1pRfBzOndy/u7NJydhy1/c4Zg9npztrs0s/3wNKGKMOr15pyiwhASjNH5X0zuTksWoGfZAp8svKlE0CSyyvewb1Qd2ege9rBHB5BsV9xXyUDiRjXqUPnYnUXfOzeiRhn05cYAIwvemaGNUhY3vEiqn89j7Q7uPPWvPUSecetKaHeFUFNpdMP+n+XQodO6HtxfDm6/6N7+nh8/EN/xLg4fqDab5qf9NBrLympw6zFl6fn17tl1xCgWlHfPbgnHO6wpDQFJHdS2fYelJ6Sv8SR1oP7KVPbWX3WwtCOFwowhnEAV5376JSDzi9IxWhDiESE77/Fn7/mtZmfhqf/V2QStRiLL+0mtgm/ciO/CCv50PSFICZ9AxUNK5rEJpNeEwK/ACFk5dgDET5mmQxAuS1UpLHQtTUDH5UcP0/TqBnLYR2y3nsDYldPs0EcRrIhwUxLiqP4g3M5ir/hpB7kGJ50/ITbkQkXmxz3oahhBgR/x0Nw6ApacIpUjXZScCKA8ATTwdpVwsyoGMsSVXa1SHIk5sMRPxJi4tFs/dpaWuzOt7Vefh0eEE9A6gmOPJDKUQsEJye6N5WD2Wux2A9lH6vzxyQ3VMA6BFFslJQuH4+MvR7dKdiU5HEpgpOoYufNCb8VMR+HR6gl9CjnBzh/FxVLgMMhlR7BBe+MrMSCSku0S0JRhmvoEdMLrNXXxCg+7fCLaFeHwMMPODtMgR3MCKh+c9VQq8T0u4dB5AlrQ4flkJgMwRf2Xw4sIuEm1I36kqh4SKfX2KfPGzEnkaD6hGI2MV04dXbOywPV/Izurrk4cS4OpN8iCiCgWwFSf0BYUgDrrf0MXF+VrvCQrnw6oq7KhdPQ6PCC+6lHLv4ScKa23XzjfFxdFOR8MLumDHQo7l74If+L1vHhVG8iVUBXyPavOIKw802hBUUJk9edYVEkYKWaiihT07TGShyxSlac7s9hZXiOb+C5ZSC+49QykepWxaNF9aZ3LGQm6dyj60mE/tX/x+1vcYaaocJO0O86Un00ykgjB1P+HfEiz5NHsZEZxaUmIQryP9RM4PCNHi+LF1wrt+RO7LZRTdLJIgF0jIUEklg58iTo090RiJDOP7jjzoTRaPBxdN2b0Y3hFYShHM0TLIu/k2IdySpqRjizHwzoS0AXPT3fW5xOxs9pP4AmP3mFgWYnIPHrBQVDU8NJDKszwv11hFUWjLExSFOnpgS2DRmoD/uwGAYEytIVWu9kMlmb81UV0z2BtUzhJ+ckqxA6ZWZLipgG51s4G8/1X8gcUegmVqBfo/q1XQ8Kqjdfck1psAEcjXEfGRpShCAaHVZcNdnQqDqh2x3axt2ayob01NJp8D9wqYquIfWo3mkYJHz6piBHYiEdJos0fhNv84mlisDTHpKvvtkREL5JfYEAz/sZVXhNHN1nE3YndT4pvDgLSWvE/v4PqQPe+DxbW6I2YvoxTzujBqcFiHdsn5CofngkeLKFyFfliYqFFmIZK/bimgK7czc9Fy/48KA4H4WqSwPEeNPVZQVOF7xYT0NhJNioeyH79+KRhQmHGYZBXhdzsK0JMAMk+tXQ4Le7vuBF3R/moMW7MFaqoop3owfKaP7shrpYGGmIAZgndABUzeu62AEi962LbWaqAmsj28HeGZuTiTOkFKsCHM2OqpOJLxECInFBIu5IHPSU+Sh33h6ImoAJG40pw52meXP7hysZswuvNy2iArAWhTCA6ufnobZW5uadDIzhjZfzh207rKjn+DZZmuisv/GdnXm9ejiwd0+MdrIErpCnqchGnBfBx4mJxw0DfMsCnqH0JCVyJHiGxASgQJ+FHvyiDFLkcaJUgjiV4wTL47lJw/5U/e8FvnO0snusuXg2WmsHNjc6jK/7ja7RK6EJcMhbKN+gNShUJNSXD9RxjvIaDnQLYB09UbQtanqGb+whBlRp6n8/tS9DI+/vl4PJF9MUyXhnJ7v2L/sxmu9EcYYvWKhXb+q1ds9CJwUhOKJsFC4/Ql15k3Ic4xvrz+NEItygUozKF7q/TR/ZFLyiAf6Cfv7MnkmhIWgDDqDLcP1YqsGToHvybZ1dZzTxNo8LiyaIJ/07utE+zT6nqqLTKFmEfn0kf/xL+kSrf3zCJUA6wy5FCWT5alWPFOHx8XBBqhmXSL32LJ5JFppBBMnfFJ+4ixLsgNAT4jMUAstIOim+5ThhlaamYI4hW9JGYHWIFw7SSd+EKeJUe7P25v9R/N62qu+/8Lxr0//sPuEX//sOB4b2//7DX9tpe22t7ba/ttb221/baXttrb7X9F55engsAUAAA" width="100%" height="600" style="border-radius:8px;"></iframe><p>🔗 <a href="https://microcity.github.io/#sgrzqu" target="_blank" rel="noopener noreferrer">在 MicroCityWeb 中打开</a></p><h2 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码"><span>完整代码</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token comment">-- 1.下载函数库到虚拟磁盘</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;正在下载依赖库到虚拟磁盘...&#39;</span><span class="token punctuation">)</span></span>
<span class="line">os<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.zhhuu.top/ModelResource/libs/ct/agent.lua&#39;</span><span class="token punctuation">)</span></span>
<span class="line">os<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.zhhuu.top/ModelResource/libs/ct/watchdog.lua&#39;</span><span class="token punctuation">)</span></span>
<span class="line">os<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.zhhuu.top/ModelResource/libs/tablestr.lua&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;下载完成&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">-- 2.引用库</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;agent&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;watchdog&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;tablestr&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    grid <span class="token operator">=</span> <span class="token string">&#39;plane&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> queue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;nil&quot;</span> <span class="token keyword">then</span></span>
<span class="line">        config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 设置属性</span></span>
<span class="line">    queue<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;queue&#39;</span></span>
<span class="line">    queue<span class="token punctuation">.</span>len <span class="token operator">=</span> config<span class="token punctuation">.</span>len <span class="token keyword">or</span> <span class="token number">20</span> <span class="token comment">-- 队列长度</span></span>
<span class="line">    queue<span class="token punctuation">.</span>origin <span class="token operator">=</span> config<span class="token punctuation">.</span>origin <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 原点</span></span>
<span class="line">    queue<span class="token punctuation">.</span>vec <span class="token operator">=</span> config<span class="token punctuation">.</span>vec <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 增长方向</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 计算</span></span>
<span class="line">    queue<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>len <span class="token keyword">do</span></span>
<span class="line">        queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                        queue<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span>vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">local</span> pt <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            vertices <span class="token operator">=</span> queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            size <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 任务相关函数</span></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>len <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">pull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> pullItem <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> pullItem</span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> queue<span class="token punctuation">:</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">#</span>queue <span class="token operator">==</span> queue<span class="token punctuation">.</span>len <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;[&#39;</span> <span class="token operator">..</span> queue<span class="token punctuation">.</span>type <span class="token operator">..</span> queue<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;] 队列已满，加入失败&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> obj<span class="token punctuation">)</span></span>
<span class="line">        obj<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span><span class="token operator">#</span>queue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        obj<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>pos<span class="token punctuation">[</span><span class="token operator">#</span>queue<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">-- 复制</span></span>
<span class="line">        queue<span class="token punctuation">:</span><span class="token function">refreshpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> queue</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Person</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> person <span class="token operator">=</span> <span class="token function">Agent</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    person<span class="token punctuation">.</span>model <span class="token operator">=</span> config<span class="token punctuation">.</span>model <span class="token keyword">or</span> <span class="token string">&#39;https://www.zhhuu.top/ModelResource/models/mc/steve.glb&#39;</span></span>
<span class="line">    person<span class="token punctuation">.</span>model <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token comment">-- 添加模型</span></span>
<span class="line">    person<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;person&#39;</span></span>
<span class="line">    person<span class="token punctuation">.</span>id <span class="token operator">=</span> person<span class="token punctuation">.</span>model<span class="token punctuation">.</span>id</span>
<span class="line">    person<span class="token punctuation">.</span>targetFloor <span class="token operator">=</span> config<span class="token punctuation">.</span>targetFloor <span class="token keyword">or</span> <span class="token number">2</span> <span class="token comment">-- 目标楼层</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> person<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">        person<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 等待电梯到达目标楼层</span></span>
<span class="line">    <span class="token comment">-- {&#39;stay&#39;, {elevator=}}</span></span>
<span class="line">    person<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>stay <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>elevator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> params<span class="token punctuation">.</span>elevator<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;elevator&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;输入的电梯类型有误&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有dt，等待elevator调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> params<span class="token punctuation">.</span>elevator<span class="token punctuation">.</span>floor <span class="token operator">==</span> person<span class="token punctuation">.</span>targetFloor <span class="token keyword">then</span></span>
<span class="line">                person<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> person<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 在队列中等待电梯到达</span></span>
<span class="line">    <span class="token comment">-- {&#39;waitelevator&#39;}</span></span>
<span class="line">    person<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>waitelevator <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有dt，等待elevator调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> person<span class="token punctuation">.</span>elevator <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                person<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> person<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> person</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Elevator</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Elevator</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;nil&#39;</span> <span class="token keyword">then</span></span>
<span class="line">        config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">local</span> elevator <span class="token operator">=</span> <span class="token function">Agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>model <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        width <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        height <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token string">&#39;#eee&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;elevator&#39;</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>id <span class="token operator">=</span> elevator<span class="token punctuation">.</span>model<span class="token punctuation">.</span>id</span>
<span class="line">    elevator<span class="token punctuation">.</span>origin <span class="token operator">=</span> config<span class="token punctuation">.</span>origin <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>doorRadian <span class="token operator">=</span> config<span class="token punctuation">.</span>doorRadian <span class="token keyword">or</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment">-- 出门的方向</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>places <span class="token operator">=</span> config<span class="token punctuation">.</span>places <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 物品队列</span></span>
<span class="line"></span>
<span class="line">    elevator<span class="token punctuation">.</span>floorHeights <span class="token operator">=</span> config<span class="token punctuation">.</span>floors <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment">-- 默认两层楼，其高度对应为0和5</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>floor <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">move2y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> ox<span class="token punctuation">,</span> _<span class="token punctuation">,</span> oz <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>origin<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>ox<span class="token punctuation">,</span> y<span class="token punctuation">,</span> oz<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">local</span> p <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                p<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                p<span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">false</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">true</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">minFloor</span><span class="token punctuation">(</span>exceptFirst<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> fmin <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor <span class="token operator">&lt;</span> fmin <span class="token keyword">then</span></span>
<span class="line">                <span class="token comment">-- 除了最低楼层为1楼、并且除去1楼的情况</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> exceptFirst<span class="token punctuation">)</span> <span class="token keyword">then</span></span>
<span class="line">                    fmin <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor</span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> fmin <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">nil</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> fmin</span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">getplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">local</span> _<span class="token punctuation">,</span> y<span class="token punctuation">,</span> _ <span class="token operator">=</span> elevator<span class="token punctuation">.</span>model<span class="token punctuation">:</span><span class="token function">getpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">move2y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> floorList<span class="token punctuation">,</span> doPull<span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;电梯去&#39;</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token string">&#39;楼，taking:&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">then</span></span>
<span class="line">                        <span class="token function">print</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;-&gt;&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>targetFloor<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">            args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>floorHeights<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>origin<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;setvalue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">            key <span class="token operator">=</span> <span class="token string">&#39;floor&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            value <span class="token operator">=</span> f</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">-- push</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>f<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 弹出到对应楼层的人</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">-- pull</span></span>
<span class="line">        <span class="token keyword">if</span> doPull <span class="token keyword">then</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;pull&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                floor <span class="token operator">=</span> elevator<span class="token punctuation">.</span>floor<span class="token punctuation">,</span></span>
<span class="line">                queue <span class="token operator">=</span> floorList<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;waitagents&#39;</span><span class="token punctuation">)</span> <span class="token comment">-- 从队列中pull到的agent</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 从楼层队列中拉取person</span></span>
<span class="line">    <span class="token comment">-- {&#39;pull&#39;, {floor=,queue=}}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>pull <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>floor<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的pull任务floor参数不为number&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的pull任务queue参数不为table&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- 检查剩余位置</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">                    <span class="token comment">-- pull到剩余位置中</span></span>
<span class="line">                    <span class="token keyword">local</span> p <span class="token operator">=</span> params<span class="token punctuation">.</span>queue<span class="token punctuation">:</span><span class="token function">pull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;nil&quot;</span> <span class="token keyword">then</span> <span class="token comment">-- pull不到了</span></span>
<span class="line">                        <span class="token keyword">break</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">                    p<span class="token punctuation">.</span>elevator <span class="token operator">=</span> elevator</span>
<span class="line">                    elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p</span>
<span class="line">                    p<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 唤醒</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 删除任务</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 从电梯中弹出person</span></span>
<span class="line">    <span class="token comment">-- {&#39;push&#39;, {floor}}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>type <span class="token operator">..</span> elevator<span class="token punctuation">.</span>id <span class="token operator">..</span> <span class="token string">&#39;的push任务参数非number&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 弹出目标为对应楼层的人</span></span>
<span class="line">            <span class="token keyword">for</span> i<span class="token punctuation">,</span> people <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> people<span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> elevator<span class="token punctuation">.</span>floor <span class="token keyword">then</span></span>
<span class="line">                    <span class="token comment">-- 唤醒agent(弹出)</span></span>
<span class="line">                    people<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    people<span class="token punctuation">.</span>arrived <span class="token operator">=</span> <span class="token keyword">false</span> <span class="token comment">-- 设置到达sink的状态</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">-- 检查离开状态（需要people唤醒）</span></span>
<span class="line">            <span class="token keyword">local</span> arrived <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>places <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">local</span> p <span class="token operator">=</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> p<span class="token punctuation">.</span>targetFloor <span class="token operator">==</span> elevator<span class="token punctuation">.</span>floor <span class="token keyword">then</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token keyword">not</span> p<span class="token punctuation">.</span>arrived <span class="token keyword">then</span></span>
<span class="line">                        arrived <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">                    <span class="token keyword">else</span></span>
<span class="line">                        <span class="token comment">-- 删除位置</span></span>
<span class="line">                        elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">                    <span class="token keyword">end</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 删除任务</span></span>
<span class="line">            <span class="token keyword">if</span> arrived <span class="token keyword">then</span></span>
<span class="line">                elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 检测agent是否到位</span></span>
<span class="line">    <span class="token comment">-- {&#39;waitagents&#39;}</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>waitagents <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span></span>
<span class="line">            params<span class="token punctuation">.</span>dt <span class="token operator">=</span> <span class="token keyword">nil</span></span>
<span class="line">            params<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token comment">-- 没有结束时间，等待person调用execute唤醒</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        execute <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> params<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">local</span> all_arrived <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 判断是否全部wait的agent都到达</span></span>
<span class="line">            <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">#</span>elevator<span class="token punctuation">.</span>queue <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">type</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;table&#39;</span> <span class="token keyword">and</span> <span class="token keyword">not</span> elevator<span class="token punctuation">.</span>queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>arrived <span class="token keyword">then</span></span>
<span class="line">                    all_arrived <span class="token operator">=</span> <span class="token keyword">false</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">-- 全部到达，删除任务</span></span>
<span class="line">            <span class="token keyword">if</span> all_arrived <span class="token keyword">then</span></span>
<span class="line">                elevator<span class="token punctuation">:</span><span class="token function">deltask</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>execute<span class="token punctuation">,</span> elevator<span class="token punctuation">)</span> <span class="token comment">-- 立刻执行下一个任务</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> elevator</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 创建环境</span></span>
<span class="line"><span class="token keyword">local</span> floorNum <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> floorHeights <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> floorNum <span class="token keyword">do</span></span>
<span class="line">    floorHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> elevator <span class="token operator">=</span> <span class="token function">Elevator</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    floors <span class="token operator">=</span> floorHeights</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> floors <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- {queue, sinkPos}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> f<span class="token punctuation">,</span> height <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>floorHeights<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        len <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">        origin <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>id <span class="token operator">=</span> f</span>
<span class="line">    floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sinkPos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line">    scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;points&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        vertices <span class="token operator">=</span> floors<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sinkPos<span class="token punctuation">,</span></span>
<span class="line">        size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 仿真逻辑</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">genPeople</span><span class="token punctuation">(</span>initFloor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 生成目标楼层</span></span>
<span class="line">    <span class="token keyword">local</span> targetF <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> initFloor <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span></span>
<span class="line">        targetF <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> floorNum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">local</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        targetFloor <span class="token operator">=</span> targetF<span class="token punctuation">,</span></span>
<span class="line">        model <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token keyword">and</span> <span class="token string">&#39;https://www.zhhuu.top/ModelResource/models/mc/steve.glb&#39;</span> <span class="token keyword">or</span></span>
<span class="line">            <span class="token string">&#39;https://www.zhhuu.top/ModelResource/models/mc/villager.glb&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    person<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>doorRadian <span class="token operator">-</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    floors<span class="token punctuation">[</span>initFloor<span class="token punctuation">]</span><span class="token punctuation">.</span>queue<span class="token punctuation">:</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">-- generator</span></span>
<span class="line">    <span class="token comment">-- steve:setrot(0, elevator.doorRadian, 0)</span></span>
<span class="line">    person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;waitelevator&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">local</span> elevator <span class="token operator">=</span> person<span class="token punctuation">.</span>elevator</span>
<span class="line"></span>
<span class="line">            <span class="token keyword">local</span> i <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">            <span class="token comment">-- 检查pull到哪个位置</span></span>
<span class="line">            <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>elevator<span class="token punctuation">.</span>queue<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">                <span class="token keyword">if</span> person <span class="token operator">==</span> v <span class="token keyword">then</span></span>
<span class="line">                    i <span class="token operator">=</span> k</span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>floorHeights<span class="token punctuation">[</span>initFloor<span class="token punctuation">]</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>places<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 移动到电梯内</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    person<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> elevator<span class="token punctuation">.</span>doorRadian<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">                args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;setvalue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                key <span class="token operator">=</span> <span class="token string">&#39;arrived&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                value <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 设置到达状态</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    elevator<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 通知电梯</span></span>
<span class="line">                <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">                args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;stay&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                elevator <span class="token operator">=</span> elevator</span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 在电梯内等待</span></span>
<span class="line"></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;move2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span>floors<span class="token punctuation">[</span>person<span class="token punctuation">.</span>targetFloor<span class="token punctuation">]</span><span class="token punctuation">.</span>sinkPos<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 离开电梯</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;setvalue&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                key <span class="token operator">=</span> <span class="token string">&#39;arrived&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                value <span class="token operator">=</span> <span class="token keyword">true</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 设置到达(sink)状态</span></span>
<span class="line">            person<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    elevator<span class="token punctuation">:</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 通知电梯</span></span>
<span class="line">                <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">                args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span><span class="token punctuation">,</span></span>
<span class="line">        args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> person</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getMaxQueueFloor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> maxQueueLength <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">local</span> maxQueueFloor <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> f<span class="token punctuation">,</span> floorItem <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>floors<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">#</span>floorItem<span class="token punctuation">.</span>queue <span class="token operator">&gt;</span> maxQueueLength <span class="token keyword">then</span></span>
<span class="line">            maxQueueLength <span class="token operator">=</span> <span class="token operator">#</span>floorItem<span class="token punctuation">.</span>queue</span>
<span class="line">            maxQueueFloor <span class="token operator">=</span> f</span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> maxQueueFloor<span class="token punctuation">,</span> maxQueueLength</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 逻辑流程</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">elevatorNextFloor</span><span class="token punctuation">(</span>elevator<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> minFloor <span class="token operator">=</span> elevator<span class="token punctuation">:</span><span class="token function">minFloor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 没人</span></span>
<span class="line">    <span class="token keyword">if</span> minFloor <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevator检测到没人，去人最多的楼&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">-- elevator:toFloor(1, floors, true)</span></span>
<span class="line">        <span class="token keyword">local</span> maxFloor<span class="token punctuation">,</span> maxQueueLength <span class="token operator">=</span> <span class="token function">getMaxQueueFloor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        elevator<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;busy&#39;</span></span>
<span class="line">        elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>maxFloor<span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> maxQueueLength <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">                f <span class="token operator">=</span> elevatorNextFloor<span class="token punctuation">,</span></span>
<span class="line">                args <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevator检测到没人，设置状态为idle&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            elevator<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;idle&#39;</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 有人</span></span>
<span class="line">    elevator<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">&#39;busy&#39;</span></span>
<span class="line">    <span class="token keyword">if</span> minFloor <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token comment">-- 最小目标为1楼</span></span>
<span class="line">        <span class="token keyword">if</span> elevator<span class="token punctuation">:</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token comment">-- 满员，直接去1楼</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevator满员，直接去1楼&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token comment">-- 如果没满，去有人的下一层拉人</span></span>
<span class="line">            <span class="token comment">-- 检查下一层是否有人</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevator去有人的下一层拉人&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">local</span> nextFloor <span class="token operator">=</span> elevator<span class="token punctuation">.</span>floor <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">while</span> nextFloor <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">do</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;检查楼层&#39;</span><span class="token punctuation">,</span> nextFloor<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token operator">#</span>floors<span class="token punctuation">[</span>nextFloor<span class="token punctuation">]</span><span class="token punctuation">.</span>queue <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevaor检查到&#39;</span><span class="token punctuation">,</span> nextFloor<span class="token punctuation">,</span> <span class="token string">&#39;层有人，去拉人&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                    elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>nextFloor<span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token keyword">end</span></span>
<span class="line">                nextFloor <span class="token operator">=</span> nextFloor <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> nextFloor <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">then</span></span>
<span class="line">                <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;elevator检测到没有人，去1楼&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token comment">-- 不是1楼，直接去minFloor，不拉人</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token operator">#</span>floors <span class="token operator">==</span> minFloor <span class="token keyword">then</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>minFloor<span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token comment">-- 已经到了最顶层，拉人</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            elevator<span class="token punctuation">:</span><span class="token function">toFloor</span><span class="token punctuation">(</span>minFloor<span class="token punctuation">,</span> floors<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span> <span class="token comment">-- 没到最顶层，不拉人</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    elevator<span class="token punctuation">:</span><span class="token function">addtask</span><span class="token punctuation">(</span><span class="token string">&#39;fn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        f <span class="token operator">=</span> elevatorNextFloor<span class="token punctuation">,</span></span>
<span class="line">        args <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- queue next move</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token function">elevatorNextFloor</span><span class="token punctuation">(</span>elevator<span class="token punctuation">)</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 创建泊松分布的随机数种子</span></span>
<span class="line"><span class="token keyword">local</span> seed <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    distribution <span class="token operator">=</span> <span class="token string">&quot;exponential&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    mu <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- 负指数分布，均值为5</span></span>
<span class="line"><span class="token keyword">local</span> summonCount <span class="token operator">=</span> <span class="token number">50</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 仿真控制</span></span>
<span class="line"><span class="token keyword">local</span> ActionObjs <span class="token operator">=</span> <span class="token punctuation">{</span>elevator<span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">local</span> simv <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"><span class="token keyword">local</span> watchdog <span class="token operator">=</span> <span class="token function">WatchDog</span><span class="token punctuation">(</span>simv<span class="token punctuation">,</span> ActionObjs<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    isImmediateStop <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span></span>
<span class="line">    recycleType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;person&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">watchdog<span class="token punctuation">:</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">randomPeopleSummoner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> f <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> floorNum<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> people <span class="token operator">=</span> <span class="token function">genPeople</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></span>
<span class="line">    table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>ActionObjs<span class="token punctuation">,</span> people<span class="token punctuation">)</span></span>
<span class="line">    summonCount <span class="token operator">=</span> summonCount <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> elevator<span class="token punctuation">.</span>status <span class="token operator">~=</span> <span class="token string">&#39;busy&#39;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token function">elevatorNextFloor</span><span class="token punctuation">(</span>elevator<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> summonCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">        coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>seed<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> randomPeopleSummoner<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token function">randomPeopleSummoner</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21))])}const m=o(k,[["render",r],["__file","build-an-elevator.html.vue"]]),b=JSON.parse('{"path":"/notes/gallery/build-an-elevator.html","title":"构建电梯仿真模型","lang":"zh-CN","frontmatter":{"description":"构建电梯仿真模型 build a clock thumbnail 目标 本文的目标是利用仿真框架创建一个电梯情景的仿真模型。主要内容包括队列的创建、人物的创建、电梯的创建、仿真逻辑的实现。 创建 Queue 当等待电梯的人比较多时，需要排队。所以这里我们首先需要创建队列。这里创建一个队列类，方便后续复用。队列类实现了队列的基本功能，包括进入（add）、...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/notes/gallery/build-an-elevator.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"构建电梯仿真模型"}],["meta",{"property":"og:description","content":"构建电梯仿真模型 build a clock thumbnail 目标 本文的目标是利用仿真框架创建一个电梯情景的仿真模型。主要内容包括队列的创建、人物的创建、电梯的创建、仿真逻辑的实现。 创建 Queue 当等待电梯的人比较多时，需要排队。所以这里我们首先需要创建队列。这里创建一个队列类，方便后续复用。队列类实现了队列的基本功能，包括进入（add）、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-05T03:44:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-05T03:44:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建电梯仿真模型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-05T03:44:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"创建 Queue","slug":"创建-queue","link":"#创建-queue","children":[]},{"level":2,"title":"创建 Person","slug":"创建-person","link":"#创建-person","children":[]},{"level":2,"title":"创建 Elevator","slug":"创建-elevator","link":"#创建-elevator","children":[]},{"level":2,"title":"仿真逻辑","slug":"仿真逻辑","link":"#仿真逻辑","children":[{"level":3,"title":"环境创建","slug":"环境创建","link":"#环境创建","children":[]},{"level":3,"title":"人物创建流程","slug":"人物创建流程","link":"#人物创建流程","children":[]},{"level":3,"title":"电梯运行逻辑","slug":"电梯运行逻辑","link":"#电梯运行逻辑","children":[]},{"level":3,"title":"人物生成流程","slug":"人物生成流程","link":"#人物生成流程","children":[]}]},{"level":2,"title":"仿真控制","slug":"仿真控制","link":"#仿真控制","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"完整代码","slug":"完整代码","link":"#完整代码","children":[]}],"git":{"updatedTime":1733370264000,"contributors":[{"name":"huuhghhgyg","username":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":3,"url":"https://github.com/huuhghhgyg"}],"changelog":[{"hash":"724e6c08e95bccf87c93159ebf163f36b144c069","date":1733370264000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[fix] 修改预览网址，修复国内无法显示的问题"},{"hash":"179c2adb5b51dbbb53b59918c4f2edbe04ecdbf7","date":1723520447000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[chore] 电梯示例添加完整代码"},{"hash":"8f4df3b1f567d53e427ecbc5dabcc925b50a5c3c","date":1721234654000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[feat] gallery/build-an-elevator"}]},"filePathRelative":"notes/gallery/build-an-elevator.md","autoDesc":true,"excerpt":"\\n<p></p>\\n<h2>目标</h2>\\n<p>本文的目标是利用<a href=\\"https://github.com/huuhghhgyg/Container-Terminal-Simulation\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">仿真框架</a>创建一个电梯情景的仿真模型。主要内容包括<a href=\\"#%E5%88%9B%E5%BB%BA-queue\\">队列的创建</a>、<a href=\\"#%E5%88%9B%E5%BB%BA-elevator\\">人物的创建</a>、<a href=\\"#%E5%88%9B%E5%BB%BA-elevator\\">电梯的创建</a>、<a href=\\"#%E4%BB%BF%E7%9C%9F%E9%80%BB%E8%BE%91\\">仿真逻辑的实现</a>。</p>"}');export{m as comp,b as data};
