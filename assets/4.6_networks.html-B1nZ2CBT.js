import{_ as n}from"./icon_script_editor-S0ak5iz0.js";import{_ as a,o as s,c as e,e as t}from"./app-DFIg03Dy.js";const o={},i=t('<h1 id="_4-6-networks" tabindex="-1"><a class="header-anchor" href="#_4-6-networks"><span>4.6 Networks</span></a></h1><p>GIS vector data (<a href="3.2_vector_shapes">3.2</a>) in MicroCity can be topologized to <strong>Networks</strong> and applied the <strong>Shortest Path Algorithm</strong> and <strong>User Equilibrium Traffic Assignment Algorithm</strong>. Sample codes for this chapter can be found in the &quot;network_samples&quot; folder of the <strong>Project</strong> Tab in <img src="'+n+`" alt="icon"><strong>ScriptEditor</strong>.</p><h2 id="network-manipulation" tabindex="-1"><a class="header-anchor" href="#network-manipulation"><span>Network Manipulation</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Creates an empty network and returns the object.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span>UnTopoLines<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Creates a network from an untopologized <em>&quot;line&quot; Shapes</em> and returns three objects: <em>Network</em>, <em>Nodes (Shapes)</em> and <em>Links (Shapes)</em>.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> Links<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Creates a <em>Network</em> object from topologized Nodes and Links <em>Shapes</em>. Returns the <em>Network</em> object.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">InitNetwork</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> Nodes<span class="token punctuation">,</span> Links<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Initiates a <em>Network</em> from a Nodes and a Links <em>Shapes</em>. Returns true if succeed.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">AddLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> oID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> dID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> impedance <span class="token punctuation">[</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> capacity <span class="token operator">=</span> <span class="token number">1E+38</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Adds a new link or update an existing link in the <em>Network</em>. Returns linkID, oID, dID, true/false for adding and true/false for updating.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">AddLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> Shapes<span class="token operator">|</span>Table<span class="token punctuation">,</span> index1 <span class="token punctuation">[</span><span class="token punctuation">,</span> index2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Adds or updates links from the recordset of a <em>Shapes</em> or <em>Table</em>. Returns boolean values.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">DelLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Deletes a link from a <em>Network</em>. Returns a boolean value.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetNearNodeID</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">[</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Gets the nearest <em>Network</em> nodes from a coordinate. Returns node ids.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetNodeXY</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> nodeID1 <span class="token punctuation">[</span><span class="token punctuation">,</span> nodeID2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the coordinates of nodes in a <em>Network</em>: x1, y1, x2, y2, ... .</p><h2 id="algorithms" tabindex="-1"><a class="header-anchor" href="#algorithms"><span>Algorithms</span></a></h2><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GenSTPTree</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID <span class="token punctuation">[</span><span class="token punctuation">,</span> endID<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Generates a <em>Shortest Path Spanning Tree</em> from a node. Returns a boolean value.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;NodeID&quot;</span><span class="token operator">|</span><span class="token string">&quot;LinkID&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After calling <em>GenSTPTree</em> calls this function. Returns a <em>Shortest Path</em> indicated by a node or link id sequence: id1, id2 ,... .</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iNodeShp&quot;</span><span class="token operator">|</span><span class="token string">&quot;iLinkShp&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After calling GenSTPTree calls this function. Returns a <em>Shortest Path</em> indicated by a node or link <em>Shapes</em> index sequence.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;NodeShp&quot;</span><span class="token operator">|</span><span class="token string">&quot;LinkShp&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After calling GenSTPTree calls this function. Returns a <em>Shortest Path</em> indicated by a node or link <em>Shape</em> object sequence.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After calling GenSTPTree call this function. Returns a <em>Shortest Path Distance</em> to a end node.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID<span class="token punctuation">,</span> endID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Gets a <em>Shortest Path</em> from a start node to an end node in a <em>Network</em>. Returns the distance.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Gets a <em>Shortest Path</em> from a start coordinate to an end coordinate in a <em>Network</em>. Returns the distance.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetTrip</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> oID<span class="token punctuation">,</span> dID<span class="token punctuation">,</span> amount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Sets an amount of a trip from an origin to an destination.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SolveUE</span> <span class="token punctuation">(</span>Network <span class="token punctuation">[</span><span class="token punctuation">,</span> rootTol <span class="token operator">=</span> <span class="token number">1E-2</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> equlBrm <span class="token operator">=</span> <span class="token number">1E-5</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> maxIter <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>After calling SetTrip call this function. Performs the <em>User Equilibium Traffic Assignment</em> and returns a boolean value.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetFlow</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Returns the traffic flow of a specified link.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetFlow</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">,</span> flow<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Set the traffic flow of a specified link and return a boolean value.</p>`,44),l=[i];function p(c,r){return s(),e("div",null,l)}const m=a(o,[["render",p],["__file","4.6_networks.html.vue"]]),k=JSON.parse('{"path":"/en/docs/4.6_networks.html","title":"4.6 Networks","lang":"en-US","frontmatter":{"prev":"./4.5_3d_scenes.md","next":"./4.7_des_simulations.md","description":"4.6 Networks GIS vector data (3.2) in MicroCity can be topologized to Networks and applied the Shortest Path Algorithm and User Equilibrium Traffic Assignment Algorithm. Sample ...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/en/docs/4.6_networks.html"}],["meta",{"property":"og:site_name","content":"MicroCity Notes"}],["meta",{"property":"og:title","content":"4.6 Networks"}],["meta",{"property":"og:description","content":"4.6 Networks GIS vector data (3.2) in MicroCity can be topologized to Networks and applied the Shortest Path Algorithm and User Equilibrium Traffic Assignment Algorithm. Sample ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T03:41:16.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T03:41:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.6 Networks\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T03:41:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Network Manipulation","slug":"network-manipulation","link":"#network-manipulation","children":[]},{"level":2,"title":"Algorithms","slug":"algorithms","link":"#algorithms","children":[]}],"git":{"updatedTime":1700883676000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":1}]},"filePathRelative":"en/docs/4.6_networks.md","autoDesc":true,"excerpt":"\\n<p>GIS vector data (<a href=\\"3.2_vector_shapes\\">3.2</a>) in MicroCity can be topologized to <strong>Networks</strong> and applied the <strong>Shortest Path Algorithm</strong> and <strong>User Equilibrium Traffic Assignment Algorithm</strong>. Sample codes for this chapter can be found in the \\"network_samples\\" folder of the <strong>Project</strong> Tab in <strong>ScriptEditor</strong>.</p>"}');export{m as comp,k as data};
