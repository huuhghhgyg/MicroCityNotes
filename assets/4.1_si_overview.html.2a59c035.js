import{_ as r}from"./icon_script_editor.6508d134.js";import{_ as c}from"./icon_microcity.4fee059d.js";import{_ as l,r as s,o as u,c as m,a as t,b as e,d as n,w as i,e as d}from"./app.667508d7.js";const h="/microcitynotes/assets/script_editor.7fa005ad.png",p={},_=t("h1",{id:"_4-1-脚本概览",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_4-1-脚本概览","aria-hidden":"true"},"#"),e(" 4.1 脚本概览")],-1),g=t("strong",null,"Modules",-1),b=t("strong",null,"MicroCity Script",-1),f=t("img",{src:r,alt:"icon"},null,-1),w=t("strong",null,"ScriptEditor",-1),k=d('<h2 id="the-script-editor" tabindex="-1"><a class="header-anchor" href="#the-script-editor" aria-hidden="true">#</a> The Script Editor</h2><p><img src="'+h+'" alt="scritp_editor"></p><h2 id="coding-and-debugging-microcity-scripts" tabindex="-1"><a class="header-anchor" href="#coding-and-debugging-microcity-scripts" aria-hidden="true">#</a> Coding and Debugging MicroCity Scripts</h2>',3),y=t("strong",null,"ScriptEditor",-1),x={href:"https://studio.zerobrane.com/",target:"_blank",rel:"noopener noreferrer"},v=t("img",{src:r,alt:"icon"},null,-1),T=t("strong",null,"Script Editor",-1),S=t("strong",null,"module",-1),C=t("img",{src:c,alt:"icon"},null,-1),M=t("strong",null,"MicroCity",-1),q=t("strong",null,"Debug",-1),E=t("strong",null,"Code View",-1),N=t("strong",null,"ScriptEditor",-1),L=t("strong",null,"Debug Buttons",-1),j=t("h2",{id:"the-lua-language-and-embedded-functions",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#the-lua-language-and-embedded-functions","aria-hidden":"true"},"#"),e(" The Lua Language and Embedded Functions")],-1),V={href:"https://www.lua.org/manual/5.1/",target:"_blank",rel:"noopener noreferrer"},B=d(`<p><strong>Conventions in this reference:</strong><br> There are four major data types in Lua can be passed though embedded functions as parameters, namely <em>Number, Boolean, String and Object</em>. The type <em>Object</em> includes builtin Lua objects, such as <em>Table, Function adn Thread...</em>, as well as MicroCity objects, such as <em>Shapes, Grid, Table and Scene...</em>. To clarify the parameter type in embedded functions, we use capitalization, quotation mark and semantic information to avoid ambiguities in function descriptions. A lowercase word of a paramter means a <em>Number</em>. Sometimes, to present an integer parameter, a letter &#39;i&#39; followed by a word is used, like <em>iField</em>. Starting with the letter &#39;b&#39; and followed by a word means a <em>Boolean</em>, like <em>bShow</em>. A quoted word means a <em>String</em>. A capitalized word means an <em>Object</em> or a keyword. Following is an example of a embedded function description.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">AddParameter</span> <span class="token punctuation">(</span>Module<span class="token punctuation">,</span> ParentNode<span class="token punctuation">,</span> <span class="token string">&quot;Value&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;id&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> default <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>In this case, the <em>Module</em> parameter should be a <em>Module</em> object. The <em>ParentNode</em> parameter should be a <em>Node</em> object, but it act as a parent <em>Node</em>. The <em>&quot;Value&quot;</em> parameter is a string, but it represent the builtin type <em>Value</em> in MicroCity, so this string can not be changed. The <em>&quot;id&quot;</em> parameter should be a user specified string. The <em>default</em> parameter is a number. The contents in a pair of &#39;[&#39; and &#39;]&#39; are optional. The character &#39;|&#39; among parameters means &quot;or&quot;.</p><p><strong>Encoding formats:</strong><br> MicroCity uses ANSI encoding format to read and write data, such as shp, txt, csv and dbf. ScriptEditor and the embedded funtions use UTF-8 encoding format to read and write data, such as txt or csv.</p>`,4);function F(O,A){const a=s("RouterLink"),o=s("ExternalLinkIcon");return u(),m("div",null,[_,t("p",null,[e("MicroCity uses "),g,e(" (see "),n(a,{to:"/docs/3.7_modules.html"},{default:i(()=>[e("3.7")]),_:1}),e(") to extend its functionalities. One type of the modules is "),b,e(" (*.mcs) which can be edited and debugged in the "),f,w,e(".")]),k,t("p",null,[y,e(" is based on "),t("a",x,[e("ZeroBrane"),n(o)]),e(". One can find detailed information there. For debugging, you should keep "),v,T,e(" being opened. Then right click the "),S,e(" from "),C,M,e(" and choose "),q,e(" item in the context menu (see "),n(a,{to:"/docs/3.7_modules.html#loading-closing-and-executing-modules"},{default:i(()=>[e("3.7")]),_:1}),e("). The execution can be indicated in the "),E,e(" of "),N,e(". You can control the execution and watch variables with "),L,e(".")]),j,t("p",null,[e("MicroCity uses "),t("a",V,[e("Lua 5.1"),n(o)]),e(" as its script language. One can find the reference manual there. MicroCity embeds many useful funtions in Lua, which can not only control user interfaces, manipulate data, but also can solve mathematical models and sun simulations. You should read following chapters for more information.")]),B])}const P=l(p,[["render",F],["__file","4.1_si_overview.html.vue"]]);export{P as default};
