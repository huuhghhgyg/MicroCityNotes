import{_ as o,r as c,o as i,c as u,a as s,b as n,d as t,w as e,f as p}from"./app.41141cbb.js";const l="/MicroCityNotes/assets/two_way.db10fb1f.svg",d={},k=p('<h1 id="操作网络" tabindex="-1"><a class="header-anchor" href="#操作网络" aria-hidden="true">#</a> 操作网络</h1><h2 id="网络拓补化" tabindex="-1"><a class="header-anchor" href="#网络拓补化" aria-hidden="true">#</a> 网络拓补化</h2><p>说人话就是，一个网络有节点，有节点之间的连线。如果把连线理解为道路，那么你需要解决以下问题：</p><ol><li>这条路是单向通行的还是双向通行？</li><li>这条路的起点是哪？终点是哪？</li></ol><p>一般认为一个网络图中，每条道路都是单向的。如果需要一条双向通行的道路，只需要反向添加一条道路即可。像这样： <img src="'+l+'" alt="双向通行"> 这样，每条路就有了通行方向。一般规定出发点的符号为O，目的点的符号为D，这样，使用O和D就能清晰地描述每条路的方向。</p><p>对于上图的示例，上方的道路O=1，D=2，所以方向描述为从1到2；下方的道路O=2，D=1，方向描述为从2到1。</p><h2 id="使用函数对网络进行拓补" tabindex="-1"><a class="header-anchor" href="#使用函数对网络进行拓补" aria-hidden="true">#</a> 使用函数对网络进行拓补</h2>',7),r=p(`<p>此处简单列举几种创建MicroCity中网络对象的方法：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> network <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个空网络对象并返回此对象。<code>network</code>就是返回得到的空网络对象。</p><p>创建对象后，可以使用<code>AddLink</code>和<code>DelLink</code>等函数在网络对象中创建连接。具体用法见参考文档。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> network<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> links <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span>Lines<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处的<code>Lines</code>为一个矢量图形对象，类型为<code>Line</code>。MicroCity中的<code>CreateNetwork()</code>函数在这种用法中可以直接帮你在道路连线上添加起点和终点，并自动在返回的<code>links</code>对象中标上O点和D点的编号。</p><p>也就是说，你只需要提供网络连线即可，剩下的拓补化工作可以由函数自动完成。我认为这可能是最常用的创建网络图并进行拓补化的方法。</p><h2 id="网络拓补的简单示例" tabindex="-1"><a class="header-anchor" href="#网络拓补的简单示例" aria-hidden="true">#</a> 网络拓补的简单示例</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 打开连线图层</span>
Shapes <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;Shapes.shp&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 拓补化网络</span>
network<span class="token punctuation">,</span> network_nodes<span class="token punctuation">,</span> network_links <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">)</span>

<span class="token comment">-- 创建图层，用于存放拓补后的网络节点</span>
Nodes <span class="token operator">=</span> <span class="token function">CreateShapes</span><span class="token punctuation">(</span><span class="token string">&quot;Nodes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 将拓补化网络得到的网络节点复制到图层中</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>network_nodes<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>network_nodes<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 创建图层，用于存放拓补后的网络连线</span>
Links <span class="token operator">=</span> <span class="token function">CreateShapes</span><span class="token punctuation">(</span><span class="token string">&quot;Links&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;line&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 将网络连线中原有的属性字段复制到图层中</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetFieldCount</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token function">GetField</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">-- 为连线添加属性字段，稍后会通过函数将对应的数据添加到其中</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;IMPEDANCE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--阻抗</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;DIRECTION&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> <span class="token comment">--方向</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;CAPACITY&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--容量</span>
<span class="token comment">-- 将拓补化网络得到的网络线路复制到图层中（包括对应数据）</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>network_links<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>network_links<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 更新图层</span>
<span class="token function">Update</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">)</span>
<span class="token function">Update</span><span class="token punctuation">(</span>Links<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>示例改自MicroCity自带的编辑器</p></blockquote><p>虽然一开始就输入了网络连线，但是在拓补化的过程中可能由于连线上的节点重合，在拓补化的过程中会把连续的连线拆成多段，因此得到的<code>Links</code>图层可能与输入的图层存在不同。而拓补化得到的节点<code>Nodes</code>和得到的连线<code>Links</code>是对应的，因此推荐使用拓补化处理完的Links图层作为网络节点之间的连线。</p><h3 id="copyshapeto函数" tabindex="-1"><a class="header-anchor" href="#copyshapeto函数" aria-hidden="true">#</a> CopyShapeTo函数</h3><p>拓补的操作中使用了<code>CopyShapeTo()</code>函数，其作用是将一个<code>Shape</code>对象复制到<code>Shapes</code>图层中的对应位置，并根据输入的<code>dx</code>和<code>dy</code>在<code>Shapes</code>图层中进行位置变换。其中，<code>dx</code>和<code>dy</code>分别为在<code>x</code>和<code>y</code>方向上的位移量（理解为deltax和deltay）。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>TargetShapes<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> Shape1 <span class="token punctuation">[</span><span class="token punctuation">,</span> Shape2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据函数的用法可以看到，还支持复制到多个图层上的对应位置后再进行变换。 如果只想将图形复制到对应图层的对应位置，而不进行变换，可以将<code>dx</code>和<code>dy</code>设为<code>0</code>，像这样：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>TargetShapes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Shape1 <span class="token punctuation">[</span><span class="token punctuation">,</span> Shape2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),v=s("code",null,"CopyShapeTo()",-1);function m(h,b){const a=c("RouterLink");return i(),u("div",null,[k,s("p",null,[n("MicroCity可以处理网络，所有函数的具体用法见参考文档："),t(a,{to:"/docs/4.6_networks.html"},{default:e(()=>[n("4.6 网络")]),_:1})]),r,s("p",null,[v,n("函数的具体用法见"),t(a,{to:"/docs/4.3_shapes_and_tables.html"},{default:e(()=>[n("4.3 矢量图形和表格")]),_:1})])])}const g=o(d,[["render",m],["__file","network.html.vue"]]);export{g as default};
