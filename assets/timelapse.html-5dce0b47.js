import{_ as l,N as p,p as i,q as d,O as a,S as s,W as t,t as n,a4 as o}from"./framework-ce30d885.js";const r="/MicroCityNotes/assets/fixed_increment_advance-bba0f944.png",u={},k=o('<h1 id="时间推进法" tabindex="-1"><a class="header-anchor" href="#时间推进法" aria-hidden="true">#</a> 时间推进法</h1><p>仿真中的时间推进法是指在仿真过程中，如何推进仿真时间。</p><h2 id="时间推进法的分类" tabindex="-1"><a class="header-anchor" href="#时间推进法的分类" aria-hidden="true">#</a> 时间推进法的分类</h2><p>常见的仿真时间推进方法有三大类：</p><ul><li>事件调度法：事件调度法是一种基于事件的仿真方法，它通过对仿真系统中各个事件进行排序，按照事件发生的先后顺序来进行仿真。</li><li>固定增量推进法：固定增量推进法是指在仿真过程中，固定一个时间增量，在设定起始时间后，在起始时间的基础上根据时间的增量来对时间进行推进模拟。</li><li>主导时钟推进法：主导时钟推进法是指在仿真过程中，由一个主导时钟控制整个仿真系统的运行，它通过控制时钟来控制仿真过程。</li></ul><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><h3 id="事件调度法" tabindex="-1"><a class="header-anchor" href="#事件调度法" aria-hidden="true">#</a> 事件调度法</h3><p>事件调度法是一种基于事件的仿真方法，它通过对仿真系统中各个事件进行排序，按照事件发生的先后顺序来进行仿真。在仿真过程中，仿真系统会根据当前仿真时间和各个事件发生的时间来确定下一个要发生的事件，并将仿真时间推进到该事件发生的时间。</p><p>也就是说，事件调度法主要分为以下3个主要步骤，这3个步骤也是控制事件调度法的主控程序的主要步骤：</p><ul><li>时间扫描：确定下—事件发生时间并将仿真时钟推进到该时刻</li><li>事件辨识：正确地辨识当前要发生的事件</li><li>事件执行：正确地执行当前发生的事件</li></ul><p>流程图如下：</p>',11),m=s("h4",{id:"自动化仓库仿真中使用的简单事件调度法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自动化仓库仿真中使用的简单事件调度法","aria-hidden":"true"},"#"),n(" 自动化仓库仿真中使用的简单事件调度法")],-1),v=s("ol",null,[s("li",null,"事先生成任务队列"),s("li",null,"依次执行任务队列中的任务（事件扫描+事件执行）")],-1),h=s("p",null,"由于这个仿真的目的是为了测试仓库的效率，因此在这个仿真中省去了任务相继到达的时间差。所以，每个任务执行完毕后立即执行下一个任务，不需要在任务结束后推进到下一个任务的开始时间（推进量为0）。因此，只需要计量每个任务花费的时间并叠加到总时长（Tick）中。",-1),b=s("p",null,"由于题目没有给出具体数据（如AGV移动速度等，因此相关指标都用单位1表示），因此最终只得到执行任务所需的单位时间。",-1),_=s("strong",null,"出库事件发生时，直接推进到装卸完毕的时间，进行货架归位操作。",-1),f=o('<h3 id="固定增量推进法" tabindex="-1"><a class="header-anchor" href="#固定增量推进法" aria-hidden="true">#</a> 固定增量推进法</h3><p>固定增量推进法是指在仿真过程中，固定一个时间增量，在设定起始时间后，在起始时间的基础上根据时间的增量来对时间进行推进模拟。在每个步长内，若无事件发生，则仿真钟再推进一个单位时间T；若在该步内有若干个事件发生，则认为这些事件均发生在该步的结束时刻。</p><div style="text-align:center;"><p><img src="'+r+`" alt="固定增量推进法"></p><p>例题</p></div><h4 id="代码流程示例" tabindex="-1"><a class="header-anchor" href="#代码流程示例" aria-hidden="true">#</a> 代码流程示例</h4><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">while</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    t <span class="token operator">=</span> t <span class="token operator">+</span> dt
    <span class="token keyword">if</span> t <span class="token operator">%</span> cycle <span class="token operator">~=</span> work_time <span class="token keyword">then</span>
        d <span class="token operator">=</span> d <span class="token operator">+</span> v <span class="token operator">*</span> dt
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;出发后&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&quot;小时&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;出发后&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&quot;小时,休息&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span>

    car<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span><span class="token function">CastToLine</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">--直线轨迹</span>

    os<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此为代码主要流程，无法直接使用</p></blockquote><h3 id="主导时钟推进法" tabindex="-1"><a class="header-anchor" href="#主导时钟推进法" aria-hidden="true">#</a> 主导时钟推进法</h3><p>主导时钟推进法是指在仿真过程中，由一个主导时钟控制整个仿真系统的运行，它通过控制时钟来控制仿真过程。主导时钟推进法可以分为两类：同步主导时钟和异步主导时钟。同步主导时钟是指所有模块都使用相同的主导时钟进行推进；异步主导时钟是指不同模块使用不同的主导时钟进行推进。</p>`,8),y=o(`<blockquote><p>实现了但是没有放出代码</p></blockquote><h4 id="自动化仓库仿真向主导时钟推进法的改变" tabindex="-1"><a class="header-anchor" href="#自动化仓库仿真向主导时钟推进法的改变" aria-hidden="true">#</a> 自动化仓库仿真向主导时钟推进法的改变</h4><p>具体来说，只在原来的基础上做了如下改动：</p><ul><li>删除大部分与事件调度法有关的 <code>os.sleep()</code>。 <blockquote><p>由于仿真流程比较简单，保留了与装卸货有关的事件调度法，优化资源占用。</p></blockquote></li><li>设置全局仿真时钟，将 <code>Agv:Move()</code> 函数的思路从“固定步长执行任务并刷新场景”的改为“监测仿真时钟时长变化，根据时长变化执行任务并刷新场景”</li><li>新增仿真速度调整。</li></ul><p>从以上的改动可以看出，仿真的核心从事件任务转向了仿真时钟。其中，场景刷新的部分使用了 <code>os.clock()</code> 实现。下面是一个有关于主导时钟推进法和 <code>os.clock()</code> 函数的简单的示例，修改自MicroCityWeb中内置的方块旋转案例。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> obj <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>

<span class="token comment">-- 初始位置</span>
<span class="token keyword">local</span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">local</span> y <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">local</span> z <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">local</span> rx<span class="token punctuation">,</span> ry <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span> <span class="token comment">-- x方向和y方向的旋转速度</span>
<span class="token keyword">local</span> simspeed <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">-- 仿真速度</span>

<span class="token keyword">local</span> t <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">-- 全局仿真时钟</span>
<span class="token keyword">local</span> t0 <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 记录仿真开始的时间</span>
<span class="token keyword">while</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token keyword">local</span> dt <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0 <span class="token comment">-- 计算自上次记录时间以来的时间差</span>
    t <span class="token operator">=</span> t <span class="token operator">+</span> dt <span class="token comment">-- 仿真时钟走过相应时间差长度的时间</span>
    
    <span class="token comment">-- 设置方块此刻的旋转位置</span>
	x <span class="token operator">=</span> x <span class="token operator">+</span> rx <span class="token operator">*</span> dt <span class="token operator">*</span> simspeed 
	y <span class="token operator">=</span> y <span class="token operator">+</span> ry <span class="token operator">*</span> dt <span class="token operator">*</span> simspeed 
	obj<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
	
    t0 <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 记录仿真时间</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关说明</p><ul><li>当仿真速度 <code>simspeed</code> 为1时，表示仿真时钟与真实世界时钟的速度相同。<code>simspeed</code> 可以视作加速倍率。</li><li><code>dt</code> 表示两次记录时间之间的时间差，仿真中的时间步进根据 <code>dt*simspeed</code> 计算得到。<div class="hint-container info"><p class="hint-container-title">相关信息</p><p>需要注意的是，时间增量 <code>dt</code> 的数值在每个循环周期一般都不相同，<code>dt</code> 的具体大小一般取决于电脑的运算能力</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>有时两次记录时间之间没有太多耗时的操作，计算得到的 <code>dt</code> 可能为0。一般两次时间记录之间存在一个 <code>scene.render()</code>，这样一般能够保证两次采样的时间之间能够计算得到一个不为0的时间差值。</p></div></li></ul>`,8);function w(x,g){const c=p("FlowChart"),e=p("RouterLink");return i(),d("div",null,[k,a(c,{id:"flowchart-61",code:"eJzLzMsssbUrLkksKrFSeNox9+ny7qc907iKkxPzbO3yC1KLEksy8/OsFJ7s6n6ye9uzztXP+vu5UitSk7HKLn+xsIcrszjV1i45Py8lEyL5tGPJs2lrn81Y/3TCsue7Jz+bO58LqCA1LwWob/f+53PmQwW5QG7RtQNZrWsHskLXDmgUyDiNvHxNiASYV5laDOSmcgEApctWxQ==",preset:"vue"}),m,s("p",null,[a(e,{to:"/notes/warehouse_simulation.html"},{default:t(()=>[n("自动化仓库仿真思路")]),_:1}),n("中使用的是简单的事件调度法，由于当时还没有完整了解事件调度法，因此可能不太成熟，但是也可以作为一种思路参考。主要流程如下:")]),v,h,b,s("p",null,[n("此外，在"),a(e,{to:"/notes/warehouse_simulation.html"},{default:t(()=>[n("自动化仓库仿真思路")]),_:1}),n("中提到的"),a(e,{to:"/notes/warehouse_simulation.html#%E6%94%B9%E8%BF%9B%E7%A9%BA%E9%97%B4"},{default:t(()=>[n("改进空间")]),_:1}),n("也还使用了一部分的事件调度法。在改进的部分中，设定了从货架上装卸货物的时间，而这个时间一般不需要在仿真的过程中体现，且整个仿真中只有一个AGV在对货架进行操作，因此在"),_]),f,s("p",null,[a(e,{to:"/notes/warehouse_simulation.html"},{default:t(()=>[n("自动化仓库仿真思路")]),_:1}),n("的最后一部分提到了"),a(e,{to:"/notes/warehouse_simulation.html#%E6%94%B9%E8%BF%9B%E7%A9%BA%E9%97%B4"},{default:t(()=>[n("改进空间")]),_:1}),n("，最终实现了同步主导时钟的主导时钟推进法。")]),y])}const B=l(u,[["render",w],["__file","timelapse.html.vue"]]);export{B as default};
