import{_ as a}from"./icon_script_editor-S0ak5iz0.js";import{_ as s,o as n,c as e,e as t}from"./app-Di-TeKy7.js";const p={},l=t('<h1 id="_4-8-混合整数线性规划" tabindex="-1"><a class="header-anchor" href="#_4-8-混合整数线性规划"><span>4.8 混合整数线性规划</span></a></h1><p>MicroCity使用<a href="https://sourceforge.net/projects/lpsolve/" target="_blank" rel="noopener noreferrer"><em>lpsolve</em></a>来解决混合整数线性规划问题。开发人员可以使用嵌入的Lua函数来构建和求解模型。本章的示例代码可以在<strong>项目</strong>选项卡中的&quot;optimization_samples&quot;文件夹中找到，图标为<img src="'+a+`" alt="图标"><strong>ScriptEditor</strong>.</p><h2 id="模型创建和执行" tabindex="-1"><a class="header-anchor" href="#模型创建和执行"><span>模型创建和执行</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateLP</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>rows <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>创建一个混合整数线性规划模型并返回<strong>LPModel</strong>对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetObjFunction</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;MAX&quot;</span><span class="token operator">|</span><span class="token string">&quot;MIN&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用存储决策变量系数的<em>Lua Table</em>设置<em>LPModel</em>的目标函数。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">AddConstraint</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;&lt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;&gt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> rhsValue<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>使用存储决策变量系数的<em>Lua Table</em>向<em>LPModel</em>添加约束。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetInteger</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>将由索引<em>index</em>指定的决策变量设置为整数变量。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetBinary</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>将由索引<em>index</em>指定的<em>LPModel</em>的决策变量设置为二进制变量。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetUnbounded</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>将由索引<em>index</em>指定的<em>LPModel</em>的决策变量设置为无界（正/负无穷大）。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SolveLP</span> <span class="token punctuation">(</span>LPModel <span class="token punctuation">[</span><span class="token punctuation">,</span> timeoutSec <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>求解<em>LPModel</em>并返回0表示成功，-1表示无效LP模型，-2表示内存不足，1表示次优，2表示不可行，3表示无界，4表示退化，5表示遇到数值错误，6表示用户中止，7表示超时错误，9表示模型可由预处理解决，10表示B&amp;B例程失败，11表示B&amp;B因中断而停止，12表示找到可行的B&amp;B解决方案，13表示没有可行的B&amp;B解决方案。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetObjective</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>LPModel</em>的目标函数值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetVariable</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回由索引<em>index</em>指定的决策变量的值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetVariables</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>LPModel</em>的所有决策变量的值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetDual</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回由索引<em>index</em>指定的决策变量的对偶值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetDuals</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回<em>LPModel</em>的所有决策变量的对偶值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">ReadLP</span><span class="token punctuation">(</span><span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从文件(*.lp, *.mps)中读取<em>LPModel</em>，并在成功时返回<em>LPModel</em>。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">WriteLP</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> <span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>将<em>LPModel</em>写入文件(*.lp, *.mps)，并在成功时返回true。</p><blockquote><p>这篇文章使用ChatGPT翻译自其他语言，如果有问题请在<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>页面提交反馈。</p></blockquote>`,32),o=[l];function c(i,u){return n(),e("div",null,o)}const g=s(p,[["render",c],["__file","4.8_mixed_integer_programming.html.vue"]]),m=JSON.parse('{"path":"/docs/desktop/4.8_mixed_integer_programming.html","title":"4.8 混合整数线性规划","lang":"zh-CN","frontmatter":{"prev":"./4.7_des_simulations.md","description":"4.8 混合整数线性规划 MicroCity使用lpsolve来解决混合整数线性规划问题。开发人员可以使用嵌入的Lua函数来构建和求解模型。本章的示例代码可以在项目选项卡中的\\"optimization_samples\\"文件夹中找到，图标为图标ScriptEditor. 模型创建和执行 创建一个混合整数线性规划模型并返回LPModel对象。 使用存储决策...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/desktop/4.8_mixed_integer_programming.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.8 混合整数线性规划"}],["meta",{"property":"og:description","content":"4.8 混合整数线性规划 MicroCity使用lpsolve来解决混合整数线性规划问题。开发人员可以使用嵌入的Lua函数来构建和求解模型。本章的示例代码可以在项目选项卡中的\\"optimization_samples\\"文件夹中找到，图标为图标ScriptEditor. 模型创建和执行 创建一个混合整数线性规划模型并返回LPModel对象。 使用存储决策..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T05:56:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T05:56:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.8 混合整数线性规划\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T05:56:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"模型创建和执行","slug":"模型创建和执行","link":"#模型创建和执行","children":[]}],"git":{"updatedTime":1710827784000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":2}]},"filePathRelative":"docs/desktop/4.8_mixed_integer_programming.md","autoDesc":true,"excerpt":"\\n<p>MicroCity使用<a href=\\"https://sourceforge.net/projects/lpsolve/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><em>lpsolve</em></a>来解决混合整数线性规划问题。开发人员可以使用嵌入的Lua函数来构建和求解模型。本章的示例代码可以在<strong>项目</strong>选项卡中的\\"optimization_samples\\"文件夹中找到，图标为<strong>ScriptEditor</strong>.</p>\\n<h2>模型创建和执行</h2>\\n<div class=\\"language-lua\\" data-highlighter=\\"prismjs\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre class=\\"language-lua\\"><code><span class=\\"line\\"><span class=\\"token function\\">CreateLP</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>rows <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span> <span class=\\"token punctuation\\">,</span> columns <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{g as comp,m as data};
