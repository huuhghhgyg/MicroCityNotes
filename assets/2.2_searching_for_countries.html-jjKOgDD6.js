import{_ as p,a as c}from"./query_results-qHjDevxa.js";import{_ as l}from"./icon_script_editor-ibm_2NsU.js";import{_ as r,r as a,o as i,c as u,a as n,b as s,d as t,w as k,e as d}from"./app-74QKXaVC.js";const m={},_=n("h1",{id:"_2-2-寻找国家",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-寻找国家"},[n("span",null,"2.2 寻找国家")])],-1),h=n("p",null,"本教程将指导您使用 MicroCity Script 对GIS数据进行编码操作。您需要完成 2.1 内容以继续。",-1),g=n("h2",{id:"gis-数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gis-数据结构"},[n("span",null,"GIS 数据结构")])],-1),v=n("strong",null,"形状",-1),y=n("strong",null,"形状",-1),b=n("strong",null,"部分",-1),f=n("strong",null,"部分",-1),w=n("strong",null,"点",-1),C=n("strong",null,"形状",-1),x=n("strong",null,"属性表",-1),q=d('<p><img src="'+p+'" alt="gis_data_structure"></p><p>如果您想要执行复杂的编辑或处理一批形状，可以使用 MicroCity Script，其中包含许多内置函数可供使用。</p><h2 id="进行查询" tabindex="-1"><a class="header-anchor" href="#进行查询"><span>进行查询</span></a></h2><p>假设我们想要找出人口超过1亿且完全位于北半球的国家。因此，我们需要检查每个形状中每个点的坐标以及形状的人口属性。打开 <strong>ScriptEditor</strong> <img src="'+l+`" alt="icon_script_editor">，然后输入以下代码：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">local</span> Countries <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;countries.shp&quot;</span><span class="token punctuation">)</span>                 <span class="token comment">--尝试打开形状图层</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>Countries<span class="token punctuation">)</span> <span class="token keyword">do</span>                    <span class="token comment">--循环遍历图层中的所有形状对象</span>
    <span class="token keyword">local</span> country <span class="token operator">=</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>Countries<span class="token punctuation">,</span> i<span class="token punctuation">)</span>              <span class="token comment">--获取一个国家的形状对象</span>
    <span class="token keyword">local</span> north <span class="token operator">=</span> <span class="token keyword">true</span>                                  <span class="token comment">--假设该国家位于北半球</span>
    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPartCount</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span> <span class="token keyword">do</span>                 <span class="token comment">--循环遍历所有形状中的部分</span>
        <span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPointCount</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">do</span>         <span class="token comment">--循环遍历该部分中的所有点</span>
            <span class="token keyword">local</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">GetPointXY</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      <span class="token comment">--获取点的坐标</span>
            <span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>                               <span class="token comment">--如果纬度小于0</span>
                north <span class="token operator">=</span> <span class="token keyword">false</span>                           <span class="token comment">--北半球的假设为假</span>
            <span class="token keyword">end</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    <span class="token keyword">local</span> pop <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;POP_EST&quot;</span><span class="token punctuation">)</span>            <span class="token comment">--获取人口属性</span>
    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span>              <span class="token comment">--获取国家名称</span>
    <span class="token keyword">if</span> pop <span class="token operator">&gt;</span> <span class="token number">100000000</span> <span class="token keyword">and</span> north  <span class="token keyword">then</span>                  <span class="token comment">--检查两个条件</span>
        <span class="token function">Print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> pop<span class="token operator">/</span><span class="token number">100000000</span><span class="token punctuation">)</span>                <span class="token comment">--打印结果</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行脚本" tabindex="-1"><a class="header-anchor" href="#运行脚本"><span>运行脚本</span></a></h2><p>将脚本保存为 query.mcs，并使用 MicroCity 打开它，或将其拖到 MicroCity。然后您将在 Workspace 面板的<strong>模块选项卡</strong>中找到一个名为<strong>query</strong>的项目。双击子项<strong>main</strong>。如果弹出对话框，请选择<strong>01. countries</strong>，然后点击<strong>确定</strong>。结果将显示在<strong>消息</strong>面板中。</p><p><img src="`+c+'" alt="query_results"></p>',8),G={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"反馈",-1);function M(P,E){const o=a("RouterLink"),e=a("ExternalLinkIcon");return i(),u("div",null,[_,h,g,n("p",null,[s("在 MicroCity 中，GIS 数据由三种类型的"),v,s("组成：点、折线和多边形，每种类型都可以视为地图图层。在图层中，"),y,s("对象由一个或多个"),b,s("组成，而每个"),f,s("又由一个或多个"),w,s("组成。"),C,s("对象还与"),x,s("中的记录相关联。您还可以编辑形状或其属性（请参阅 "),t(o,{to:"/docs/desktop/3.2_vector_shapes.html"},{default:k(()=>[s("3.2")]),_:1}),s("）。")]),q,n("blockquote",null,[n("p",null,[s("这篇文章使用ChatGPT翻译自其他语言，如果有问题请在"),n("a",G,[S,t(e)]),s("页面提交反馈。")])])])}const L=r(m,[["render",M],["__file","2.2_searching_for_countries.html.vue"]]);export{L as default};
