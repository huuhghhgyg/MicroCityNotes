import{_ as n,o as s,c as a,f as e}from"./app.b7f26e6b.js";const p={},o=e(`<h1 id="lua语言快速上手" tabindex="-1"><a class="header-anchor" href="#lua语言快速上手" aria-hidden="true">#</a> LUA语言快速上手</h1><p>由于MicroCity采用的脚本语言是LUA，因此在开始使用MicroCity编写脚本之前需要先熟悉LUA的基本用法。</p><h2 id="变量和函数定义" tabindex="-1"><a class="header-anchor" href="#变量和函数定义" aria-hidden="true">#</a> 变量和函数定义</h2><p>lua会自动识别变量类型，因此无需在变量名称前定义变量类型，直接赋值即可。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>a <span class="token operator">=</span> <span class="token number">1.5</span>
b <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span>
c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- c为集合，见下文介绍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数的定义</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上方简单定义了一个<code>add()</code>函数，目的是把输入的两个变量相加返回结果。</p><p>变量分为全局变量和局部变量，函数也是如此。局部变量和函数的定义如下。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 定义局部函数</span>
<span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 定义局部变量</span>
<span class="token keyword">local</span> a <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果局部定义的内容（函数或变量）和全局定义的内容有冲突，以局部的内容优先。存在这种冲突时，你操作的内容是局部的内容。</p><p>如果没有明确需要操作全局变量，建议尽量将变量定义为局部变量。这种做法可能会减少bug的出现，也是更加安全的做法。</p><h2 id="条件" tabindex="-1"><a class="header-anchor" href="#条件" aria-hidden="true">#</a> 条件</h2><p>就是<code>if</code>，具体实现形式有如下几种：</p><ol><li>普通形式</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> condition <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;condition==true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>带<code>else</code>的形式</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> condition <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;condition==true&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;condition==false&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>以及使用<code>elseif</code>的形式</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">if</span> number <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;number&gt;0&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elseif</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;number&lt;0&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;number==0&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><p>记录一下最常用的两种循环: <code>for</code>&amp;<code>while</code></p><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3><p>最普通的形式</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 输出1到10共10个数</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">10</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你比较熟悉C语言或C类语言，以上代码对应的形式如下</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑步长</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 输出10到1共10个数，步长为-1</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>步长为负数时，需要注意开始和结束的数字也应该为倒序</p></blockquote><p>泛型循环 可以直接遍历一个集合中的所有元素。 <code>i</code>为集合元素的下标，从1开始；<code>v</code>为集合元素的值。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;index=&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">&quot;\\tvalue=&quot;</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>ipairs</code>适用于数组（<code>i</code>估计是<code>integer</code>的意思），<code>pairs</code>适用于对象，因为数组也是对象，所以<code>pairs</code>用于数组也没问题。</p></blockquote><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> while</h3><p>while的常用方法就一个</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> condition <span class="token operator">=</span> <span class="token keyword">true</span>
<span class="token keyword">while</span> condition <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;while==true&quot;</span><span class="token punctuation">)</span>
    condition <span class="token operator">=</span> <span class="token keyword">false</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和C类语言一样。只要<code>condition</code>为<code>true</code>的时候<code>while</code>就会一直执行。当<code>condition</code>被设置为<code>false</code>的时候，<code>while</code>就会结束运行。</p><h3 id="循环操作符" tabindex="-1"><a class="header-anchor" href="#循环操作符" aria-hidden="true">#</a> 循环操作符</h3><p>同其他语言的规定一样，<code>break</code>关键字用于跳出循环。 LUA中没有<code>continue</code>，只有<code>break</code>。但是可以可以通过使用<code>if</code>+<code>break</code>的形式实现<code>continue</code>的功能。</p><h2 id="lua的小特性-集合" tabindex="-1"><a class="header-anchor" href="#lua的小特性-集合" aria-hidden="true">#</a> Lua的小特性：集合</h2><p>虽然Lua里面把它自己的数组称作<code>table</code>，但是我认为这个数据结构更类似于Python的集合或者json，里面可以存储任何东西，不受结构约束。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>collection <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果需要查询数组的长度，只需要在数组名前面添加<code>#</code>即可得到</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">#</span>list <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua的数组（集合）下标从<code>1</code>开始，不同于C类语言的<code>0</code>。此处以前面定义的<code>collection</code>为例：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">print</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">--a</span>
<span class="token function">print</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">--abc</span>
<span class="token function">print</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">--3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),t=[o];function c(l,i){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","lua.html.vue"]]);export{d as default};
