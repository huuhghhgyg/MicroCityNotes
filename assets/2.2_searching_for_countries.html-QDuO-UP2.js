import{_ as t,a as e}from"./query_results-qHjDevxa.js";import{_ as o}from"./icon_script_editor-ibm_2NsU.js";import{_ as p,r as c,o as i,c as r,a as n,b as s,d as l,w as u,e as d}from"./app-Q07NRad_.js";const k={},h=n("h1",{id:"_2-2-searching-for-countries",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-searching-for-countries"},[n("span",null,"2.2 Searching for Countries")])],-1),m=n("p",null,"This tutorial will guide you in coding with MicroCity Script to manipulate GIS data. You have to complete 2.1 to proceed.",-1),y=n("h2",{id:"gis-data-structure",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gis-data-structure"},[n("span",null,"GIS Data Structure")])],-1),_=n("strong",null,"Shapes",-1),f=n("strong",null,"Shape",-1),g=n("strong",null,"Parts",-1),v=n("strong",null,"Part",-1),b=n("strong",null,"Points",-1),w=n("strong",null,"Shape",-1),S=n("strong",null,"Attributes Table",-1),C=n("img",{src:t,alt:"structure"},null,-1),G=d('<h2 id="making-a-query" tabindex="-1"><a class="header-anchor" href="#making-a-query"><span>Making a Query</span></a></h2><p>Suppose we want to find countries, each of which has a population of more than 100 million and is entirely in the northern hemisphere. So we need to check every point&#39;s coordinate in each shape and the population attribute of the shape. Open <strong>ScriptEditor</strong> <img src="'+o+`" alt="icon_script_editor"> and type following codes:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">local</span> Countries <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;countries.shp&quot;</span><span class="token punctuation">)</span>                 <span class="token comment">--Try to open the shapes layer</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>Countries<span class="token punctuation">)</span> <span class="token keyword">do</span>                    <span class="token comment">--Loop all the shape objects in the layer</span>
    <span class="token keyword">local</span> country <span class="token operator">=</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>Countries<span class="token punctuation">,</span> i<span class="token punctuation">)</span>              <span class="token comment">--Get the shape object of a country</span>
    <span class="token keyword">local</span> north <span class="token operator">=</span> <span class="token keyword">true</span>                                  <span class="token comment">--Assume the country is in the northern hemisphere</span>
    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPartCount</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span> <span class="token keyword">do</span>                 <span class="token comment">--Loop all of the parts in the shape</span>
        <span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPointCount</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">do</span>         <span class="token comment">--Loop all of the points in the shape part</span>
            <span class="token keyword">local</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">GetPointXY</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      <span class="token comment">--Get coordinate of the point j</span>
            <span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>                               <span class="token comment">--If the latitude is less than 0</span>
                north <span class="token operator">=</span> <span class="token keyword">false</span>                           <span class="token comment">--The north assumption is false</span>
            <span class="token keyword">end</span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    <span class="token keyword">local</span> pop <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;POP_EST&quot;</span><span class="token punctuation">)</span>            <span class="token comment">--Get the population property</span>
    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span>              <span class="token comment">--Get the country name</span>
    <span class="token keyword">if</span> pop <span class="token operator">&gt;</span> <span class="token number">100000000</span> <span class="token keyword">and</span> north  <span class="token keyword">then</span>                  <span class="token comment">--Check the two conditions</span>
        <span class="token function">Print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> pop<span class="token operator">/</span><span class="token number">100000000</span><span class="token punctuation">)</span>                <span class="token comment">--Print out the result</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="running-the-script" tabindex="-1"><a class="header-anchor" href="#running-the-script"><span>Running the Script</span></a></h2><p>Save the script to query.mcs and open it with MicroCity or drag it to MicroCity. Then you will find a <strong>query</strong> item appears in <strong>Modules Tab</strong> in Workspace panel. Double click the sub-item <strong>main</strong>. If a dialog pops up, select <strong>01. countries</strong> and click <strong>Okay</strong>. The results will be shown in <strong>Messages</strong> panel. <img src="`+e+'" alt="results"></p>',5);function P(q,x){const a=c("RouterLink");return i(),r("div",null,[h,m,y,n("p",null,[s("In MicroCity, GIS data consists of three types of "),_,s(": Point, Polyline and Polygon, each of which can be visualized as a Map Layer. In a layer, a "),f,s(" object consists of one or more "),g,s(", and every "),v,s(" consists of one or more "),b,s(". A "),w,s(" object is also associated to a record in the "),S,s(". You can also edit the shape or its attributes (see "),l(a,{to:"/en/docs/3.2_vector_shapes.html"},{default:u(()=>[s("3.2")]),_:1}),s("). "),C,s(" If you want perform a complex editing or handle a batch of shapes, you can use MicroCity Script, in which many built-in functions can be used.")]),G])}const I=p(k,[["render",P],["__file","2.2_searching_for_countries.html.vue"]]);export{I as default};
