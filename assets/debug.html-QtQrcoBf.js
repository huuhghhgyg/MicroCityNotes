import{_ as c,r as s,o as u,c as l,a as n,b as e,d as t,w as r,e as o}from"./app-WB5ROtMu.js";const d={},p=o(`<h1 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging"><span>Debugging</span></a></h1><p>This page introduces the functions and shortcuts related to debugging MicroCity Web.</p><h2 id="clear-output" tabindex="-1"><a class="header-anchor" href="#clear-output"><span>Clear Output</span></a></h2><p>You can enter commands by right-clicking the output area, and entering <code>print()</code> will clear the content of the output area.</p><h2 id="debugger-shortcuts" tabindex="-1"><a class="header-anchor" href="#debugger-shortcuts"><span>Debugger Shortcuts</span></a></h2><p>During the debugging process, especially at breakpoints, you can use F9 (Step Over), F10 (Step Into), and F11 (Step Out) to control the program execution.</p><ul><li><kbd>F9</kbd> <strong>Step Over</strong>: Skip the current line and execute the next line</li><li><kbd>F10</kbd> <strong>Step Into</strong>: Enter the current line; if the current line is a function call, enter the function body</li><li><kbd>F11</kbd> <strong>Step Out</strong>: Step out of the current function and execute the next line of the function call</li></ul><h2 id="debug-commands" tabindex="-1"><a class="header-anchor" href="#debug-commands"><span>Debug Commands</span></a></h2><h3 id="watch-variables" tabindex="-1"><a class="header-anchor" href="#watch-variables"><span>Watch Variables</span></a></h3><p>Use the <code>debug.watch()</code> command in the console to monitor variables.</p><p>For example, if you want to monitor the value of variable <code>a</code> during debugging, you can use the <code>debug.watch(&#39;a&#39;)</code> command.</p><blockquote><p>You can enter commands by right-clicking the output area</p></blockquote><h3 id="stack-tracing" tabindex="-1"><a class="header-anchor" href="#stack-tracing"><span>Stack Tracing</span></a></h3><p>Use the <code>debug.traceback()</code> function to print the current stack trace information.</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">-- Some code logic</span>
    <span class="token function">print</span><span class="token punctuation">(</span>debug<span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span><span class="token string">&quot;Stack trace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">-- Other code logic</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Stack trace
stack traceback:
[string &quot;function myFunction() ...&quot;]:3: in function &#39;myFunction&#39;
[string &quot;function myFunction() ...&quot;]:8: in function &#39;anotherFunction&#39;
[string &quot;function myFunction() ...&quot;]:11: in main chunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-state" tabindex="-1"><a class="header-anchor" href="#running-state"><span>Running State</span></a></h3>`,18),h=n("code",null,"debug.debug()",-1),g=n("li",null,[n("code",null,"debug.pause()"),e(" pauses the program. The top run button ▶️ will light up, and the pause button ⏸️ will go out.")],-1),b=n("h2",{id:"other-debugging-commands",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#other-debugging-commands"},[n("span",null,"Other Debugging Commands")])],-1),m=n("p",null,"Most of Lua's Debug functions are applicable to MicroCity Web. You can refer to:",-1),f={href:"https://www.lua.org/manual/5.4/manual.html#6.10",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.runoob.com/lua/lua-debug.html",target:"_blank",rel:"noopener noreferrer"},v=o('<h2 id="file-saving" tabindex="-1"><a class="header-anchor" href="#file-saving"><span>File Saving</span></a></h2><p>When saving files in MicroCity Web, you can choose to save them as <code>.mw</code> files and <code>.lua</code> files.</p><ul><li><code>.mw</code> file: Packages the entire project, including the currently open code files and files in the virtual disk.</li><li><code>.lua</code> file: Only saves the currently edited code file. It is commonly used for writing Lua scripts only and modifying custom <code>.lua</code> library files.</li></ul>',3),_={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"feedback",-1);function x(w,F){const i=s("RouterLink"),a=s("ExternalLinkIcon");return u(),l("div",null,[p,n("ul",null,[n("li",null,[h,e(" enters Debug mode. It is often used to enter Debug mode while the program is running. If you want to enter Debug mode at startup, you can right-click on the top ▶️ button. See "),t(i,{to:"/en/notes/web-ui.html#%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6"},{default:r(()=>[e("Introduction to the User Interface - Running State")]),_:1}),e(" for more details.")]),g]),b,m,n("ul",null,[n("li",null,[n("a",f,[e("The Debug Library | Lua 5.4 Reference Manual"),t(a)])]),n("li",null,[n("a",k,[e("Lua Debugging | Runoob Tutorial"),t(a)])])]),v,n("blockquote",null,[n("p",null,[e("This post is translated using ChatGPT, please "),n("a",_,[y,t(a)]),e(" if any omissions.")])])])}const q=c(d,[["render",x],["__file","debug.html.vue"]]);export{q as default};
