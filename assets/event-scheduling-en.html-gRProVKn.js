import{_ as e}from"./CommandBar-jgj8yIQP.js";import{_ as t,r as o,o as c,c as p,d as i,w as u,e as s,a as n}from"./app-DaLjD81q.js";const l={},r=s(`<h1 id="discrete-event-simulation-and-program-control" tabindex="-1"><a class="header-anchor" href="#discrete-event-simulation-and-program-control" aria-hidden="true">#</a> Discrete Event Simulation and Program Control</h1><h2 id="coroutines" tabindex="-1"><a class="header-anchor" href="#coroutines" aria-hidden="true">#</a> Coroutines</h2><p>MicroCityWeb provides several coroutine-related functions that facilitate the implementation of event scheduling.</p><h3 id="coroutine-queue" tabindex="-1"><a class="header-anchor" href="#coroutine-queue" aria-hidden="true">#</a> coroutine.queue</h3><p>Adds a function or coroutine to the coroutine queue for execution after a specified relative time.</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code>coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>rt<span class="token punctuation">,</span> f<span class="token operator">|</span>co <span class="token punctuation">[</span><span class="token punctuation">,</span> argument list<span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>Parameters</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>rt</code></td><td>Relative time from the current queue. It should be greater than or equal to 0. In other words, it specifies the time after which the input function or coroutine will be executed.</td></tr><tr><td><code>f/co</code></td><td>Function or coroutine. If it&#39;s a function, you only need to input the function name.</td></tr></tbody></table><h3 id="coroutine-qtime" tabindex="-1"><a class="header-anchor" href="#coroutine-qtime" aria-hidden="true">#</a> coroutine.qtime</h3><p>Retrieves the current time of the queue.</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> time <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Here are two examples provided:</p><ul><li><a href="#adding-coroutines-to-the-queue">Adding Coroutines to the Queue</a>: Demonstrates how to add coroutines to the queue and display the current queue time within the function.</li><li><a href="#vehicle-movement">Vehicle Movement</a>: Shows how to use coroutines to refresh the scene based on real-world time.</li></ul><h4 id="adding-coroutines-to-the-queue" tabindex="-1"><a class="header-anchor" href="#adding-coroutines-to-the-queue" aria-hidden="true">#</a> Adding Coroutines to the Queue</h4><p>This example demonstrates how to add coroutines to the queue and display the current queue time within the function.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current time:&quot;</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">ShowShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Current time (short):&quot;</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> Show<span class="token punctuation">)</span>
coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> Show<span class="token punctuation">)</span>
coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> ShowShort<span class="token punctuation">)</span>
coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> Show<span class="token punctuation">)</span>

<span class="token comment">-- Result:</span>
<span class="token comment">-- Current time: 5.0</span>
<span class="token comment">-- Current time: 10.0</span>
<span class="token comment">-- Current time (short): 15.0</span>
<span class="token comment">-- Current time: 20.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="vehicle-movement" tabindex="-1"><a class="header-anchor" href="#vehicle-movement" aria-hidden="true">#</a> Vehicle Movement</h4><p>This example demonstrates how to use coroutines to refresh the scene based on real-world time.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code>scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>grid<span class="token operator">=</span><span class="token string">&#39;plane&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- Set the scene background grid</span>

<span class="token comment">-- Vehicle</span>
<span class="token keyword">local</span> car <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;/res/2axle.glb&#39;</span><span class="token punctuation">)</span>
car<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- Car speed</span>

<span class="token comment">-- Initial time</span>
<span class="token keyword">local</span> t <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> dt <span class="token operator">=</span> <span class="token number">0</span>

<span class="token comment">-- Refresh time state t and dt (based on CPU intervals to synchronize with real-world time)</span>
<span class="token keyword">function</span> <span class="token function">refreshtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    dt <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t
    t <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- Coroutine updates the scene</span>
<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token keyword">return</span> <span class="token keyword">end</span> <span class="token comment">-- Render the scene and check if the program is terminated</span>
    coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> update<span class="token punctuation">)</span> <span class="token comment">-- Add the next update based on CPU step time</span>
    <span class="token function">carmove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- Move the vehicle</span>
    <span class="token function">refreshtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- Calculate the current dt</span>
<span class="token keyword">end</span>

<span class="token comment">-- Vehicle movement</span>
<span class="token keyword">function</span> <span class="token function">carmove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Car moves at&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
    <span class="token keyword">local</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> car<span class="token punctuation">:</span><span class="token function">getpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    car<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> dt <span class="token operator">*</span> car<span class="token punctuation">.</span>speed<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- Initial update (add the first update)</span>
<span class="token comment">-- Since subsequent updates are added within the function, the updates will loop automatically</span>
coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>dt<span class="token punctuation">,</span> update<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="random-numbers" tabindex="-1"><a class="header-anchor" href="#random-numbers" aria-hidden="true">#</a> Random Numbers</h2><h3 id="creating-a-random-seed" tabindex="-1"><a class="header-anchor" href="#creating-a-random-seed" aria-hidden="true">#</a> Creating a Random Seed</h3><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> seed <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span>x <span class="token punctuation">[</span><span class="token punctuation">,</span> dist<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>Parameters</p><table><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>x</code></td><td>Random seed. Different input values will produce different random numbers. To get different values each time, consider setting the random seed <code>x</code> to the current time.</td></tr><tr><td><code>dist</code></td><td>Random distribution (optional). If not set, the default is a uniform distribution. If this parameter is set, you can also specify <code>mu</code> and <code>sigma</code> as parameters for the corresponding distribution.</td></tr></tbody></table><p>The <code>dist</code> parameter can be set to one of three distributions:</p><ul><li><code>&#39;normal&#39;</code>: Normal distribution</li><li><code>&#39;exponential&#39;</code>: Exponential distribution</li><li><code>&#39;poisson&#39;</code>: Poisson distribution</li></ul><p>In addition, you can set parameters for these distributions, where the <code>mu</code> key represents the mean and the <code>sigma</code> key represents the standard deviation.</p><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- Create a random seed with a Poisson distribution</span>
<span class="token keyword">local</span> seed <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>distribution <span class="token operator">=</span> <span class="token string">&quot;poisson&quot;</span><span class="token punctuation">,</span> mu <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">-- Poisson distribution with a mean of 3</span>

<span class="token comment">-- Output a random number</span>
<span class="token function">print</span><span class="token punctuation">(</span>seed<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="program-control" tabindex="-1"><a class="header-anchor" href="#program-control" aria-hidden="true">#</a> Program Control</h2><p>Program control, in this context, mainly refers to controlling the execution of a program using the buttons in the user interface, including pause, resume, and stop.</p>`,32),d=n("p",null,[n("img",{src:e,alt:"Command Bar"})],-1),m=n("p",null,"Command Bar",-1),k=s(`<blockquote><p>This mainly refers to the first three buttons in the command bar.</p></blockquote><p>In MicroCityWeb, program control refers to the pause, resume, and stop of the 3D interface rendering implemented through the <code>scene</code> object. The specific function is as follows:</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> state <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Here, the return value of <code>scene.render()</code> is stored in the <code>state</code> variable. The <code>state</code> variable can be either <code>true</code> or <code>false</code>, representing the running or terminated state of the program (button 3 in the command bar).</p><p>Pausing the rendering of 3D objects is also achieved by calling <code>scene.render()</code>. If the refresh of 3D objects is implemented by continuously calling the <code>scene.render()</code> function and the refresh interval is not controlled by <code>os.sleep()</code>, it is possible to pause the rendering of the 3D interface at a certain state. This is because if <code>os.sleep()</code> is used to control the speed of 3D object movement and the pause button is clicked while the program is in the <code>os.sleep()</code> process, the program may not respond immediately, resulting in the pause button becoming ineffective. Therefore, it is recommended not to use <code>os.sleep()</code> for controlling the speed of 3D object movement, but to use other parameters to control the duration of advancement in order to control the speed of 3D object movement.</p>`,5);function h(v,b){const a=o("center");return c(),p("div",null,[r,i(a,null,{default:u(()=>[d,m]),_:1}),k])}const w=t(l,[["render",h],["__file","event-scheduling-en.html.vue"]]);export{w as default};
