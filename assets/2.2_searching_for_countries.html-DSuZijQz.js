import{_ as o,a as p}from"./query_results-D4VOG_UV.js";import{_ as i}from"./icon_script_editor-S0ak5iz0.js";import{_ as r,c,b as s,e as t,f as l,g as u,a,r as d,o as h}from"./app-Bq8cTqK8.js";const k={};function m(g,n){const e=d("RouteLink");return h(),c("div",null,[n[5]||(n[5]=s("h1",{id:"_2-2-searching-for-countries",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-2-searching-for-countries"},[s("span",null,"2.2 Searching for Countries")])],-1)),n[6]||(n[6]=s("p",null,"This tutorial will guide you in coding with MicroCity Script to manipulate GIS data. You have to complete 2.1 to proceed.",-1)),n[7]||(n[7]=s("h2",{id:"gis-data-structure",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#gis-data-structure"},[s("span",null,"GIS Data Structure")])],-1)),s("p",null,[n[1]||(n[1]=t("In MicroCity, GIS data consists of three types of <strong>Shapes</strong>: Point, Polyline and Polygon, each of which can be visualized as a Map Layer. In a layer, a <strong>Shape</strong> object consists of one or more <strong>Parts</strong>, and every <strong>Part</strong> consists of one or more <strong>Points</strong>. A <strong>Shape</strong> object is also associated to a record in the <strong>Attributes Table</strong>. You can also edit the shape or its attributes (see ",15)),l(e,{to:"/en/docs/3.2_vector_shapes.html"},{default:u(()=>n[0]||(n[0]=[a("3.2")])),_:1}),n[2]||(n[2]=a("). ")),n[3]||(n[3]=s("img",{src:o,alt:"structure"},null,-1)),n[4]||(n[4]=a(" If you want perform a complex editing or handle a batch of shapes, you can use MicroCity Script, in which many built-in functions can be used."))]),n[8]||(n[8]=t('<h2 id="making-a-query" tabindex="-1"><a class="header-anchor" href="#making-a-query"><span>Making a Query</span></a></h2><p>Suppose we want to find countries, each of which has a population of more than 100 million and is entirely in the northern hemisphere. So we need to check every point&#39;s coordinate in each shape and the population attribute of the shape. Open <strong>ScriptEditor</strong> <img src="'+i+`" alt="icon_script_editor"> and type following codes:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> Countries <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;countries.shp&quot;</span><span class="token punctuation">)</span>                 <span class="token comment">--Try to open the shapes layer</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>Countries<span class="token punctuation">)</span> <span class="token keyword">do</span>                    <span class="token comment">--Loop all the shape objects in the layer</span></span>
<span class="line">    <span class="token keyword">local</span> country <span class="token operator">=</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>Countries<span class="token punctuation">,</span> i<span class="token punctuation">)</span>              <span class="token comment">--Get the shape object of a country</span></span>
<span class="line">    <span class="token keyword">local</span> north <span class="token operator">=</span> <span class="token keyword">true</span>                                  <span class="token comment">--Assume the country is in the northern hemisphere</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPartCount</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span> <span class="token keyword">do</span>                 <span class="token comment">--Loop all of the parts in the shape</span></span>
<span class="line">        <span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetPointCount</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">do</span>         <span class="token comment">--Loop all of the points in the shape part</span></span>
<span class="line">            <span class="token keyword">local</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">GetPointXY</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span>      <span class="token comment">--Get coordinate of the point j</span></span>
<span class="line">            <span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>                               <span class="token comment">--If the latitude is less than 0</span></span>
<span class="line">                north <span class="token operator">=</span> <span class="token keyword">false</span>                           <span class="token comment">--The north assumption is false</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">local</span> pop <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;POP_EST&quot;</span><span class="token punctuation">)</span>            <span class="token comment">--Get the population property</span></span>
<span class="line">    <span class="token keyword">local</span> name <span class="token operator">=</span> <span class="token function">GetValue</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span> <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span>              <span class="token comment">--Get the country name</span></span>
<span class="line">    <span class="token keyword">if</span> pop <span class="token operator">&gt;</span> <span class="token number">100000000</span> <span class="token keyword">and</span> north  <span class="token keyword">then</span>                  <span class="token comment">--Check the two conditions</span></span>
<span class="line">        <span class="token function">Print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">,</span> pop<span class="token operator">/</span><span class="token number">100000000</span><span class="token punctuation">)</span>                <span class="token comment">--Print out the result</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="running-the-script" tabindex="-1"><a class="header-anchor" href="#running-the-script"><span>Running the Script</span></a></h2><p>Save the script to query.mcs and open it with MicroCity or drag it to MicroCity. Then you will find a <strong>query</strong> item appears in <strong>Modules Tab</strong> in Workspace panel. Double click the sub-item <strong>main</strong>. If a dialog pops up, select <strong>01. countries</strong> and click <strong>Okay</strong>. The results will be shown in <strong>Messages</strong> panel. <img src="`+p+'" alt="results"></p>',5))])}const b=r(k,[["render",m],["__file","2.2_searching_for_countries.html.vue"]]),w=JSON.parse('{"path":"/en/docs/2.2_searching_for_countries.html","title":"2.2 Searching for Countries","lang":"en-US","frontmatter":{"prev":"./2.1_showing_a_world_map.md","next":"./3.1_ui_overview.md","description":"2.2 Searching for Countries This tutorial will guide you in coding with MicroCity Script to manipulate GIS data. You have to complete 2.1 to proceed. GIS Data Structure In Micro...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/en/docs/2.2_searching_for_countries.html"}],["meta",{"property":"og:site_name","content":"MicroCity Notes"}],["meta",{"property":"og:title","content":"2.2 Searching for Countries"}],["meta",{"property":"og:description","content":"2.2 Searching for Countries This tutorial will guide you in coding with MicroCity Script to manipulate GIS data. You have to complete 2.1 to proceed. GIS Data Structure In Micro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-25T03:41:16.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T03:41:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.2 Searching for Countries\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T03:41:16.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"GIS Data Structure","slug":"gis-data-structure","link":"#gis-data-structure","children":[]},{"level":2,"title":"Making a Query","slug":"making-a-query","link":"#making-a-query","children":[]},{"level":2,"title":"Running the Script","slug":"running-the-script","link":"#running-the-script","children":[]}],"git":{"updatedTime":1700883676000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":5,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"en/docs/2.2_searching_for_countries.md","autoDesc":true,"excerpt":"\\n<p>This tutorial will guide you in coding with MicroCity Script to manipulate GIS data. You have to complete 2.1 to proceed.</p>\\n<h2>GIS Data Structure</h2>\\n<p>In MicroCity, GIS data consists of three types of <strong>Shapes</strong>: Point, Polyline and Polygon, each of which can be visualized as a Map Layer. In a layer, a <strong>Shape</strong> object consists of one or more <strong>Parts</strong>, and every <strong>Part</strong> consists of one or more <strong>Points</strong>. A <strong>Shape</strong> object is also associated to a record in the <strong>Attributes Table</strong>. You can also edit the shape or its attributes (see <a href=\\"/MicroCityNotes/en/docs/3.2_vector_shapes.html\\" target=\\"_blank\\">3.2</a>).\\n\\nIf you want perform a complex editing or handle a batch of shapes, you can use MicroCity Script, in which many built-in functions can be used.</p>"}');export{b as comp,w as data};
