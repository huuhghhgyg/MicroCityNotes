import{_ as p,r as a,o as c,c as l,a as n,b as s,d as t,w as i,e as u}from"./app-74QKXaVC.js";const r={},k=n("h1",{id:"_2-2-搜索国家",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-搜索国家"},[n("span",null,"2.2 搜索国家")])],-1),d=n("p",null,"这个教程旨在指导您如何使用 MicroCity Web 脚本接口。",-1),m=n("h2",{id:"场景对象的数据结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#场景对象的数据结构"},[n("span",null,"场景对象的数据结构")])],-1),h=n("strong",null,"points",-1),g=n("strong",null,"polyline",-1),_=n("strong",null,"mesh",-1),v=n("strong",null,"mesh",-1),b=u(`<img src="https://microcity.github.io/doc/img/data_structure.svg" width="640"><h2 id="发起查询" tabindex="-1"><a class="header-anchor" href="#发起查询"><span>发起查询</span></a></h2><p>您可以通过点击<strong>新建</strong><img src="https://microcity.github.io/img/new.svg" alt="new">打开一个示例脚本 -&gt; <strong>世界地图</strong>。然后点击<strong>运行</strong><img src="https://microcity.github.io/img/play.svg" alt="run">，这样世界上所有国家的地图和相关信息就会显示出来。现在假设我们想要找出人口超过1亿且完全位于北半球的国家。因此，我们需要检查每个国家的人口数量和边界坐标。以下是完整代码。</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>camtype<span class="token operator">=</span><span class="token string">&#39;ortho&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                              <span class="token comment">--将场景相机设置为正交投影</span>
<span class="token keyword">local</span> obj <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;/res/world_countries.geojson&#39;</span><span class="token punctuation">)</span>     <span class="token comment">--获取世界各国地理数据</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span>country <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span><span class="token function">getchildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span>                <span class="token comment">--遍历每个国家</span>
     <span class="token keyword">local</span> north <span class="token operator">=</span> <span class="token keyword">true</span>                                      <span class="token comment">--假设国家位于北半球</span>
     <span class="token keyword">for</span> j<span class="token punctuation">,</span> land <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>country<span class="token punctuation">:</span><span class="token function">getchildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span>         <span class="token comment">--遍历该国家所有领土</span>
         <span class="token keyword">local</span> points <span class="token operator">=</span> land<span class="token punctuation">:</span><span class="token function">getvertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment">--获取所有顶点坐标</span>
         <span class="token keyword">for</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">#</span>points<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span>                            <span class="token comment">--遍历顶点坐标中的纬度坐标</span>
             <span class="token keyword">if</span> points<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">then</span>                           <span class="token comment">--如果纬度小于0 (y&lt;0)</span>
                 north <span class="token operator">=</span> <span class="token keyword">false</span>                               <span class="token comment">--该领土不完全位于北半球</span>
             <span class="token keyword">end</span>
         <span class="token keyword">end</span>
     <span class="token keyword">end</span>
     <span class="token keyword">local</span> data <span class="token operator">=</span> country<span class="token punctuation">:</span><span class="token function">getdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">--获取国家属性数据</span>
     <span class="token keyword">if</span> north <span class="token keyword">and</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;POP_EST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100000000</span> <span class="token keyword">then</span> <span class="token comment">--判断是否满足两个条件</span>
         <span class="token function">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;NAME&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;, 人口:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">&#39;POP_EST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">--打印国家名称和人口</span>
         <span class="token keyword">for</span> j<span class="token punctuation">,</span> land <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>country<span class="token punctuation">:</span><span class="token function">getchildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span>     <span class="token comment">--遍历该国家所有领土</span>
             land<span class="token punctuation">:</span><span class="token function">setmat</span><span class="token punctuation">(</span><span class="token punctuation">{</span>color<span class="token operator">=</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> opacity<span class="token operator">=</span><span class="token number">0.6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment">--标记为黄色且稍作透明处理</span>
         <span class="token keyword">end</span>
     <span class="token keyword">end</span>
<span class="token keyword">end</span>
scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                               <span class="token comment">--渲染场景</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="展示结果" tabindex="-1"><a class="header-anchor" href="#展示结果"><span>展示结果</span></a></h2><p><strong>运行</strong><img src="https://microcity.github.io/img/play.svg" alt="run">脚本将会突出显示搜索到的国家，并在下方的<strong>消息栏</strong>中打印信息。您可以点击消息栏以放大它。</p><p><img src="https://microcity.github.io/doc/img/searching_for_countries.png" alt="results"></p>`,7),y={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"反馈",-1);function w(x,j){const o=a("RouterLink"),e=a("ExternalLinkIcon");return c(),l("div",null,[k,d,m,n("p",null,[s("在场景中，您可以加载内置对象，如'box'，'sphere' 等，也可以导入外部 json 文件，如 geojson 和 gltf。所有加载到场景中的对象可以分为三种基本类型，称为"),h,s("、"),g,s(" 和"),_,s("（多边形是"),v,s("的一种特殊类型）。对象数据被组织成如下所示的分层树结构。您可以在 "),t(o,{to:"/docs/web/4.3_scene_and_object.html"},{default:i(()=>[s("4.3 场景与对象")]),_:1}),s(" 中找到有关对象的更多信息。")]),b,n("blockquote",null,[n("p",null,[s("本文使用ChatGPT翻译，如有遗漏请"),n("a",y,[f,t(e)]),s("。")])])])}const N=p(r,[["render",w],["__file","2.2_searching_for_countries.html.vue"]]);export{N as default};
