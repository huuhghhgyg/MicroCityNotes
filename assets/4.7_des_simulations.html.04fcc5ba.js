import{_ as o}from"./icon_script_editor.6508d134.js";import{_ as p,r as i,o as u,c,a as n,e as s,w as e,b as t,f as l}from"./app.663e904e.js";const r={},d=l('<h1 id="_4-7-discrete-event-simulations" tabindex="-1"><a class="header-anchor" href="#_4-7-discrete-event-simulations" aria-hidden="true">#</a> 4.7 Discrete Event Simulations</h1><p>MicroCity has a inside simulation time counting and event scheduling mechanism. It provides several embedded Lua functions to facilitate creating <strong>Discrete Event Simulations</strong>, which is very useful for dynamic system analysis. Sample codes for this chapter can be found in the &quot;simulation_samples&quot; folder of the <strong>Project</strong> Tab in <img src="'+o+`" alt="icon"><strong>ScriptEditor</strong>.</p><h2 id="random-number-generation" tabindex="-1"><a class="header-anchor" href="#random-number-generation" aria-hidden="true">#</a> Random Number Generation</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_01&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a binary distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_real&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a uniform distributed real random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_int&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates an uniform integer random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;triangle&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a triangle distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;bernoulli&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a bernoulli distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;cauchy&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> median <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a cauchy distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;exponential&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> lambda <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a exponential distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;geometric&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a geometric distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;normal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a normal distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;lognormal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a lognormal distributed random generation engine from a seed and returns the object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetNextRandom</span> <span class="token punctuation">(</span>Engine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Gets a random number from a random generation engine.</p><h2 id="simulation-control" tabindex="-1"><a class="header-anchor" href="#simulation-control" aria-hidden="true">#</a> Simulation Control</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateEvent</span> <span class="token punctuation">(</span>time<span class="token punctuation">,</span> Funcion <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a future event from a <em>Lua Function</em> or a <em>Lua Coroutine</em>. Returns a <em>Coroutine</em> object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">ExecAllEvents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Calls this at last. It will execute all events as <em>Lua Coroutines</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">Delay</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>relativeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Calls this function in a <em>Lua Coroutine</em> will let it first yield then resume it after the specified relative time. If the parameter <em>relativeTime</em> is not set, the current <em>Coroutine</em> will yield and won&#39; be resumed automatically.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">Resume</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> <span class="token punctuation">]</span> Coroutine <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Resumes a yielded coroutine immediately or at a specified time.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetSimTime</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the current simulation time.</p>`,36),m=n("strong",null,"< 4.6 Networks",-1),k=n("a",{href:"."},[n("strong",null,"Table of Contents")],-1),g=n("strong",null,"4.8 Mixed Integer Programming >",-1);function v(b,h){const a=i("RouterLink");return u(),c("div",null,[d,n("p",null,[s(a,{to:"/docs/4.6_networks.html"},{default:e(()=>[m]),_:1}),t(" | "),k,t(" | "),s(a,{to:"/docs/4.8_mixed_integer_programming.html"},{default:e(()=>[g]),_:1})])])}const C=p(r,[["render",v],["__file","4.7_des_simulations.html.vue"]]);export{C as default};
