import{_ as i,c as u,e as l,f as c,g as t,r,o as d,a as s,b as n}from"./app-DBXIMjCi.js";const k={};function m(v,a){const o=r("CodeTabs");return d(),u("div",null,[a[14]||(a[14]=l(`<h1 id="混合整数规划" tabindex="-1"><a class="header-anchor" href="#混合整数规划"><span>混合整数规划</span></a></h1><p>本文档介绍MicroCity Web中混合整数规划的建模方法。</p><h2 id="创建混合整数规划模型" tabindex="-1"><a class="header-anchor" href="#创建混合整数规划模型"><span>创建混合整数规划模型</span></a></h2><p>创建整数规划模型对象</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 将创建的模型对象赋值给 mip</span></span>
<span class="line"></span></code></pre></div><h2 id="设置目标函数" tabindex="-1"><a class="header-anchor" href="#设置目标函数"><span>设置目标函数</span></a></h2><p>MicroCity Web中，模型的第一行是目标函数，使用<code>mip:addrow()</code>函数添加。</p><p>允许选择目标函数求<strong>最大值</strong>或<strong>最小值</strong>。具体用法如下：</p>`,8)),c(o,{id:"22",data:[{id:"最大值"},{id:"最小值"}],active:0,"tab-id":"shell"},{title0:t(({value:p,isActive:e})=>a[0]||(a[0]=[s("最大值")])),title1:t(({value:p,isActive:e})=>a[1]||(a[1]=[s("最小值")])),tab0:t(({value:p,isActive:e})=>a[2]||(a[2]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("coeff"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'max'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"--求最大值")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:t(({value:p,isActive:e})=>a[3]||(a[3]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("coeff"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'min'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"--求最小值")]),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[15]||(a[15]=l(`<h4 id="参数说明及示例" tabindex="-1"><a class="header-anchor" href="#参数说明及示例"><span>参数说明及示例</span></a></h4><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>mip</code></td><td>数学模型对象。将数学模型输入函数中，为模型设置目标函数</td></tr><tr><td><code>coeff</code></td><td>目标函数系数，是一个<code>table</code>类型的变量。用于确定模型中目标函数的系数。</td></tr><tr><td><code>&quot;min&quot;</code>或<code>&quot;max&quot;</code></td><td>确定目标函数求最大还是求最小。</td></tr></tbody></table><p><code>coeff</code>是目标函数的系数列表，是一个<code>table</code>类型的变量。假设你要求函数 $$4x_1+12x_2+18x_3$$ 的<strong>最小值</strong>，则添加目标函数的做法如下：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 假设你已经创建了模型对象，并存入变量mip中</span></span>
<span class="line"><span class="token comment">-- 设定目标函数为 4*x1 + 12*x2 + 18*x3，求最小</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加约束" tabindex="-1"><a class="header-anchor" href="#添加约束"><span>添加约束</span></a></h2><h3 id="添加约束方程" tabindex="-1"><a class="header-anchor" href="#添加约束方程"><span>添加约束方程</span></a></h3><p>在MicroCity Web中，使用<code>mip:addrow()</code>添加剩下的约束方程，用法如下：</p>`,7)),c(o,{id:"84",data:[{id:"≤"},{id:"≥"},{id:"="}],active:0,"tab-id":"shell"},{title0:t(({value:p,isActive:e})=>a[4]||(a[4]=[s("≤")])),title1:t(({value:p,isActive:e})=>a[5]||(a[5]=[s("≥")])),title2:t(({value:p,isActive:e})=>a[6]||(a[6]=[s("=")])),tab0:t(({value:p,isActive:e})=>a[7]||(a[7]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("cons"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"<="'),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:t(({value:p,isActive:e})=>a[8]||(a[8]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("cons"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'">="'),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab2:t(({value:p,isActive:e})=>a[9]||(a[9]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("cons"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"=="'),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[16]||(a[16]=l(`<h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明"><span>参数说明</span></a></h4><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>mip</code></td><td>一开始创建的整数规划模型对象</td></tr><tr><td><code>cons</code></td><td>约束方程系数。和设置目标函数中的<code>cons</code>一样，也是一个<code>table</code>类型的变量。用于确定约束方程中各个变量的系数。</td></tr><tr><td><code>&quot;&lt;=&quot;</code> 或 <code>&quot;&gt;=&quot;</code> 或 <code>&quot;==&quot;</code></td><td>确定约束方程与右端项的关系</td></tr><tr><td><code>b</code></td><td>约束方程的右端项。</td></tr></tbody></table><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><p>上面已经设置了目标函数为$4x_1+12x_2+18x_3$，假设你要为这个函数添加两个约束方程： $$ \\left{\\begin{matrix} x_1+3x_3\\ge3 \\<br> 2x_2+2x_3\\ge5 \\end{matrix}\\right. $$ 添加对应约束方程：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 添加约束：x1+3*x3≥3</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 添加约束：2*x2+2*x3≥5</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难注意到，系数的个数和目标函数中变量的个数一致。因此，在编程求解之前首先要搞清楚变量的总数，并安排好各个变量的位置。</p><h3 id="设置变量类型" tabindex="-1"><a class="header-anchor" href="#设置变量类型"><span>设置变量类型</span></a></h3><p>MicroCity Web 中的数学规划支持整数规划。默认变量的取值范围是非负实数(≥0)。下面介绍变量类型设置的详细做法。</p><p>你可以将模型中第<code>i</code>个变量设置为<strong>整数变量</strong>或<strong>0-1变量</strong>。如果不将变量设置为这些类型，则默认变量为<strong>非负实数</strong>。</p>`,9)),c(o,{id:"163",data:[{id:"整数变量"},{id:"0-1变量"}],"tab-id":"shell"},{title0:t(({value:p,isActive:e})=>a[10]||(a[10]=[s("整数变量")])),title1:t(({value:p,isActive:e})=>a[11]||(a[11]=[s("0-1变量")])),tab0:t(({value:p,isActive:e})=>a[12]||(a[12]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'c1'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'int'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"--将第1个变量（第一列，col 1）设置为整数变量(Integer)")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:t(({value:p,isActive:e})=>a[13]||(a[13]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'c2'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'bin'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"--将第2个变量（第二列，col 2）设置为0-1变量(Binary)")]),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[17]||(a[17]=l(`<h2 id="模型求解和输出" tabindex="-1"><a class="header-anchor" href="#模型求解和输出"><span>模型求解和输出</span></a></h2><h3 id="模型求解" tabindex="-1"><a class="header-anchor" href="#模型求解"><span>模型求解</span></a></h3><p>由于目标函数和约束方程都已经添加完毕，因此模型的求解就很简单了，只需要一步：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>执行完这条语句后，存放于变量<code>mip</code>内的数学模型就求解完毕了🎉</p><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><p>求解完还需要输出，否则就不知道求解的结果如何。以下是常用的输出求解结果的函数。</p><p>获取<strong>目标函数值</strong>：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>获取第<code>i</code>个<strong>变量的值</strong>：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>这里提供一个简单的从建模至求解的示例供参考。（其实就是将前面的拼起来）</p><p>算例： $$ minf=4x_1+12x_2+18x_3\\ s.t.\\left{\\begin{matrix} x_1+3x_3\\ge3 \\<br> 2x_2+2x_3\\ge5 \\ x_1,x_2,x_3\\in N \\end{matrix}\\right. $$</p><blockquote><p>N表示自然数（非负整数集合）</p></blockquote><p>脚本</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 设置目标函数</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 添加约束</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">-- x1+3*x3≥3</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">-- 2*x2+2*x3≥5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 设置所有变量为整数</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">,</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 求解模型</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 输出目标函数值</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;目标函数值:&quot;</span><span class="token punctuation">,</span> mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 输出各个变量的值</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token operator">..</span>i<span class="token operator">..</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">目标函数值: 42.0</span>
<span class="line">x1= 0.0</span>
<span class="line">x2= 2.0</span>
<span class="line">x3= 1.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">在线运行</p><p>在MicroCity Web中查看这个<a href="https://microcity.github.io/#s80lle" target="_blank" rel="noopener noreferrer">示例</a></p></div><h2 id="建模的一些技巧" tabindex="-1"><a class="header-anchor" href="#建模的一些技巧"><span>建模的一些技巧</span></a></h2><h3 id="线性化" tabindex="-1"><a class="header-anchor" href="#线性化"><span>线性化</span></a></h3><p>有时候我们会遇到多下标的建模问题，如决策变量为$x_{ij}$，这个时候就要将其进行线性化编码。</p><p>假设决策变量本身的形状共有3行4列，即：</p><table><thead><tr><th>列1</th><th>列2</th><th>列3</th><th>列4</th></tr></thead><tbody><tr><td>$x_{11}$</td><td>$x_{12}$</td><td>$x_{13}$</td><td>$x_{14}$</td></tr><tr><td>$x_{21}$</td><td>$x_{22}$</td><td>$x_{23}$</td><td>$x_{24}$</td></tr><tr><td>$x_{31}$</td><td>$x_{32}$</td><td>$x_{33}$</td><td>$x_{34}$</td></tr></tbody></table><p>假设目标函数要将这些决策变量求和，即 $F=\\sum_{i=1}^3\\sum_{j=1}^4x_{ij}$ 如果要将其输入目标函数，此时可以将其线性化为 $x_{11}+x_{12}+...+x_{14}+x_{21}+...+x_{24}+x_{31}+...+x_{34}$</p><p>由于只有两个维度，因此可以使用两个<code>for</code>实现：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span> <span class="token comment">-- 第一维</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- 第二维</span></span>
<span class="line">        cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- 填入系数</span></span>
<span class="line">        <span class="token comment">-- 其中 4 * (i - 1) + j 的思想类似于进位</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">--结果：</span></span>
<span class="line"><span class="token comment">-- cons长度为12，值都为1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例题-指派模型" tabindex="-1"><a class="header-anchor" href="#例题-指派模型"><span>例题：指派模型</span></a></h4><p>下面以一个实际的例题来看看多维线性化的具体使用方法及其方便之处。</p><p><strong>甲、乙、丙、丁四人配送A，B，C，D四种货物，所需时间如表所示。若一种货物只交一人送货，则应指派何人配送何种货物，能使总的时间最少？</strong></p><table><thead><tr><th>人\\工件</th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>甲</td><td>14</td><td>9</td><td>4</td><td>15</td></tr><tr><td>乙</td><td>11</td><td>7</td><td>9</td><td>10</td></tr><tr><td>丙</td><td>13</td><td>2</td><td>10</td><td>5</td></tr><tr><td>丁</td><td>17</td><td>9</td><td>15</td><td>13</td></tr></tbody></table><p>假设货物A、B、C、D对应的编号依次为1、2、3、4，设 $x_{ij}=1$ 时表示第<code>i</code>个人送<code>j</code>货，$x_{ij}=0$ 时表示第<code>i</code>个人不送<code>j</code>货。</p><p>则上述问题的数学模型可以表示为</p><p>$$ minZ=\\sum_{i=1}^4\\sum_{j=1}^4c_{ij}x_{ij}\\ s.t.\\left{\\begin{matrix} \\sum_{j=1}^4x_{ij}=1, i=1,2,...,4 \\<br> \\sum_{i=1}^4x_{ij}=1, j=1,2,...,4 \\ x_{ij}=0,1 \\end{matrix}\\right. $$</p><p>求解代码</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 效率矩阵</span></span>
<span class="line"><span class="token keyword">local</span> cost <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 创建目标函数</span></span>
<span class="line"><span class="token keyword">local</span> coeff <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token comment">-- 此处可以轻松将二维数组转换为一维数组</span></span>
<span class="line">        coeff<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>coeff<span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 添加约束</span></span>
<span class="line"><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- 第i维的值控制</span></span>
<span class="line">    <span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> i <span class="token operator">==</span> k <span class="token keyword">then</span> <span class="token comment">-- j求和，判断i</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>cons<span class="token punctuation">,</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- 第j维的值控制</span></span>
<span class="line">    <span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> j <span class="token operator">==</span> k <span class="token keyword">then</span> <span class="token comment">-- i求和，判断j</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>cons<span class="token punctuation">,</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 求解模型</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 输出目标函数值</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;目标函数值:&quot;</span><span class="token punctuation">,</span> mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 输出决策变量</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- 第一维</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- 第二维</span></span>
<span class="line">        <span class="token keyword">local</span> x <span class="token operator">=</span> mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span> <span class="token operator">..</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">if</span> x <span class="token operator">~=</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;x[&quot;</span> <span class="token operator">..</span> i <span class="token operator">..</span> <span class="token string">&quot;][&quot;</span> <span class="token operator">..</span> j <span class="token operator">..</span> <span class="token string">&quot;]=&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">目标函数值: 29.0</span>
<span class="line">x[1][3]= 1.0</span>
<span class="line">x[2][1]= 1.0</span>
<span class="line">x[3][4]= 1.0</span>
<span class="line">x[4][2]= 1.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">在线运行</p><p>在MicroCity Web中查看这个<a href="https://microcity.github.io/#s80lnp" target="_blank" rel="noopener noreferrer">示例</a></p></div><table><thead><tr><th>结果</th><th style="text-align:center;">人</th><th style="text-align:center;">配送工件</th></tr></thead><tbody><tr><td>$x_{13}=1$</td><td style="text-align:center;">甲</td><td style="text-align:center;">C</td></tr><tr><td>$x_{21}=1$</td><td style="text-align:center;">乙</td><td style="text-align:center;">A</td></tr><tr><td>$x_{34}=1$</td><td style="text-align:center;">丙</td><td style="text-align:center;">D</td></tr><tr><td>$x_{42}=1$</td><td style="text-align:center;">丁</td><td style="text-align:center;">B</td></tr></tbody></table><h3 id="中间变量的处理" tabindex="-1"><a class="header-anchor" href="#中间变量的处理"><span>中间变量的处理</span></a></h3><p>有时候模型中会存在一些中间变量，这些变量必须要在矩阵中有对应的位置才能对其进行求解，而这些中间变量不参与目标函数值的运算。<strong>可以将中间变量对应位置的系数设为0。</strong></p><p>假设$x_1,x_2,x_3,x_4$为决策变量，$y_1,y_2$为中间变量。目标函数为: $$ z=\\sum_{i=1}^4x_i $$ 则目标函数系数可以设为：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> fcons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 前面4位为决策变量，后面2位为中间变量</span></span>
<span class="line"></span></code></pre></div><p>接下来按照一般流程做就可以啦😎</p>`,45))])}const h=i(k,[["render",m],["__file","mip.html.vue"]]),g=JSON.parse('{"path":"/notes/mip.html","title":"混合整数规划","lang":"zh-CN","frontmatter":{"description":"混合整数规划 本文档介绍MicroCity Web中混合整数规划的建模方法。 创建混合整数规划模型 创建整数规划模型对象 设置目标函数 MicroCity Web中，模型的第一行是目标函数，使用mip:addrow()函数添加。 允许选择目标函数求最大值或最小值。具体用法如下： 参数说明及示例 coeff是目标函数的系数列表，是一个table类型的变量...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://huuhghhgyg.github.io/MicroCityNotes/en/notes/mip.html"}],["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/notes/mip.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"混合整数规划"}],["meta",{"property":"og:description","content":"混合整数规划 本文档介绍MicroCity Web中混合整数规划的建模方法。 创建混合整数规划模型 创建整数规划模型对象 设置目标函数 MicroCity Web中，模型的第一行是目标函数，使用mip:addrow()函数添加。 允许选择目标函数求最大值或最小值。具体用法如下： 参数说明及示例 coeff是目标函数的系数列表，是一个table类型的变量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-09T09:39:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-09T09:39:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"混合整数规划\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T09:39:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建混合整数规划模型","slug":"创建混合整数规划模型","link":"#创建混合整数规划模型","children":[]},{"level":2,"title":"设置目标函数","slug":"设置目标函数","link":"#设置目标函数","children":[]},{"level":2,"title":"添加约束","slug":"添加约束","link":"#添加约束","children":[{"level":3,"title":"添加约束方程","slug":"添加约束方程","link":"#添加约束方程","children":[]},{"level":3,"title":"设置变量类型","slug":"设置变量类型","link":"#设置变量类型","children":[]}]},{"level":2,"title":"模型求解和输出","slug":"模型求解和输出","link":"#模型求解和输出","children":[{"level":3,"title":"模型求解","slug":"模型求解","link":"#模型求解","children":[]},{"level":3,"title":"输出","slug":"输出","link":"#输出","children":[]}]},{"level":2,"title":"建模的一些技巧","slug":"建模的一些技巧","link":"#建模的一些技巧","children":[{"level":3,"title":"线性化","slug":"线性化","link":"#线性化","children":[]},{"level":3,"title":"中间变量的处理","slug":"中间变量的处理","link":"#中间变量的处理","children":[]}]}],"git":{"updatedTime":1717925981000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":8,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"notes/mip.md","autoDesc":true,"excerpt":"\\n<p>本文档介绍MicroCity Web中混合整数规划的建模方法。</p>\\n<h2>创建混合整数规划模型</h2>\\n<p>创建整数规划模型对象</p>\\n<div class=\\"language-lua\\" data-highlighter=\\"prismjs\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">local</span> mip <span class=\\"token operator\\">=</span> math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newmip</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">-- 将创建的模型对象赋值给 mip</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>"}');export{h as comp,g as data};
