import{_ as a}from"./icon_script_editor-S0ak5iz0.js";import{_ as n,o as s,c as t,e as p}from"./app-DPGdFUmI.js";const e={},o=p('<h1 id="_4-6-网络" tabindex="-1"><a class="header-anchor" href="#_4-6-网络"><span>4.6 网络</span></a></h1><p>在MicroCity中，GIS矢量数据（参见<a href="3.2_vector_shapes">3.2</a>）可以进行拓扑操作，并应用<strong>最短路径算法</strong>和<strong>用户均衡交通分配算法</strong>。本章的示例代码可以在<strong>项目</strong>选项卡的&quot;network_samples&quot;文件夹中找到，具体请参考<img src="'+a+`" alt="icon"><strong>ScriptEditor</strong>。</p><h2 id="网络操作" tabindex="-1"><a class="header-anchor" href="#网络操作"><span>网络操作</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>创建一个空网络对象并返回。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span>UnTopoLines<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从未进行拓扑操作的“线”形状创建网络，并返回三个对象：网络、节点（形状）和链接（形状）。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">CreateNetwork</span> <span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> Links<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从进行了拓扑操作的节点和链接形状创建网络对象。返回网络对象。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">InitNetwork</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> Nodes<span class="token punctuation">,</span> Links<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从节点和链接形状初始化网络。如果成功返回true。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">AddLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> oID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> dID<span class="token operator">|</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> impedance <span class="token punctuation">[</span><span class="token punctuation">,</span> direction <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> capacity <span class="token operator">=</span> <span class="token number">1E+38</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>向网络中添加新的链接或更新现有链接。返回linkID、oID、dID、添加结果（true/false）和更新结果（true/false）。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">AddLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> Shapes<span class="token operator">|</span>Table<span class="token punctuation">,</span> index1 <span class="token punctuation">[</span><span class="token punctuation">,</span> index2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从形状记录集或表中添加或更新链接。返回布尔值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">DelLink</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从网络中删除链接。返回布尔值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetNearNodeID</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">[</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>获取坐标最近的网络节点。返回节点ID。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetNodeXY</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> nodeID1 <span class="token punctuation">[</span><span class="token punctuation">,</span> nodeID2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回网络中节点的坐标：x1、y1、x2、y2，等等。</p><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法"><span>算法</span></a></h2><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GenSTPTree</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID <span class="token punctuation">[</span><span class="token punctuation">,</span> endID<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>从一个节点生成最短路径生成树。返回布尔值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;NodeID&quot;</span><span class="token operator">|</span><span class="token string">&quot;LinkID&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在调用<em>GenSTPTree</em>之后调用该函数。返回由节点ID或链接ID序列表示的最短路径：id1、id2，等等。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iNodeShp&quot;</span><span class="token operator">|</span><span class="token string">&quot;iLinkShp&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在调用GenSTPTree之后调用该函数。返回由节点或链接形状索引序列表示的最短路径。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;NodeShp&quot;</span><span class="token operator">|</span><span class="token string">&quot;LinkShp&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在调用GenSTPTree之后调用该函数。返回由节点或链接形状对象序列表示的最短路径。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在调用GenSTPTree之后调用该函数。返回到达目标节点的最短路径距离。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID<span class="token punctuation">,</span> endID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在网络中从起点节点到终点节点获取最短路径。返回距离。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在网络中从起点坐标到终点坐标获取最短路径。返回距离。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetTrip</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> oID<span class="token punctuation">,</span> dID<span class="token punctuation">,</span> amount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>设置从出发地到目的地的旅行量。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SolveUE</span> <span class="token punctuation">(</span>Network <span class="token punctuation">[</span><span class="token punctuation">,</span> rootTol <span class="token operator">=</span> <span class="token number">1E-2</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> equlBrm <span class="token operator">=</span> <span class="token number">1E-5</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> maxIter <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>在调用SetTrip之后调用该函数。执行用户均衡交通分配，并返回布尔值。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">GetFlow</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>返回指定链接的交通流量。</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">SetFlow</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> linkID<span class="token punctuation">,</span> flow<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>设置指定链接的交通流量，并返回布尔值。</p><blockquote><p>这篇文章使用ChatGPT翻译自其他语言，如果有问题请在<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>页面提交反馈。</p></blockquote>`,45),l=[o];function c(u,i){return s(),t("div",null,l)}const k=n(e,[["render",c],["__file","4.6_networks.html.vue"]]),g=JSON.parse('{"path":"/docs/desktop/4.6_networks.html","title":"4.6 网络","lang":"zh-CN","frontmatter":{"prev":"./4.5_3d_scenes.md","next":"./4.7_des_simulations.md","description":"4.6 网络 在MicroCity中，GIS矢量数据（参见3.2）可以进行拓扑操作，并应用最短路径算法和用户均衡交通分配算法。本章的示例代码可以在项目选项卡的\\"network_samples\\"文件夹中找到，具体请参考iconScriptEditor。 网络操作 创建一个空网络对象并返回。 从未进行拓扑操作的“线”形状创建网络，并返回三个对象：网络、节点...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/desktop/4.6_networks.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.6 网络"}],["meta",{"property":"og:description","content":"4.6 网络 在MicroCity中，GIS矢量数据（参见3.2）可以进行拓扑操作，并应用最短路径算法和用户均衡交通分配算法。本章的示例代码可以在项目选项卡的\\"network_samples\\"文件夹中找到，具体请参考iconScriptEditor。 网络操作 创建一个空网络对象并返回。 从未进行拓扑操作的“线”形状创建网络，并返回三个对象：网络、节点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T05:56:24.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-19T05:56:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.6 网络\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T05:56:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"网络操作","slug":"网络操作","link":"#网络操作","children":[]},{"level":2,"title":"算法","slug":"算法","link":"#算法","children":[]}],"git":{"updatedTime":1710827784000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":2}]},"filePathRelative":"docs/desktop/4.6_networks.md","autoDesc":true,"excerpt":"\\n<p>在MicroCity中，GIS矢量数据（参见<a href=\\"3.2_vector_shapes\\">3.2</a>）可以进行拓扑操作，并应用<strong>最短路径算法</strong>和<strong>用户均衡交通分配算法</strong>。本章的示例代码可以在<strong>项目</strong>选项卡的\\"network_samples\\"文件夹中找到，具体请参考<strong>ScriptEditor</strong>。</p>\\n<h2>网络操作</h2>\\n<div class=\\"language-lua\\" data-highlighter=\\"prismjs\\" data-ext=\\"lua\\" data-title=\\"lua\\"><pre class=\\"language-lua\\"><code><span class=\\"line\\"><span class=\\"token function\\">CreateNetwork</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{k as comp,g as data};
