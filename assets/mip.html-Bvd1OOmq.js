import{_ as c,c as r,e as o,f as l,g as e,r as u,o as d,a as s,b as n}from"./app-o0JILEy2.js";const m={};function k(v,a){const i=u("CodeTabs");return d(),r("div",null,[a[12]||(a[12]=o(`<h1 id="mixed-integer-programming" tabindex="-1"><a class="header-anchor" href="#mixed-integer-programming"><span>Mixed integer programming</span></a></h1><p>Mixed-Integer Programming (MIP) is a powerful mathematical optimization technique used to solve problems where some of the decision variables are required to be integers. This article provides a step-by-step guide on creating and solving MIP models using Lua programming language in the context of MicroCity Web.</p><div class="hint-container info"><p class="hint-container-title">Translate info</p><p>This section is translated with assistance from ChatGPT, and the translation may not be accurate. If you have any questions, please leave remark below.</p></div><h2 id="creating-a-mixed-integer-programming-model" tabindex="-1"><a class="header-anchor" href="#creating-a-mixed-integer-programming-model"><span>Creating a Mixed-Integer Programming Model</span></a></h2><p>Creating an integer programming model object.</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- Assign the created model object to mip</span></span>
<span class="line"></span></code></pre></div><h2 id="setting-the-objective-function" tabindex="-1"><a class="header-anchor" href="#setting-the-objective-function"><span>Setting the Objective Function</span></a></h2><p>In MicroCity Web, the first line of the model is the objective function, added using the <code>mip:addrow()</code> function.</p><p>You can choose to maximize or minimize the objective function. The usage is as follows:</p>`,9)),l(i,{id:"27",data:[{id:"Maximize"},{id:"Minimize"}],active:0,"tab-id":"shell"},{title0:e(({value:t,isActive:p})=>a[0]||(a[0]=[s("Maximize")])),title1:e(({value:t,isActive:p})=>a[1]||(a[1]=[s("Minimize")])),tab0:e(({value:t,isActive:p})=>a[2]||(a[2]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("coeff"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'max'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"-- Maximize the objective function")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:p})=>a[3]||(a[3]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("coeff"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'min'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"-- Minimize the objective function")]),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[13]||(a[13]=o(`<h4 id="parameter-description-and-examples" tabindex="-1"><a class="header-anchor" href="#parameter-description-and-examples"><span>Parameter Description and Examples</span></a></h4><table><thead><tr><th>Parameter</th><th>Purpose</th></tr></thead><tbody><tr><td><code>mip</code></td><td>Mathematical model object. Sets the objective function for the model</td></tr><tr><td><code>coeff</code></td><td>Coefficients of the objective function, a <code>table</code> variable. Determines the coefficients of the objective function in the model.</td></tr><tr><td><code>&quot;min&quot;</code> or <code>&quot;max&quot;</code></td><td>Determines whether to minimize or maximize the objective function.</td></tr></tbody></table><p><code>coeff</code> is a list of coefficients for the objective function, a <code>table</code> variable. Suppose you want to minimize the function $$4x_1+12x_2+18x_3$$ the approach to adding the objective function is as follows:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- Assuming you have already created the model object and stored it in the variable mip</span></span>
<span class="line"><span class="token comment">-- Set the objective function to 4*x1 + 12*x2 + 18*x3, minimize</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-constraints" tabindex="-1"><a class="header-anchor" href="#adding-constraints"><span>Adding Constraints</span></a></h2><h3 id="adding-constraint-equations" tabindex="-1"><a class="header-anchor" href="#adding-constraint-equations"><span>Adding Constraint Equations</span></a></h3><p>In MicroCity Web, use <code>mip:addrow()</code> to add the remaining constraint equations. The usage is as follows:</p>`,7)),l(i,{id:"89",data:[{id:"≥"},{id:"="}],"tab-id":"shell @tab:active ≤"},{title0:e(({value:t,isActive:p})=>a[4]||(a[4]=[s("≥")])),title1:e(({value:t,isActive:p})=>a[5]||(a[5]=[s("=")])),tab0:e(({value:t,isActive:p})=>a[6]||(a[6]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("cons"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'">="'),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1)])),tab1:e(({value:t,isActive:p})=>a[7]||(a[7]=[n("div",{class:"language-lua","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),s("cons"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"=="'),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])])],-1)])),_:1}),a[14]||(a[14]=o(`<h4 id="parameter-description" tabindex="-1"><a class="header-anchor" href="#parameter-description"><span>Parameter Description</span></a></h4><table><thead><tr><th>Parameter</th><th>Purpose</th></tr></thead><tbody><tr><td><code>mip</code></td><td>The integer programming model object created at the beginning</td></tr><tr><td><code>cons</code></td><td>Coefficients of the constraint equation. Like <code>cons</code> in setting the objective function, it&#39;s a <code>table</code> variable. Determines the coefficients of the variables in the constraint equation.</td></tr><tr><td><code>&quot;&lt;=&quot;</code> or <code>&quot;&gt;=&quot;</code> or <code>&quot;==&quot;</code></td><td>Determines the relationship between the constraint equation and the right-hand side.</td></tr><tr><td><code>b</code></td><td>The right-hand side of the constraint equation.</td></tr></tbody></table><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h4><p>The objective function has been set to $4x_1+12x_2+18x_3$. Suppose you want to add two constraint equations for this function:</p><p>$$ \\left{\\begin{matrix} x_1+3x_3\\ge3 \\<br> 2x_2+2x_3\\ge5 \\end{matrix}\\right. $$</p><p>Add the corresponding constraint equations:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- Add constraint: x1 + 3*x3 ≥ 3</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Add constraint: 2*x2 + 2*x3 ≥ 5</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can be noticed that the number of coefficients is the same as the number of variables in the objective function. Therefore, before programming, it is necessary to determine the total number of variables and arrange the positions of each variable.</p><h3 id="setting-variable-types" tabindex="-1"><a class="header-anchor" href="#setting-variable-types"><span>Setting Variable Types</span></a></h3><p>MicroCity&#39;s mathematical programming supports integer programming. The default variable range is non-negative real numbers (≥0). Below is a detailed method for setting variable types.</p><p>You can set the <code>i</code>-th variable in the model as an <strong>integer variable</strong> or a <strong>0-1 variable</strong>. If you don&#39;t set the variable to these types, it defaults to a <strong>non-negative real number</strong>.</p>`,11)),l(i,{id:"172",data:[{id:"Integer Variable"},{id:"0-1 Variable"}],"tab-id":"shell"},{title0:e(({value:t,isActive:p})=>a[8]||(a[8]=[s("Integer Variable")])),title1:e(({value:t,isActive:p})=>a[9]||(a[9]=[s("0-1 Variable")])),tab0:e(({value:t,isActive:p})=>a[10]||(a[10]=[n("div",{class:"language-lua line-numbers-mode","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"-- Set the first variable (first column, col 1) as an integer variable")]),s(`
`),n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'c1'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'int'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:p})=>a[11]||(a[11]=[n("div",{class:"language-lua line-numbers-mode","data-highlighter":"prismjs","data-ext":"lua","data-title":"lua"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"-- Set the second variable (second column, col 2) as a 0-1 variable")]),s(`
`),n("span",{class:"line"},[s("mip"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"addrow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'c2'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'bin'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[15]||(a[15]=o(`<h2 id="model-solution-and-output" tabindex="-1"><a class="header-anchor" href="#model-solution-and-output"><span>Model Solution and Output</span></a></h2><h3 id="model-solution" tabindex="-1"><a class="header-anchor" href="#model-solution"><span>Model Solution</span></a></h3><p>Since the objective function and constraint equations have been added, solving the model is straightforward:</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>After executing this statement, the mathematical model stored in the variable <code>mip</code> is solved 🎉</p><h3 id="output" tabindex="-1"><a class="header-anchor" href="#output"><span>Output</span></a></h3><p>After solving, you still need to output; otherwise, you won&#39;t know the results. Below are some commonly used functions for outputting the solution.</p><p>Get the <strong>value of the objective function</strong>:</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>Get the value of the <code>i</code>-th <strong>variable</strong>:</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><p>Here is a simple example from modeling to solving for reference. (It&#39;s just putting the pieces together)</p><p>Example:</p><p>$$ minf=4x_1+12x_2+18x_3\\ s.t.\\left{\\begin{matrix} x_1+3x_3\\ge3 \\<br> 2x_2+2x_3\\ge5 \\ x_1,x_2,x_3\\in N \\end{matrix}\\right. $$</p><blockquote><p>N represents the set of natural numbers (non-negative integers)</p></blockquote><p>Script</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Set objective functio</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Add constraints</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">-- x1 + 3*x3 ≥ 3</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;&gt;=&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">-- 2*x2 + 2*x3 ≥ 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Set all variables as integers</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">,</span> <span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Solve the model</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Output the value of the objective function</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Objective function value:&quot;</span><span class="token punctuation">,</span> mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Output the value of each variable</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token operator">..</span>i<span class="token operator">..</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span>mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token operator">..</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Objective function value: 42.0</span>
<span class="line">x1= 0.0</span>
<span class="line">x2= 2.0</span>
<span class="line">x3= 1.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Online Execution</p><p>Check this <a href="https://microcity.github.io/#s44523" target="_blank" rel="noopener noreferrer">example</a> in MicroCityWeb</p></div><h2 id="some-modeling-techniques" tabindex="-1"><a class="header-anchor" href="#some-modeling-techniques"><span>Some Modeling Techniques</span></a></h2><h3 id="linearization" tabindex="-1"><a class="header-anchor" href="#linearization"><span>Linearization</span></a></h3><p>Sometimes we encounter modeling problems with multiple subscripts, such as decision variables $x_{ij}$, where $i$ and $j$ are indices. In such cases, linearization encoding is necessary.</p><p>Suppose the decision variable itself has a shape of 3 rows and 4 columns, i.e.:</p><table><thead><tr><th>Col 1</th><th>Col 2</th><th>Col 3</th><th>Col 4</th></tr></thead><tbody><tr><td>$x_{11}$</td><td>$x_{12}$</td><td>$x_{13}$</td><td>$x_{14}$</td></tr><tr><td>$x_{21}$</td><td>$x_{22}$</td><td>$x_{23}$</td><td>$x_{24}$</td></tr><tr><td>$x_{31}$</td><td>$x_{32}$</td><td>$x_{33}$</td><td>$x_{34}$</td></tr></tbody></table><p>Suppose the objective function wants to sum these decision variables, i.e. $F=\\sum_{i=1}^3\\sum_{j=1}^4x_{ij}$. If you want to input this into the objective function, you can linearize it as $x_{11}+x_{12}+...+x_{14}+x_{21}+...+x_{24}+x_{31}+...+x_{34}$.</p><p>Since there are only two dimensions, you can use two <code>for</code> loops to achieve this:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">do</span> <span class="token comment">-- First dimension</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- Second dimension</span></span>
<span class="line">        cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- Fill in the coefficient</span></span>
<span class="line">        <span class="token comment">-- The idea here is similar to carrying in arithmetic</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="example-assignment-model" tabindex="-1"><a class="header-anchor" href="#example-assignment-model"><span>Example: Assignment Model</span></a></h4><p>Now let&#39;s look at the specific usage of multi-dimensional linearization and its convenience using a practical example.</p><p><strong>People A, B, C, and D deliver goods A, B, C, and D, respectively. The required time is shown in the table below. If each person delivers only one type of goods, which person should be assigned to deliver which type of goods to minimize the total time?</strong></p><table><thead><tr><th>Person\\Item</th><th>A</th><th>B</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>A</td><td>14</td><td>9</td><td>4</td><td>15</td></tr><tr><td>B</td><td>11</td><td>7</td><td>9</td><td>10</td></tr><tr><td>C</td><td>13</td><td>2</td><td>10</td><td>5</td></tr><tr><td>D</td><td>17</td><td>9</td><td>15</td><td>13</td></tr></tbody></table><p>Assuming goods A, B, C, D correspond to indices 1, 2, 3, 4, respectively, let $x_{ij}=1$ represent person <code>i</code> delivering goods <code>j</code>, and $x_{ij}=0$ represent person <code>i</code> not delivering goods <code>j</code>.</p><p>The mathematical model for the above problem can be represented as</p><p>$$ minZ=\\sum_{i=1}^4\\sum_{j=1}^4c_{ij}x_{ij}\\ s.t.\\left{\\begin{matrix} \\sum_{j=1}^4x_{ij}=1, i=1,2,...,4 \\<br> \\sum_{i=1}^4x_{ij}=1, j=1,2,...,4 \\ x_{ij}=0,1 \\end{matrix}\\right. $$</p><p>Solution code</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- Efficiency matrix</span></span>
<span class="line"><span class="token keyword">local</span> cost <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> mip <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">newmip</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Create the objective function</span></span>
<span class="line"><span class="token keyword">local</span> coeff <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token comment">-- Easily convert the 2D array to a 1D array here</span></span>
<span class="line">        coeff<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>coeff<span class="token punctuation">,</span> <span class="token string">&quot;min&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Add constraints</span></span>
<span class="line"><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- Control the value of the first dimension</span></span>
<span class="line">    <span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> i <span class="token operator">==</span> k <span class="token keyword">then</span> <span class="token comment">-- Sum for j, check i</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>cons<span class="token punctuation">,</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- Control the value of the second dimension</span></span>
<span class="line">    <span class="token keyword">local</span> cons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span></span>
<span class="line">            <span class="token keyword">if</span> j <span class="token operator">==</span> k <span class="token keyword">then</span> <span class="token comment">-- Sum for i, check j</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">else</span></span>
<span class="line">                cons<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">            <span class="token keyword">end</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">    mip<span class="token punctuation">:</span><span class="token function">addrow</span><span class="token punctuation">(</span>cons<span class="token punctuation">,</span> <span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Solve the model</span></span>
<span class="line">mip<span class="token punctuation">:</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Output the value of the objective function</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Objective function value:&quot;</span><span class="token punctuation">,</span> mip<span class="token punctuation">[</span><span class="token string">&#39;obj&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- Output the decision variables</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- First dimension</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">do</span> <span class="token comment">-- Second dimension</span></span>
<span class="line">        <span class="token keyword">local</span> x <span class="token operator">=</span> mip<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span> <span class="token operator">..</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">if</span> x <span class="token operator">~=</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;x[&quot;</span> <span class="token operator">..</span> i <span class="token operator">..</span> <span class="token string">&quot;][&quot;</span> <span class="token operator">..</span> j <span class="token operator">..</span> <span class="token string">&quot;]=&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">end</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output</p><div class="language-less line-numbers-mode" data-highlighter="prismjs" data-ext="less" data-title="less"><pre><code><span class="line">Objective function <span class="token property">value</span><span class="token punctuation">:</span> 29.0</span>
<span class="line">x[1][3]= 1.0</span>
<span class="line">x[2][1]= 1.0</span>
<span class="line">x[3][4]= 1.0</span>
<span class="line">x[4][2]= 1.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Online Execution</p><p>Check this <a href="https://microcity.github.io/#s445tk" target="_blank" rel="noopener noreferrer">example</a> in MicroCityWeb</p></div><table><thead><tr><th>Result</th><th>Person</th><th>Item</th></tr></thead><tbody><tr><td>$x_{13}=1$</td><td>A</td><td>C</td></tr><tr><td>$x_{21}=1$</td><td>B</td><td>A</td></tr><tr><td>$x_{34}=1$</td><td>C</td><td>D</td></tr><tr><td>$x_{42}=1$</td><td>D</td><td>B</td></tr></tbody></table><h3 id="handling-intermediate-variables" tabindex="-1"><a class="header-anchor" href="#handling-intermediate-variables"><span>Handling Intermediate Variables</span></a></h3><p>Sometimes, there are intermediate variables in a model that must have corresponding positions in the matrix to be solved, and these intermediate variables do not participate in the calculation of the objective function value. <strong>The coefficients of the intermediate variables at their corresponding positions can be set to 0.</strong></p><p>Suppose $x_1, x_2, x_3, x_4$ are decision variables, and $y_1, y_2$ are intermediate variables. The objective function is:</p><p>$$ z=\\sum_{i=1}^4x_i $$</p><p>The coefficients of the objective function can be set as follows:</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> fcons <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">-- The first 4 elements correspond to decision variables,</span></span>
<span class="line"><span class="token comment">-- and the last 2 elements correspond to intermediate variables</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Afterward, you can proceed with the general process 😎</p>`,48))])}const h=c(m,[["render",k],["__file","mip.html.vue"]]),g=JSON.parse('{"path":"/en/notes/mip.html","title":"Mixed integer programming","lang":"en-US","frontmatter":{"description":"Mixed integer programming Mixed-Integer Programming (MIP) is a powerful mathematical optimization technique used to solve problems where some of the decision variables are requi...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://huuhghhgyg.github.io/MicroCityNotes/notes/mip.html"}],["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/en/notes/mip.html"}],["meta",{"property":"og:site_name","content":"MicroCity Notes"}],["meta",{"property":"og:title","content":"Mixed integer programming"}],["meta",{"property":"og:description","content":"Mixed integer programming Mixed-Integer Programming (MIP) is a powerful mathematical optimization technique used to solve problems where some of the decision variables are requi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T09:39:41.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-09T09:39:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mixed integer programming\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T09:39:41.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Creating a Mixed-Integer Programming Model","slug":"creating-a-mixed-integer-programming-model","link":"#creating-a-mixed-integer-programming-model","children":[]},{"level":2,"title":"Setting the Objective Function","slug":"setting-the-objective-function","link":"#setting-the-objective-function","children":[]},{"level":2,"title":"Adding Constraints","slug":"adding-constraints","link":"#adding-constraints","children":[{"level":3,"title":"Adding Constraint Equations","slug":"adding-constraint-equations","link":"#adding-constraint-equations","children":[]},{"level":3,"title":"Setting Variable Types","slug":"setting-variable-types","link":"#setting-variable-types","children":[]}]},{"level":2,"title":"Model Solution and Output","slug":"model-solution-and-output","link":"#model-solution-and-output","children":[{"level":3,"title":"Model Solution","slug":"model-solution","link":"#model-solution","children":[]},{"level":3,"title":"Output","slug":"output","link":"#output","children":[]}]},{"level":2,"title":"Some Modeling Techniques","slug":"some-modeling-techniques","link":"#some-modeling-techniques","children":[{"level":3,"title":"Linearization","slug":"linearization","link":"#linearization","children":[]},{"level":3,"title":"Handling Intermediate Variables","slug":"handling-intermediate-variables","link":"#handling-intermediate-variables","children":[]}]}],"git":{"updatedTime":1717925981000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":5,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"en/notes/mip.md","autoDesc":true,"excerpt":"\\n<p>Mixed-Integer Programming (MIP) is a powerful mathematical optimization technique used to solve problems where some of the decision variables are required to be integers. This article provides a step-by-step guide on creating and solving MIP models using Lua programming language in the context of MicroCity Web.</p>"}');export{h as comp,g as data};
