import{_ as n}from"./icon_script_editor-ibm_2NsU.js";import{_ as a,o as s,c as t,e as p}from"./app-7jh3jpmO.js";const e={},o=p('<h1 id="_4-7-离散事件模拟" tabindex="-1"><a class="header-anchor" href="#_4-7-离散事件模拟" aria-hidden="true">#</a> 4.7 离散事件模拟</h1><p>MicroCity具有内部模拟时间计数和事件调度机制。它提供了几个嵌入式Lua函数，以便更容易地创建<strong>离散事件模拟</strong>，这对于动态系统分析非常有用。本章的示例代码可以在 <img src="'+n+`" alt="图标"><strong>ScriptEditor</strong> 中 <strong>Project</strong> 选项卡的&quot;simulation_samples&quot;文件夹中找到。</p><h2 id="随机数生成" tabindex="-1"><a class="header-anchor" href="#随机数生成" aria-hidden="true">#</a> 随机数生成</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_01&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个二进制分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_real&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个均匀分布的实数随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_int&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个均匀分布的整数随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;triangle&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个三角形分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;bernoulli&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个伯努利分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;cauchy&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> median <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个柯西分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;exponential&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> lambda <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个指数分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;geometric&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个几何分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;normal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个正态分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;lognormal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从种子创建一个对数正态分布的随机生成引擎，并返回该对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetNextRandom</span><span class="token punctuation">(</span>Engine<span class="token punctuation">)</span>
</code></pre></div><p>从随机生成引擎获取一个随机数。</p><h2 id="模拟控制" tabindex="-1"><a class="header-anchor" href="#模拟控制" aria-hidden="true">#</a> 模拟控制</h2><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateEvent</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> Function <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>从<strong>Lua函数</strong>或<strong>Lua协程</strong>创建一个未来事件。返回一个<strong>协程</strong>对象。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">ExecAllEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>最后调用此函数。它将执行所有事件作为<strong>Lua协程</strong>。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">[</span>relativeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>在<strong>Lua协程</strong>中调用此函数将使其首先暂停，然后在指定的相对时间后恢复。如果未设置<strong>relativeTime</strong>参数，则当前<strong>协程</strong>将暂停，并且不会自动恢复。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">Resume</span><span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> <span class="token punctuation">]</span> Coroutine <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>立即或在指定时间恢复一个已暂停的协程。</p><div class="language-lua" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetSimTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>返回当前模拟时间。</p>`,36),c=[o];function u(l,i){return s(),t("div",null,c)}const d=a(e,[["render",u],["__file","4.7_des_simulations_zh.html.vue"]]);export{d as default};
