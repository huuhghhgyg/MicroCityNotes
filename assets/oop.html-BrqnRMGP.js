import{_ as p}from"./RMGObjects-CVHi2lF3.js";import{_ as e,c as t,e as o,b as l,a as s,f as c,g as i,r as u,o as r}from"./app-Bq8cTqK8.js";const d={};function k(m,n){const a=u("RouteLink");return r(),t("div",null,[n[3]||(n[3]=o('<h1 id="面向对象编程" tabindex="-1"><a class="header-anchor" href="#面向对象编程"><span>面向对象编程</span></a></h1><p>面向对象编程（Object Oriented Programming）是一种编程思想，它将真实世界中的事物抽象成程序世界中的对象，对象之间通过消息传递进行通信，从而构成程序的功能。</p><p><img src="'+p+`" alt="堆场对象"></p><p>网上说的面向对象编程具有三大特征，即封装、继承和多态。但是我认为在这个仿真中用得最多的就是封装，继承和多态用的机会很少。此外，我暂时还没有在MicroCity中实现过对象的消息传递，如果实现了会继续更新本文。因此下面主要介绍一下如何在适用于MicroCity的lua代码中使用封装。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文中的代码示例适用于MicroCityWeb，对于桌面版的MicroCity不一定适用。此外，本文均为个人感悟，不保证概念绝对的正确性。</p></div><h2 id="面向对象编程的基本概念" tabindex="-1"><a class="header-anchor" href="#面向对象编程的基本概念"><span>面向对象编程的基本概念</span></a></h2><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h3><p>通俗来说，<strong>类是对象的模板，对象是类的实例（实体）。</strong></p><p>类是面向对象编程的基本概念，它是对一类事物的抽象。类的概念可以理解为一类对象，比如AGV、货架、场桥等。你可以把类理解为一类事物的模板，而对象则是根据这个模板创建出来的具体的事物。</p><p>一个比较好的例子是上面提到的货架。货架是一个类，那么具体的货架就是一个对象。货架类中包含了货架的各种属性，比如货架的位置，装载的货物等。通过货架类创建出来的不同的货架对象都属于货架类，比如货架1、货架2等，尽管它们的属性可能不同，但是它们都是货架类的对象。</p><h3 id="类的属性和方法" tabindex="-1"><a class="header-anchor" href="#类的属性和方法"><span>类的属性和方法</span></a></h3><p>在MicroCity的仿真中，就我个人遇到的情况而言，类一般会有属性，但是不一定会有方法。延续上面举的货架的例子来说，属性是类的特征，比如货架的位置、货架上的货物等。方法是类的行为，通常使用函数体现，比如AGV将货架抬起、放下、AGV移动或者带动货架移动。</p><h2 id="仿真中使用面向对象的优点和缺点" tabindex="-1"><a class="header-anchor" href="#仿真中使用面向对象的优点和缺点"><span>仿真中使用面向对象的优点和缺点</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><p>在MicroCity中，就涉及到多个同类物体移动、播放物体移动动画等场景而言（如AGV、货架、场桥移动等），需要进行比较大量的坐标计算和位置设置。如果对每个对象都实现一次，那么修改各个对象坐标的代码将会非常冗长，而且不易于维护。<strong>如果使用面向对象的编程思想，可以将数据处理的代码封装成一个个的对象，也能使代码更加更具有可读性和可维护性。</strong></p><p>此外，如果在场景中创建多个同类对象，各个对象的参数也可能各不相同。如果使用面向对象的方法封装，可以将各个对象的参数封装在各个对象自身中。当仿真流程或者规模变得复杂时，<strong>能够增加代码的复用性。</strong></p><p>对于仿真来说，最重要的是搞清楚仿真的业务流程和业务逻辑。<strong>使用面向对象编程可以使仿真的业务流程和业务逻辑体现得更清晰，使代码的可读性提高，更具有可维护性。</strong> 此外，当需要修改一类对象的业务逻辑时，只需要进入类中修改即可。比如修改一个港口中所有场桥的调度算法，由于所有场桥共用一套调度算法，因此只需要修改一次即可。</p><p>就我个人的情况而言，采用面向对象的方法封装对象时大多是希望创建一个通用的对象，然后在后续的仿真中通过自动或手动的方式创建多个同类对象，而各个对象的参数各不相同。这么做会使得代码通用性增加，而且也能够使得代码更加易懂，为后续的维护和修改提供便利，为大规模的仿真打下基础。</p><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><p><strong>如果仿真规模很小，代码量不大的简单的操作，不建议使用面向对象的方法封装代码。</strong> 使用面向对象的方法会增加代码行数，甚至会使代码看起来显得比原问题更加复杂。（当然你要用也不会有什么后果，只是看起来会比较奇怪而已）具体可以参考下文提供的代码示例，不难发现，代码主要篇幅用在描述类及其业务逻辑上，而业务流程的代码很简单，且占比很小。</p><h2 id="面向对象在lua中的实现" tabindex="-1"><a class="header-anchor" href="#面向对象在lua中的实现"><span>面向对象在Lua中的实现</span></a></h2><p>在Lua中，面向对象的概念通常使用table实现。table是Lua中的一种数据结构，它可以用来表示数组、字典、对象等。在面向对象的编程中，table也可以用来表示对象。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>由于MicroCity中创建的对象都是table，因此我们可以在创建对象时，将对象的属性直接封装在table中，然后返回这个table。</p><p>下面是一个例子：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 函数将返回一个AGV对象</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">AGV</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 在MicroCity中创建一个AGV的3d对象</span></span>
<span class="line">    <span class="token keyword">local</span> agv <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;/res/agv.glb&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 设置对象的属性</span></span>
<span class="line">    agv<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment">-- 设置对象的位置</span></span>
<span class="line">    agv<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- 设置对象的速度</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> agv<span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> dz<span class="token punctuation">)</span></span>
<span class="line">        agv<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span>agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dy<span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dz<span class="token punctuation">}</span> <span class="token comment">-- 修改对象坐标</span></span>
<span class="line"></span>
<span class="line">        agv<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 设置对象位置</span></span>
<span class="line">        scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 渲染场景，不建议在这里调用，这里只是为了演示</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> agv <span class="token comment">-- 返回对象</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 对象的使用</span></span>
<span class="line"><span class="token keyword">local</span> obj <span class="token operator">=</span> <span class="token function">AGV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--创建对象</span></span>
<span class="line">obj<span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">--对象向x方向移动1个单位</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者你也可以选择在创建对象后，将对象的封装在一个table中，然后返回这个table。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 函数将返回一个AGV对象</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">AGV</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- 直接在要返回的table中设置对象属性</span></span>
<span class="line">    <span class="token keyword">local</span> agv <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        object <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&#39;/res/agv.glb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        position <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        speed <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> agv<span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> dz<span class="token punctuation">)</span></span>
<span class="line">        agv<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span>agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dy<span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dz<span class="token punctuation">}</span> <span class="token comment">-- 修改对象坐标</span></span>
<span class="line"></span>
<span class="line">        agv<span class="token punctuation">.</span>object<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span>agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> agv<span class="token punctuation">.</span>position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">-- 设置对象位置</span></span>
<span class="line">        scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 渲染场景，不建议在这里调用，这里只是为了演示</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> agv <span class="token comment">-- 返回对象</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 对象的使用</span></span>
<span class="line"><span class="token keyword">local</span> agv <span class="token operator">=</span> <span class="token function">AGV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--创建对象</span></span>
<span class="line">agv<span class="token punctuation">:</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">--对象向x方向移动1个单位</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种创建对象的方法是使用<code>setmetatable</code>，这属于高级用法，但是感觉用到的场景不多后来我也用得比较少了。但是使用这种方法好像可以实现类的继承，如果你感兴趣可以自行搜索。这里提供我早期作业中创建货架类的代码实现供参考。（现在感觉这个类写得不算很好😂，比如 <code>x</code>,<code>y</code> 可以用 <code>pos = {x, y}</code> 代替，<code>x_origin</code> 和 <code>y_origin</code> 可以使用 <code>origin = {x, y}</code> 代替）</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token comment">-- 货架</span></span>
<span class="line">Shelf <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    cargo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;box&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">-- 货物</span></span>
<span class="line">    x_origin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">-- 货架原始x坐标</span></span>
<span class="line">    y_origin <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">-- 货架原始y坐标</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> Shelf<span class="token punctuation">:</span><span class="token function">New</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> self <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">setmetatable</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        __index <span class="token operator">=</span> Shelf</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self</span>
<span class="line"></span>
<span class="line">    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x</span>
<span class="line">    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y</span>
<span class="line">    <span class="token comment">-- 设置原始坐标</span></span>
<span class="line">    self<span class="token punctuation">.</span>x_origin <span class="token operator">=</span> x</span>
<span class="line">    self<span class="token punctuation">.</span>y_origin <span class="token operator">=</span> y</span>
<span class="line">    <span class="token keyword">return</span> self</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类的类型" tabindex="-1"><a class="header-anchor" href="#类的类型"><span>类的类型</span></a></h2><p>我在这里还想总结一下在港口仿真中我创建过的类主要有什么类型。</p><ol><li><strong>3D实体类。</strong> 主要控制3D实体的运动，如AGV、场桥等，它们大多具有实体且需要移动。有的甚至还包含子对象，比如场桥对象具有吊具、绳索、吊车等子对象。</li><li><strong>数据模型。</strong> 比如堆场，货架、货物。具体来说比如堆场类中包含堆场的长宽、堆场中的货物、堆场中的集装箱等数据。</li></ol><p>需要注意的是，我认为这些类型也不是严格区分的，某些类甚至共同具有这些类的特性，严格区分这个类属于哪种类型也没有太大意义。比如AGV类中也包含了AGV的位置、速度等数据，而货架类只是存储了货架模型，货架模型的移动还是交由AGV控制，而其更重要的功能是记录货架上货物的信息。因此，我认为这些类型只是一种大致的划分，具体的实现还是要根据实际业务流程和需求情况来。</p><h2 id="其他示例" tabindex="-1"><a class="header-anchor" href="#其他示例"><span>其他示例</span></a></h2>`,35)),l("p",null,[n[1]||(n[1]=s("对于 MicroCity Web，比较复杂的示例还可以参考 Gallery 部分的")),c(a,{to:"/notes/gallery/build-an-elevator.html"},{default:i(()=>n[0]||(n[0]=[s("构建电梯仿真模型")])),_:1}),n[2]||(n[2]=s("，其中比较详细地介绍了 Queue、Person、Elevator 类的构建及其复用。"))])])}const h=e(d,[["render",k],["__file","oop.html.vue"]]),g=JSON.parse('{"path":"/notes/oop.html","title":"面向对象编程","lang":"zh-CN","frontmatter":{"description":"面向对象编程 面向对象编程（Object Oriented Programming）是一种编程思想，它将真实世界中的事物抽象成程序世界中的对象，对象之间通过消息传递进行通信，从而构成程序的功能。 堆场对象 网上说的面向对象编程具有三大特征，即封装、继承和多态。但是我认为在这个仿真中用得最多的就是封装，继承和多态用的机会很少。此外，我暂时还没有在Micr...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://huuhghhgyg.github.io/MicroCityNotes/en/notes/oop.html"}],["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/notes/oop.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"面向对象编程"}],["meta",{"property":"og:description","content":"面向对象编程 面向对象编程（Object Oriented Programming）是一种编程思想，它将真实世界中的事物抽象成程序世界中的对象，对象之间通过消息传递进行通信，从而构成程序的功能。 堆场对象 网上说的面向对象编程具有三大特征，即封装、继承和多态。但是我认为在这个仿真中用得最多的就是封装，继承和多态用的机会很少。此外，我暂时还没有在Micr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-23T03:03:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-23T03:03:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-23T03:03:04.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"面向对象编程的基本概念","slug":"面向对象编程的基本概念","link":"#面向对象编程的基本概念","children":[{"level":3,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[]},{"level":3,"title":"类的属性和方法","slug":"类的属性和方法","link":"#类的属性和方法","children":[]}]},{"level":2,"title":"仿真中使用面向对象的优点和缺点","slug":"仿真中使用面向对象的优点和缺点","link":"#仿真中使用面向对象的优点和缺点","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"面向对象在Lua中的实现","slug":"面向对象在lua中的实现","link":"#面向对象在lua中的实现","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"类的类型","slug":"类的类型","link":"#类的类型","children":[]},{"level":2,"title":"其他示例","slug":"其他示例","link":"#其他示例","children":[]}],"git":{"updatedTime":1724382184000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":4,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"notes/oop.md","autoDesc":true,"excerpt":"\\n<p>面向对象编程（Object Oriented Programming）是一种编程思想，它将真实世界中的事物抽象成程序世界中的对象，对象之间通过消息传递进行通信，从而构成程序的功能。</p>\\n<p></p>\\n<p>网上说的面向对象编程具有三大特征，即封装、继承和多态。但是我认为在这个仿真中用得最多的就是封装，继承和多态用的机会很少。此外，我暂时还没有在MicroCity中实现过对象的消息传递，如果实现了会继续更新本文。因此下面主要介绍一下如何在适用于MicroCity的lua代码中使用封装。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文中的代码示例适用于MicroCityWeb，对于桌面版的MicroCity不一定适用。此外，本文均为个人感悟，不保证概念绝对的正确性。</p>\\n</div>"}');export{h as comp,g as data};
