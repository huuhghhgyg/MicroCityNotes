import{_ as o,r as c,o as i,c as u,a as s,b as n,d as e,w as p,e as a}from"./app.d4b017a1.js";const l="/MicroCityNotes/assets/two_way.db10fb1f.svg",d={},k=a('<h1 id="操作网络" tabindex="-1"><a class="header-anchor" href="#操作网络" aria-hidden="true">#</a> 操作网络</h1><h2 id="网络拓补化" tabindex="-1"><a class="header-anchor" href="#网络拓补化" aria-hidden="true">#</a> 网络拓补化</h2><p>网络拓补化简单来说就是一个网络有节点，有节点之间的连线。如果把连线理解为道路，那么你需要解决以下问题：</p><ol><li>这条路是单向通行的还是双向通行？</li><li>这条路的起点是哪？终点是哪？</li></ol><p>一般认为一个网络图中，每条道路都是单向的。如果需要一条双向通行的道路，只需要反向添加一条道路即可。像这样： <img src="'+l+'" alt="双向通行"> 这样，每条路就有了通行方向。一般规定出发点的符号为O，目的点的符号为D，这样，使用O和D就能清晰地描述每条路的方向。</p><p>对于上图的示例，上方的道路O=1，D=2，所以方向描述为从1到2；下方的道路O=2，D=1，方向描述为从2到1。</p><h2 id="使用函数对网络进行拓补" tabindex="-1"><a class="header-anchor" href="#使用函数对网络进行拓补" aria-hidden="true">#</a> 使用函数对网络进行拓补</h2>',7),r=a(`<p>此处简单列举几种创建MicroCity中网络对象的方法：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> network <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个空网络对象并返回此对象。<code>network</code>就是返回得到的空网络对象。</p><p>创建对象后，可以使用<code>AddLink</code>和<code>DelLink</code>等函数在网络对象中创建连接。具体用法见参考文档。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> network<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> links <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span>Lines<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处的<code>Lines</code>为一个矢量图形对象，类型为<code>Line</code>。MicroCity中的<code>CreateNetwork()</code>函数在这种用法中可以直接帮你在道路连线上添加起点和终点，并自动在返回的<code>links</code>对象中标上O点和D点的编号。</p><p>也就是说，你只需要提供网络连线即可，剩下的拓补化工作可以由函数自动完成。我认为这可能是最常用的创建网络图并进行拓补化的方法。</p><h2 id="网络拓补的简单示例" tabindex="-1"><a class="header-anchor" href="#网络拓补的简单示例" aria-hidden="true">#</a> 网络拓补的简单示例</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 打开连线图层</span>
Shapes <span class="token operator">=</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;Shapes.shp&quot;</span><span class="token punctuation">)</span>

<span class="token comment">-- 拓补化网络</span>
network<span class="token punctuation">,</span> network_nodes<span class="token punctuation">,</span> network_links <span class="token operator">=</span> <span class="token function">CreateNetwork</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">)</span>

<span class="token comment">-- 创建图层，用于存放拓补后的网络节点</span>
Nodes <span class="token operator">=</span> <span class="token function">CreateShapes</span><span class="token punctuation">(</span><span class="token string">&quot;Nodes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;point&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 将拓补化网络得到的网络节点复制到图层中</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>network_nodes<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>network_nodes<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 创建图层，用于存放拓补后的网络连线</span>
Links <span class="token operator">=</span> <span class="token function">CreateShapes</span><span class="token punctuation">(</span><span class="token string">&quot;Links&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;line&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- 将网络连线中原有的属性字段复制到图层中</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetFieldCount</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token function">GetField</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token comment">-- 为连线添加属性字段，稍后会通过函数将对应的数据添加到其中</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;IMPEDANCE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--阻抗</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;DIRECTION&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> <span class="token comment">--方向</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;CAPACITY&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--容量</span>
<span class="token comment">-- 将拓补化网络得到的网络线路复制到图层中（包括对应数据）</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">GetRecCount</span><span class="token punctuation">(</span>network_links<span class="token punctuation">)</span> <span class="token keyword">do</span>
	<span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">GetShape</span><span class="token punctuation">(</span>network_links<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 更新图层</span>
<span class="token function">Update</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">)</span>
<span class="token function">Update</span><span class="token punctuation">(</span>Links<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>示例改自MicroCity自带的编辑器</p></blockquote><p>虽然一开始就输入了网络连线，但是在拓补化的过程中可能由于连线上的节点重合，在拓补化的过程中会把连续的连线拆成多段，因此得到的<code>Links</code>图层可能与输入的图层存在不同。而拓补化得到的节点<code>Nodes</code>和得到的连线<code>Links</code>是对应的，因此推荐使用拓补化处理完的Links图层作为网络节点之间的连线。</p><h3 id="踩坑经验-创建网络对象" tabindex="-1"><a class="header-anchor" href="#踩坑经验-创建网络对象" aria-hidden="true">#</a> 踩坑经验：创建网络对象</h3><p>如果需要使用<code>CreateNetwork(Nodes, Links)</code>函数再次建立网络，需要保留以下在拓补化过程中添加的属性，否则将会出现网络初始化错误的问题：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;ID&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;IMPEDANCE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--阻抗</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;DIRECTION&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span> <span class="token comment">--方向</span>
<span class="token function">AddField</span><span class="token punctuation">(</span>Links<span class="token punctuation">,</span> <span class="token string">&quot;CAPACITY&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;double&quot;</span><span class="token punctuation">)</span> <span class="token comment">--容量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只是一次性地进行网络拓补，不会再用拓补化过的网络重新创建网络对象，也需要先创建以上属性。拓补化后数据并不会根据属性名称填入，而是根据位置填入。</p><p>如果只创建了<code>O</code>和<code>D</code>两个属性，则<code>O</code>的属性中会被填入<code>ID</code>数据，而<code>D</code>的属性中会被填入<code>O</code>的数据。而如果只根据上面的顺序创建了<code>ID</code>、<code>O</code>、<code>D</code>三个属性，由于数据顺序根据位置填入，则最终的填入的数据是正确的。</p><h3 id="copyshapeto函数" tabindex="-1"><a class="header-anchor" href="#copyshapeto函数" aria-hidden="true">#</a> CopyShapeTo函数</h3><p>拓补的操作中使用了<code>CopyShapeTo()</code>函数，其作用是将一个<code>Shape</code>对象复制到<code>Shapes</code>图层中的对应位置，并根据输入的<code>dx</code>和<code>dy</code>在<code>Shapes</code>图层中进行位置变换。其中，<code>dx</code>和<code>dy</code>分别为在<code>x</code>和<code>y</code>方向上的位移量（理解为deltax和deltay）。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>TargetShapes<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> Shape1 <span class="token punctuation">[</span><span class="token punctuation">,</span> Shape2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据函数的用法可以看到，还支持复制到多个图层上的对应位置后再进行变换。 如果只想将图形复制到对应图层的对应位置，而不进行变换，可以将<code>dx</code>和<code>dy</code>设为<code>0</code>，像这样：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CopyShapeTo</span><span class="token punctuation">(</span>TargetShapes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Shape1 <span class="token punctuation">[</span><span class="token punctuation">,</span> Shape2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),v=s("code",null,"CopyShapeTo()",-1),m=a(`<h2 id="网络拓补化后算法的使用" tabindex="-1"><a class="header-anchor" href="#网络拓补化后算法的使用" aria-hidden="true">#</a> 网络拓补化后算法的使用</h2><p>对网络进行拓补化后，可以使用自带的函数求解很多问题，如：最短路径生成树、最短路径、最短距离等。本文以计算最短路径和最短路长为例介绍一下计算最短路径的流程及踩过的坑</p><h3 id="计算最短路径和最短路长" tabindex="-1"><a class="header-anchor" href="#计算最短路径和最短路长" aria-hidden="true">#</a> 计算最短路径和最短路长</h3><p>要计算最短路径，首先必须要清楚计算网络中哪两个点之间的最短路径。这里以<code>startID</code>和<code>endID</code>分别表示起点和终点。本文假设你已经创建了网络对象，并存入名为<code>Network</code>的变量中。如果你不知道该如何创建一个网络图，可以参考上方介绍的 <a href="#%E7%BD%91%E7%BB%9C%E6%8B%93%E8%A1%A5%E5%8C%96">网络拓补化</a> 流程。</p><h4 id="创建最小生成树" tabindex="-1"><a class="header-anchor" href="#创建最小生成树" aria-hidden="true">#</a> 创建最小生成树</h4><p><strong>第一步</strong>，先要以<code>startID</code>为开始点创建最短路径生成树。理论上以始点创建最短路径生成树后，就可以获取始点到网络上任意一点的最短距离。创建最短路径生成树可以调用<code>GenSTPTree()</code>函数实现。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GenSTPTree</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID <span class="token punctuation">[</span><span class="token punctuation">,</span> endID<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此处的endID不是必须的，如果有可以提供给函数。也就是说，您共有两种做法实现这一步：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GenSTPTree</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID<span class="token punctuation">)</span> <span class="token comment">--方法1</span>
<span class="token function">GenSTPTree</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID <span class="token punctuation">,</span> endID<span class="token punctuation">)</span> <span class="token comment">--方法2（建议）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般认为提供的信息越完备，执行的效果越好。由于在计算最短路径之前就知道<code>endID</code>，因此建议将其提供给函数。</p><blockquote><p>此处已经对函数的这种中括号写法进行了解释，后文中将会直接使用这种写法。</p></blockquote><p><strong>第二步</strong>，获取最短路径对应的信息。前面提到，确定起点和终点后才能确定两点之间的最短线路。由于前面使用始点<code>startID</code>创建了最小生成树，因此现在只需要提供终点<code>endID</code>就能获取到最短路径和最短路长。下面介绍了使用网络对象<code>Network</code>获取最短路长和最短路径的方法。</p><h4 id="获取最短路长" tabindex="-1"><a class="header-anchor" href="#获取最短路长" aria-hidden="true">#</a> 获取最短路长</h4><p>MicroCity的文档中提供了3种获取最短路径的方式。</p><p><strong>第一种</strong>，由于前面计算了最短路径生成树，已经输入了起始点的信息。因此现在只需要提供终点信息即可。（即使刚刚可能已经提供了终点信息）函数需要网络对象<code>Network</code>和终点<code>endID</code>用法如下。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>第二种</strong>，通过提供始点<code>startID</code>和终点<code>endID</code>计算两个点在网络上的最短路长。这种用法不要求在计算最短路径前先生成最短路径生成树，可以直接使用。<code>Network</code>为网络对象，用法如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> startID<span class="token punctuation">,</span> endID<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>第三种</strong>，通过提供始点和终点的xy坐标计算两个点在网络上的最短路长。这种用法也不需要在计算最短路径前先生成最短路径生成树，可以直接使用。起点的坐标设为<code>x1</code>，<code>y1</code>；终点的坐标设为<code>x2</code>，<code>y2</code>，<code>Network为</code>网络对象，用法如下：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token function">GetSTPLen</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="获取最短路径" tabindex="-1"><a class="header-anchor" href="#获取最短路径" aria-hidden="true">#</a> 获取最短路径</h4><p>MicroCity的文档中提供了3种信息可供获取，分别为：</p><ol><li>点或线的<strong>ID</strong>序列</li><li>点或线的索引(<strong>index</strong>)序列</li><li>点或线的形状(<strong>Shape</strong>)序列。</li></ol>`,23),b=a(`<p>返回点的序列：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iNodeShp&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回线的序列：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iLinkShp&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就能返回所有点或线的索引序列了。</p><hr><h3 id="踩坑经验-序列" tabindex="-1"><a class="header-anchor" href="#踩坑经验-序列" aria-hidden="true">#</a> 踩坑经验：序列</h3><p>在<a href="./lua">LUA语言快速上手</a>中介绍过LUA中的<strong>集合</strong>，它提供了丰富的特性帮助编写代码。但是没有听说过序列。<strong>序列</strong>是下面这个东西：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">GetCenterXY</span><span class="token punctuation">(</span>Shapes<span class="token punctuation">)</span> <span class="token comment">--借用一下这个函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>里面的<code>x,y</code>就是一个序列。还有这种情况：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetDistance</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token punctuation">[</span><span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">--再次借用一个函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这种情况下，输入的点越多，返回值也越多。如果输入4个点，可以这样处理：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 正常情况</span>
d1<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> d4 <span class="token operator">=</span> <span class="token function">GetDistance</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span>

<span class="token comment">-- 也可以仅取前两个返回值</span>
d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token function">GetDistance</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span>

<span class="token comment">-- 当然，只取一个返回值也可以</span>
d1 <span class="token operator">=</span> <span class="token function">GetDistance</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的函数输入参数数量和输出参数数量是有关系的。如果输入了n个点的参数，就会返回n个点的距离。但是对于网络拓补来说，在返回最短路径的时候返回的都是参数序列，而我并不知道函数会给我传出多少个参数；而且当输出参数的个数太多的时候，也不太可能手动创建很多个变量存放这些参数。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 错误做法：</span>
<span class="token keyword">local</span> indexList <span class="token operator">=</span> <span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iLinkShp&quot;</span><span class="token punctuation">)</span>
<span class="token comment">-- GetSTPPath()函数不会返回一个table</span>
<span class="token comment">-- 这里获取到的indexList只是第一个Link的index，是一个数值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然等号左边没有办法改变，就从等号右边做出改变。还记得怎么定义一个最简单的table吗？</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> list <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>右边的<code>1, 2, 3, 4, 5</code>其实可以看做一个序列。所以，只要给函数的返回值加上括号就能把他们全部捞起来 ( •̀ ω •́ )✧</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> indexList <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">GetSTPPath</span> <span class="token punctuation">(</span>Network<span class="token punctuation">,</span> endID<span class="token punctuation">,</span> <span class="token string">&quot;iLinkShp&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的这种做法得到的<code>indexList</code>就是一个table类型的变量了。然后就可以开始执行集合的各种操作了捏😋</p>`,20);function h(g,f){const t=c("RouterLink");return i(),u("div",null,[k,s("p",null,[n("MicroCity可以处理网络，所有函数的具体用法见参考文档："),e(t,{to:"/docs/4.6_networks.html"},{default:p(()=>[n("4.6 网络")]),_:1})]),r,s("p",null,[v,n("函数的具体用法见 "),e(t,{to:"/docs/4.3_shapes_and_tables.html"},{default:p(()=>[n("4.3 矢量图形和表格")]),_:1})]),m,s("p",null,[n("函数的详细用法请参阅 "),e(t,{to:"/docs/4.6_networks.html#algorithms"},{default:p(()=>[n("4.6 网络 - 算法")]),_:1}),n("，此处仅以第2种：点或线的索引序列作为示例。")]),b])}const x=o(d,[["render",h],["__file","network.html.vue"]]);export{x as default};
