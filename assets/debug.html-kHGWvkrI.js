import{_ as i,e as o,i as a,h as n,g as t,j as l,k as u,r,o as c}from"./app-DUe19ldY.js";const p={};function d(g,e){const s=r("RouteLink");return c(),o("div",null,[e[5]||(e[5]=a(`<h1 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging"><span>Debugging</span></a></h1><p>This page introduces the functions and shortcuts related to debugging MicroCity Web.</p><h2 id="clear-output" tabindex="-1"><a class="header-anchor" href="#clear-output"><span>Clear Output</span></a></h2><p>You can enter commands by right-clicking the output area, and entering <code>print()</code> will clear the content of the output area.</p><h2 id="debugger-shortcuts" tabindex="-1"><a class="header-anchor" href="#debugger-shortcuts"><span>Debugger Shortcuts</span></a></h2><p>During the debugging process, especially at breakpoints, you can use F9 (Step Over), F10 (Step Into), and F11 (Step Out) to control the program execution.</p><ul><li><kbd>F9</kbd> <strong>Step Over</strong>: Skip the current line and execute the next line</li><li><kbd>F10</kbd> <strong>Step Into</strong>: Enter the current line; if the current line is a function call, enter the function body</li><li><kbd>F11</kbd> <strong>Step Out</strong>: Step out of the current function and execute the next line of the function call</li></ul><h2 id="debug-commands" tabindex="-1"><a class="header-anchor" href="#debug-commands"><span>Debug Commands</span></a></h2><h3 id="watch-variables" tabindex="-1"><a class="header-anchor" href="#watch-variables"><span>Watch Variables</span></a></h3><p>Use the <code>debug.watch()</code> command in the console to monitor variables.</p><p>For example, if you want to monitor the value of variable <code>a</code> during debugging, you can use the <code>debug.watch(&#39;a&#39;)</code> command.</p><blockquote><p>You can enter commands by right-clicking the output area</p></blockquote><h3 id="stack-tracing" tabindex="-1"><a class="header-anchor" href="#stack-tracing"><span>Stack Tracing</span></a></h3><p>Use the <code>debug.traceback()</code> function to print the current stack trace information.</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- Some code logic</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>debug<span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span><span class="token string">&quot;Stack trace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">-- Other code logic</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Stack trace</span>
<span class="line">stack traceback:</span>
<span class="line">[string &quot;function myFunction() ...&quot;]:3: in function &#39;myFunction&#39;</span>
<span class="line">[string &quot;function myFunction() ...&quot;]:8: in function &#39;anotherFunction&#39;</span>
<span class="line">[string &quot;function myFunction() ...&quot;]:11: in main chunk</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-state" tabindex="-1"><a class="header-anchor" href="#running-state"><span>Running State</span></a></h3>`,18)),n("ul",null,[n("li",null,[e[1]||(e[1]=n("code",null,"debug.debug()",-1)),e[2]||(e[2]=t(" enters Debug mode. It is often used to enter Debug mode while the program is running. If you want to enter Debug mode at startup, you can right-click on the top ▶️ button. See ")),l(s,{to:"/en/notes/web-ui.html#%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6"},{default:u(()=>e[0]||(e[0]=[t("Introduction to the User Interface - Running State")])),_:1}),e[3]||(e[3]=t(" for more details."))]),e[4]||(e[4]=n("li",null,[n("code",null,"debug.pause()"),t(" pauses the program. The top run button ▶️ will light up, and the pause button ⏸️ will go out.")],-1))]),e[6]||(e[6]=a('<h2 id="other-debugging-commands" tabindex="-1"><a class="header-anchor" href="#other-debugging-commands"><span>Other Debugging Commands</span></a></h2><p>Most of Lua&#39;s Debug functions are applicable to MicroCity Web. You can refer to:</p><ul><li><a href="https://www.lua.org/manual/5.4/manual.html#6.10" target="_blank" rel="noopener noreferrer">The Debug Library | Lua 5.4 Reference Manual</a></li><li><a href="https://www.runoob.com/lua/lua-debug.html" target="_blank" rel="noopener noreferrer">Lua Debugging | Runoob Tutorial</a></li></ul><h2 id="file-saving" tabindex="-1"><a class="header-anchor" href="#file-saving"><span>File Saving</span></a></h2><p>When saving files in MicroCity Web, you can choose to save them as <code>.mw</code> files and <code>.lua</code> files.</p><ul><li><code>.mw</code> file: Packages the entire project, including the currently open code files and files in the virtual disk.</li><li><code>.lua</code> file: Only saves the currently edited code file. It is commonly used for writing Lua scripts only and modifying custom <code>.lua</code> library files.</li></ul><blockquote><p>This post is translated using ChatGPT, please <a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>feedback</strong></a> if any omissions.</p></blockquote>',7))])}const m=i(p,[["render",d],["__file","debug.html.vue"]]),b=JSON.parse('{"path":"/en/notes/debug.html","title":"Debugging","lang":"en-US","frontmatter":{"description":"Debugging This page introduces the functions and shortcuts related to debugging MicroCity Web. Clear Output You can enter commands by right-clicking the output area, and enterin...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://huuhghhgyg.github.io/MicroCityNotes/notes/debug.html"}],["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/en/notes/debug.html"}],["meta",{"property":"og:site_name","content":"MicroCity Notes"}],["meta",{"property":"og:title","content":"Debugging"}],["meta",{"property":"og:description","content":"Debugging This page introduces the functions and shortcuts related to debugging MicroCity Web. Clear Output You can enter commands by right-clicking the output area, and enterin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-15T01:27:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-15T01:27:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Debugging\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-15T01:27:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Clear Output","slug":"clear-output","link":"#clear-output","children":[]},{"level":2,"title":"Debugger Shortcuts","slug":"debugger-shortcuts","link":"#debugger-shortcuts","children":[]},{"level":2,"title":"Debug Commands","slug":"debug-commands","link":"#debug-commands","children":[{"level":3,"title":"Watch Variables","slug":"watch-variables","link":"#watch-variables","children":[]},{"level":3,"title":"Stack Tracing","slug":"stack-tracing","link":"#stack-tracing","children":[]},{"level":3,"title":"Running State","slug":"running-state","link":"#running-state","children":[]}]},{"level":2,"title":"Other Debugging Commands","slug":"other-debugging-commands","link":"#other-debugging-commands","children":[]},{"level":2,"title":"File Saving","slug":"file-saving","link":"#file-saving","children":[]}],"git":{"updatedTime":1705282057000,"contributors":[{"name":"huuhghhgyg","username":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":3,"url":"https://github.com/huuhghhgyg"}],"changelog":[{"hash":"464714b49fc4ea006df9b9c68997cf4648f04375","date":1705282057000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[translate] 更新翻译"},{"hash":"4d1a9900d4a70c33e6133b04661e2a4f8b7331cf","date":1704444462000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[update] 更新翻译"},{"hash":"9a883d457cf277b1fec70d4ecac982fe04451339","date":1701060885000,"email":"huuhghhgyg@outlook.com","author":"huuhghhgyg","message":"[feat] debug en"}]},"filePathRelative":"en/notes/debug.md","autoDesc":true,"excerpt":"\\n<p>This page introduces the functions and shortcuts related to debugging MicroCity Web.</p>\\n<h2>Clear Output</h2>\\n<p>You can enter commands by right-clicking the output area, and entering <code>print()</code> will clear the content of the output area.</p>\\n<h2>Debugger Shortcuts</h2>\\n<p>During the debugging process, especially at breakpoints, you can use F9 (Step Over), F10 (Step Into), and F11 (Step Out) to control the program execution.</p>"}');export{m as comp,b as data};
