import{_ as e}from"./icon_script_editor-ibm_2NsU.js";import{_ as t,r as p,o,c as u,a as n,b as a,d as c,e as l}from"./app-LIY61qJ4.js";const i={},r=l('<h1 id="_4-7-离散事件仿真" tabindex="-1"><a class="header-anchor" href="#_4-7-离散事件仿真" aria-hidden="true">#</a> 4.7 离散事件仿真</h1><p>MicroCity有一个内置的模拟时间计数和事件调度机制。它提供了几个嵌入的Lua函数来方便创建<strong>离散事件仿真</strong>，这对于动态系统分析非常有用。本章的示例代码可以在<strong>项目</strong>选项卡的“simulation_samples”文件夹中的<img src="'+e+`" alt="icon"><strong>ScriptEditor</strong>找到。</p><h2 id="随机数生成" tabindex="-1"><a class="header-anchor" href="#随机数生成" aria-hidden="true">#</a> 随机数生成</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_01&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个二进制分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_real&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从均匀分布的实数随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;uniform_int&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从均匀分布的整数随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;triangle&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从三角分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;bernoulli&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从伯努利分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;cauchy&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> median <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从柯西分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;exponential&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> lambda <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从指数分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;geometric&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从几何分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;normal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从正态分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateRandEng</span> <span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token string">&quot;lognormal&quot;</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> mean <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用种子创建一个服从对数正态分布的随机数生成引擎，并返回该对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetNextRandom</span> <span class="token punctuation">(</span>Engine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从随机数生成引擎中获取一个随机数。</p><h2 id="模拟控制" tabindex="-1"><a class="header-anchor" href="#模拟控制" aria-hidden="true">#</a> 模拟控制</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateEvent</span> <span class="token punctuation">(</span>time<span class="token punctuation">,</span> Funcion <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从<em>Lua Function</em>或<em>Lua Coroutine</em>创建一个将来的事件，并返回一个<em>Coroutine</em>对象。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">ExecAllEvents</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后调用这个函数。它会将所有事件作为<em>Lua Coroutines</em>执行。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">Delay</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>relativeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在<em>Lua Coroutine</em>中调用这个函数，让它先暂停一段指定的相对时间，然后再恢复执行。如果没有设置参数<em>relativeTime</em>，当前的<em>Coroutine</em>将暂停而不会自动恢复。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">Resume</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>time<span class="token punctuation">,</span> <span class="token punctuation">]</span> Coroutine <span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>立即或在指定的时间恢复一个已暂停的协程。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetSimTime</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回当前的模拟时间。</p>`,36),d={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"反馈",-1);function m(g,v){const s=p("ExternalLinkIcon");return o(),u("div",null,[r,n("blockquote",null,[n("p",null,[a("这篇文章使用ChatGPT翻译自其他语言，如果有问题请在"),n("a",d,[k,c(s)]),a("页面提交反馈。")])])])}const _=t(i,[["render",m],["__file","4.7_des_simulations.html.vue"]]);export{_ as default};
