import{_ as i}from"./icon_script_editor.6508d134.js";import{_ as l,r as n,o as u,c,a,b as e,e as s,w as p,f as d}from"./app.3b61d3c6.js";const r={},m=a("h1",{id:"_4-8-mixed-integer-linear-programming",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_4-8-mixed-integer-linear-programming","aria-hidden":"true"},"#"),e(" 4.8 Mixed Integer Linear Programming")],-1),v={href:"https://sourceforge.net/projects/lpsolve/",target:"_blank",rel:"noopener noreferrer"},g=a("em",null,"lpsolve",-1),b=a("strong",null,"Mixed Integer Linear Programming",-1),k=a("strong",null,"Project",-1),f=a("img",{src:i,alt:"icon"},null,-1),h=a("strong",null,"ScriptEditor",-1),_=d(`<h2 id="model-creation-and-execution" tabindex="-1"><a class="header-anchor" href="#model-creation-and-execution" aria-hidden="true">#</a> Model Creation and Execution</h2><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">CreateLP</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>rows <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Creates a <em>Mixed Integer Linear Programming</em> model and returns the <strong>LPModel</strong> object.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetObjFunction</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;MAX&quot;</span><span class="token operator">|</span><span class="token string">&quot;MIN&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sets the objective function of a <em>LPModel</em> with a <em>Lua Table</em> which stores coefficients of the decision variables.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">AddConstraint</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;&lt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;&gt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> rhsValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Adds a constraint to a <em>LPModel</em> with a <em>Lua Table</em> which stores coefficients of the decision variables.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetInteger</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sets a decision variable specified by the <em>index</em> as an integer variable.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetBinary</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sets a decision variable of a <em>LPModel</em> specified by the <em>index</em> as a binary variable.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetUnbounded</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sets a decision variable of a <em>LPModel</em> to be unbounded(+/- infinity).</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SolveLP</span> <span class="token punctuation">(</span>LPModel <span class="token punctuation">[</span><span class="token punctuation">,</span> timeoutSec <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Solves a <em>LPModel</em> and returns 0 as success, -1 as invalid LP model, -2 as nomemory, 1 as suboptimal, 2 as infeasible, 3 as unbounded, 4 as degenerate, 5 as a numerical failure encountered, 6 as the user abort, 7 as a timeout error, 9 as the model could be solved by presolve, 10 as the B&amp;B routine failed, 11 as the B&amp;B was stopped because of a break-at-first, 12 as a feasible B&amp;B solution was found, 13 as no feasible B&amp;B solution found.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetObjective</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the objective function value of a <em>LPModel</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetVariable</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the value of a decision variable specified by the <em>index</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetVariables</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns all values of the decision variables of a <em>LPModel</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetDual</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the dual value of a decision variable specified by the <em>index</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">GetDuals</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns all dual values of the decision variables of a <em>LPModel</em>.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">ReadLP</span><span class="token punctuation">(</span><span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Reads a <em>LPModel</em> from a file (*.lp, *.mps) and returns the <em>LPModel</em> if succeed.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">WriteLP</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> <span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Writes a <em>LPModel</em> to a file (*.lp, *.mps) and returns true if succeed.</p>`,29),x=a("strong",null,"4.7 Discrete Event Simulations >",-1),L=a("a",{href:"."},[a("strong",null,"Table of Contents")],-1);function P(M,S){const t=n("ExternalLinkIcon"),o=n("RouterLink");return u(),c("div",null,[m,a("p",null,[e("MicroCity employs the "),a("a",v,[g,s(t)]),e(" to takle "),b,e(' problems. Developers can use embedded Lua functions to build and solve models. Sample codes for this chapter can be found in the "optimization_samples" folder of the '),k,e(" Tab in "),f,h,e(".")]),_,a("p",null,[s(o,{to:"/docs/4.7_des_simulations.html"},{default:p(()=>[x]),_:1}),e(" | "),L])])}const w=l(r,[["render",P],["__file","4.8_mixed_integer_programming.html.vue"]]);export{w as default};
