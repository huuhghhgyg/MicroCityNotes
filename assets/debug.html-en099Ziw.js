import{_ as c,r as o,o as l,c as r,a as e,b as n,d as a,w as d,e as i}from"./app-IN4dFWf9.js";const u={},h=i(`<h1 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h1><p>This page introduces the functions and shortcuts related to debugging in MicroCity Web.</p><h2 id="clear-output" tabindex="-1"><a class="header-anchor" href="#clear-output" aria-hidden="true">#</a> Clear Output</h2><p>Right-clicking on the output area allows you to enter commands. Typing <code>print()</code> will clear the contents of the output area.</p><h2 id="debugger-shortcuts" tabindex="-1"><a class="header-anchor" href="#debugger-shortcuts" aria-hidden="true">#</a> Debugger Shortcuts</h2><p>While debugging a program, especially at breakpoints, you can use the following shortcuts to control the program execution:</p><ul><li><kbd>F9</kbd> <strong>Step Over</strong>: Skips the current line and executes the next line.</li><li><kbd>F10</kbd> <strong>Step Into</strong>: Enters the current line. If the current line is a function call, it steps into the function.</li><li><kbd>F11</kbd> <strong>Step Out</strong>: Exits the current function and continues the execution of the line after the function call.</li></ul><h2 id="debug-commands" tabindex="-1"><a class="header-anchor" href="#debug-commands" aria-hidden="true">#</a> Debug Commands</h2><h3 id="watch-variables" tabindex="-1"><a class="header-anchor" href="#watch-variables" aria-hidden="true">#</a> Watch Variables</h3><p>You can use the <code>debug.watch()</code> command in the console to monitor variables.</p><p>For example, if you want to monitor the value of variable <code>a</code> while debugging, you can use the command <code>debug.watch(&#39;a&#39;)</code>.</p><blockquote><p>Right-click on the output area to enter commands.</p></blockquote><h3 id="stack-tracing" tabindex="-1"><a class="header-anchor" href="#stack-tracing" aria-hidden="true">#</a> Stack Tracing</h3><p>The <code>debug.traceback()</code> function can be used to print the current stack trace information.</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">-- Some code logic</span>
    <span class="token function">print</span><span class="token punctuation">(</span>debug<span class="token punctuation">.</span><span class="token function">traceback</span><span class="token punctuation">(</span><span class="token string">&quot;Stack trace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">-- Other code logic</span>
<span class="token keyword">end</span>

<span class="token keyword">function</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Stack trace
stack traceback:
[string &quot;function myFunction() ...&quot;]:3: in function &#39;myFunction&#39;
[string &quot;function myFunction() ...&quot;]:8: in function &#39;anotherFunction&#39;
[string &quot;function myFunction() ...&quot;]:11: in main chunk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="running-mode" tabindex="-1"><a class="header-anchor" href="#running-mode" aria-hidden="true">#</a> Running Mode</h3>`,18),p=e("code",null,"debug.debug()",-1),g=e("li",null,[e("code",null,"debug.pause()"),n(" pauses program execution. The top run button ‚ñ∂Ô∏è will light up, and the pause button ‚è∏Ô∏è will turn off.")],-1),m=e("h2",{id:"other-debug-commands",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#other-debug-commands","aria-hidden":"true"},"#"),n(" Other Debug Commands")],-1),b=e("p",null,"Most of Lua's Debug functions are applicable to MicroCity Web. You can refer to:",-1),f={href:"https://www.lua.org/manual/5.4/manual.html#6.10",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.runoob.com/lua/lua-debug.html",target:"_blank",rel:"noopener noreferrer"},k=i(`<h2 id="file-saving" tabindex="-1"><a class="header-anchor" href="#file-saving" aria-hidden="true">#</a> File Saving</h2><p>When saving project files in MicroCity Web, the code and files uploaded to the virtual disk are saved as <code>.mw</code> files with a compression format of <code>.gz</code>. After downloading to the local computer, if you need to extract all the files from the file, you can change the file extension of the <code>mw</code> file to <code>gz</code> and then decompress it.</p><div class="hint-container warning"><p class="hint-container-title">WIP üöß</p><p>Currently, it has been found that if you open a single file or save the file directly after editing, it will be saved as an <code>.mw</code> file. If you upload multiple files, they will not be saved as <code>.mw</code> files, but the opened code will be saved directly to the source file opened on the local disk.</p></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>Assuming that you saved a file called <code>PoissonGraph.mw</code>, you can rename it to <code>PoissonGraph.gz</code> and decompress it to obtain the following file structure:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PoissonGraph
‚îú‚îÄ‚îÄ code
‚îú‚îÄ‚îÄ Histogram.lua
‚îú‚îÄ‚îÄ pass
‚îî‚îÄ‚îÄ Subplot.lua
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Description</p><ul><li><code>code</code>: The code file in the editor. After a suffix is added (rename it as <code>code.lua</code> for example), the code opened in the editor can be obtained.</li><li><code>Histogram.lua</code> and <code>Subplot.lua</code>: The library files in the virtual disk.</li></ul>`,8),x={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},_=e("strong",null,"feedback",-1);function w(y,F){const s=o("RouterLink"),t=o("ExternalLinkIcon");return l(),r("div",null,[h,e("ul",null,[e("li",null,[p,n(" enters Debug mode. This is commonly used to enter Debug mode during program execution. If you want to enter Debug mode at startup, you can right-click on the top ‚ñ∂Ô∏è button. See "),a(s,{to:"/en/notes/web-ui.html#program-control"},{default:d(()=>[n("User Interface Introduction - Running Mode")]),_:1}),n(" for details.")]),g]),m,b,e("ul",null,[e("li",null,[e("a",f,[n("The Debug Library | Lua 5.4 Reference Manual"),a(t)])]),e("li",null,[e("a",v,[n("Lua Debug | Runoob Tutorial"),a(t)])])]),k,e("blockquote",null,[e("p",null,[n("This post is translated using ChatGPT, please "),e("a",x,[_,a(t)]),n(" if any omissions.")])])])}const T=c(u,[["render",w],["__file","debug.html.vue"]]);export{T as default};
