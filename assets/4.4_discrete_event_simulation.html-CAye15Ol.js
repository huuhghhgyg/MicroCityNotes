import{_ as p,c as o,e as t,b as a,a as s,f as l,g as i,r as c,o as u}from"./app-o0JILEy2.js";const r={};function d(k,n){const e=c("RouteLink");return u(),o("div",null,[n[5]||(n[5]=t(`<h1 id="_4-4-离散事件仿真" tabindex="-1"><a class="header-anchor" href="#_4-4-离散事件仿真"><span>4.4 离散事件仿真</span></a></h1><p>在仿真中，事件需要随机生成并安排时间，因此Lua中的随机数和协程功能已经得到改进。</p><h2 id="随机数生成" tabindex="-1"><a class="header-anchor" href="#随机数生成"><span>随机数生成</span></a></h2><p>随机数的概率分布已得到扩展，但传统用法仍然保留。</p><p><a id="math.randomseed"> math.randomseed (x, [, disttab]) </a></p><p>根据整数参数x和可选的disttab表返回一个种子。 disttab中的选项包括：</p><ul><li>dist：概率分布，可选值为&quot;normal&quot;、&quot;exponential&quot;、&quot;poisson&quot;和&quot;uniform&quot;。默认为&quot;uniform&quot;。</li><li>mu：均值或期望值，默认为1。</li><li>sigma：标准差（仅适用于正态分布），默认为1。</li></ul><p><a id="math.random"> math.random ([seed|m [, n]]) </a></p><p>当无参数调用时，返回区间[0, 1)内的均匀实数。当用整数 m 调用时，返回区间[1, m]内的均匀整数。当用两个整数 m 和 n 调用时，返回区间[m, n]内的均匀整数。 <br>当使用自math.randomseed生成的<strong>seed</strong>调用时，返回遵循种子指定的分布的数值。此用法可以重写为seed:random()。示例如下：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> seed <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dist <span class="token operator">=</span> <span class="token string">&quot;normal&quot;</span><span class="token punctuation">,</span> mu <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> sigma <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">-- 为正态分布随机数生成器设置一个种子</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>seed<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                               <span class="token comment">-- 打印一个随机数</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件调度" tabindex="-1"><a class="header-anchor" href="#事件调度"><span>事件调度</span></a></h2><p>在离散事件仿真中，事件需要按照时间顺序安排。在 MicroCity Web 中，事件定义为 Lua 的函数或协程，因此协程库中添加了三个新成员。</p><p><a id="coroutine.queue">coroutine.queue(rt [, f|co, arg1, ···])</a></p>`,13)),a("p",null,[n[1]||(n[1]=s("将当前事件（函数或协程）或另一个事件（函数f或协程co）在相对时间rt（>=0）后排队以供以后执行。参数arg1，...将作为参数传递给主体函数。排队的事件（协程）可以在脚本结束时按时间顺序隐式恢复，也可以通过使用")),n[2]||(n[2]=a("a",{href:"https://www.lua.org/manual/5.4/manual.html#pdf-coroutine.resume",target:"_blank"},"coroutine.resume",-1)),n[3]||(n[3]=s("或")),l(e,{to:"/docs/web/4.4_discrete_event_simulation.html#coroutine.qexec"},{default:i(()=>n[0]||(n[0]=[s("coroutine.qexec")])),_:1}),n[4]||(n[4]=s("来显式恢复。"))]),n[6]||(n[6]=t('<p><a id="coroutine.qtime">coroutine.qtime()</a></p><p>返回当前仿真时间（排队时间）。</p><p><a id="coroutine.qexec">coroutine.qexec()</a></p><p>按时间顺序执行所有事件。默认情况下，MicroCity Web将在脚本结束时隐式运行此函数，但用户在必要时可以显式调用它。</p><h2 id="模拟-m-m-1-队列" tabindex="-1"><a class="header-anchor" href="#模拟-m-m-1-队列"><span>模拟 M/M/1 队列</span></a></h2><p>为了演示这些功能，这里使用 <a href="https://en.wikipedia.org/wiki/M/M/1_queue" target="_blank">M/M/1 队列</a> 作为示例：</p>',6)),n[7]||(n[7]=a("p",null,[s("一个排队系统平均每3分钟为一位顾客服务，而服务器平均每2.5分钟为一位顾客提供服务。先到先服务。可以在此处绘制一个 "),a("a",{herf:"https://en.wikipedia.org/wiki/Event_relationship_graph",target:"_blank"},"事件关系图"),s("：")],-1)),n[8]||(n[8]=t(`<p><img src="https://mcw.zhhuu.top/doc/img/mm1.svg" alt=""></p><p>以及源代码：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> M <span class="token operator">=</span> <span class="token string">&quot;Idle&quot;</span>                                                            <span class="token comment">--初始化服务器状态</span></span>
<span class="line"><span class="token keyword">local</span> Q <span class="token operator">=</span> <span class="token number">0</span>                                                                 <span class="token comment">--初始化队列长度</span></span>
<span class="line"><span class="token keyword">local</span> arrival_time <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dist <span class="token operator">=</span> <span class="token string">&quot;exponential&quot;</span><span class="token punctuation">,</span> mu <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment">--到达时间随机种子</span></span>
<span class="line"><span class="token keyword">local</span> service_time <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">randomseed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dist <span class="token operator">=</span> <span class="token string">&quot;exponential&quot;</span><span class="token punctuation">,</span> mu <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">--服务时间随机种子</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                           <span class="token comment">--顾客到达</span></span>
<span class="line">    Q <span class="token operator">=</span> Q <span class="token operator">+</span> <span class="token number">1</span>                                                               <span class="token comment">--队列长度加一</span></span>
<span class="line">    <span class="token keyword">local</span> t <span class="token operator">=</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                             <span class="token comment">--获取当前仿真时间</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token keyword">then</span>                                                         <span class="token comment">--当当前时间小于100时</span></span>
<span class="line">        <span class="token keyword">local</span> ta <span class="token operator">=</span> arrival_time<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment">--获取下一个到达时间</span></span>
<span class="line">        coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>ta<span class="token punctuation">,</span> Arrive<span class="token punctuation">)</span>                                         <span class="token comment">--安排下一个到达事件</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> M <span class="token operator">==</span> <span class="token string">&quot;Idle&quot;</span> <span class="token keyword">then</span>                                                     <span class="token comment">--检查服务器状态</span></span>
<span class="line">        coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Start<span class="token punctuation">)</span>                                           <span class="token comment">--开始提供服务</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;顾客在时间 &quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> <span class="token string">&quot; 到达，队列长度为 &quot;</span><span class="token punctuation">,</span> Q<span class="token punctuation">)</span>                          </span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                            <span class="token comment">--开始提供服务</span></span>
<span class="line">    M <span class="token operator">=</span> <span class="token string">&quot;Busy&quot;</span>                                                              <span class="token comment">--将服务器状态设置为忙碌</span></span>
<span class="line">    Q <span class="token operator">=</span> Q <span class="token operator">-</span> <span class="token number">1</span>                                                               <span class="token comment">--队列长度减一</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">local</span> ts <span class="token operator">=</span> service_time<span class="token punctuation">:</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token comment">--获取一个服务时间</span></span>
<span class="line">    coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span> Leave<span class="token punctuation">)</span>                                              <span class="token comment">--安排离开事件</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;服务开始时间: &quot;</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot; Q = &quot;</span><span class="token punctuation">,</span> Q<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                            <span class="token comment">--顾客离开</span></span>
<span class="line">    M <span class="token operator">=</span> <span class="token string">&quot;Idle&quot;</span>                                                              <span class="token comment">--将服务器设置为空闲状态</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> Q <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">then</span>                                                           <span class="token comment">--如果还有顾客在队列中</span></span>
<span class="line">        coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Start<span class="token punctuation">)</span>                                           <span class="token comment">--开始为下一位顾客提供服务</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;顾客离开时间: &quot;</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">.</span><span class="token function">qtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot; Q = &quot;</span><span class="token punctuation">,</span> Q<span class="token punctuation">)</span>    </span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">coroutine<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Arrive<span class="token punctuation">)</span>                                                  <span class="token comment">--安排第一位顾客到达的事件</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>本文使用ChatGPT翻译，如有遗漏请<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>。</p></blockquote>`,4))])}const v=p(r,[["render",d],["__file","4.4_discrete_event_simulation.html.vue"]]),b=JSON.parse('{"path":"/docs/web/4.4_discrete_event_simulation.html","title":"4.4 离散事件仿真","lang":"zh-CN","frontmatter":{"description":"4.4 离散事件仿真 在仿真中，事件需要随机生成并安排时间，因此Lua中的随机数和协程功能已经得到改进。 随机数生成 随机数的概率分布已得到扩展，但传统用法仍然保留。 math.randomseed (x, [, disttab]) 根据整数参数x和可选的disttab表返回一个种子。 disttab中的选项包括： dist：概率分布，可选值为\\"nor...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/web/4.4_discrete_event_simulation.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.4 离散事件仿真"}],["meta",{"property":"og:description","content":"4.4 离散事件仿真 在仿真中，事件需要随机生成并安排时间，因此Lua中的随机数和协程功能已经得到改进。 随机数生成 随机数的概率分布已得到扩展，但传统用法仍然保留。 math.randomseed (x, [, disttab]) 根据整数参数x和可选的disttab表返回一个种子。 disttab中的选项包括： dist：概率分布，可选值为\\"nor..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mcw.zhhuu.top/doc/img/mm1.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T05:29:11.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-09T05:29:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.4 离散事件仿真\\",\\"image\\":[\\"https://mcw.zhhuu.top/doc/img/mm1.svg\\"],\\"dateModified\\":\\"2024-06-09T05:29:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"随机数生成","slug":"随机数生成","link":"#随机数生成","children":[]},{"level":2,"title":"事件调度","slug":"事件调度","link":"#事件调度","children":[]},{"level":2,"title":"模拟 M/M/1 队列","slug":"模拟-m-m-1-队列","link":"#模拟-m-m-1-队列","children":[]}],"git":{"updatedTime":1717910951000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":5,"url":"https://github.com/huuhghhgyg"}]},"filePathRelative":"docs/web/4.4_discrete_event_simulation.md","autoDesc":true,"excerpt":"\\n<p>在仿真中，事件需要随机生成并安排时间，因此Lua中的随机数和协程功能已经得到改进。</p>\\n<h2>随机数生成</h2>\\n<p>随机数的概率分布已得到扩展，但传统用法仍然保留。</p>\\n<p><a id=\\"math.randomseed\\"> math.randomseed (x, [, disttab]) </a></p>\\n<p>根据整数参数x和可选的disttab表返回一个种子。 disttab中的选项包括：</p>\\n<ul>\\n<li>dist：概率分布，可选值为\\"normal\\"、\\"exponential\\"、\\"poisson\\"和\\"uniform\\"。默认为\\"uniform\\"。</li>\\n<li>mu：均值或期望值，默认为1。</li>\\n<li>sigma：标准差（仅适用于正态分布），默认为1。</li>\\n</ul>"}');export{v as comp,b as data};
