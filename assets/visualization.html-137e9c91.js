import{_ as r,r as d,o as n,c as i,a as o,b as e,d as a,w as s,e as c}from"./app-67bddfbe.js";const p="/MicroCityNotes/assets/LookupTableProperties-0ecb4f51.png",l="/MicroCityNotes/assets/TableSelect-dc014ed8.png",u="/MicroCityNotes/assets/LookupTableColor-10db14bb.png",g="/MicroCityNotes/assets/SelectLinksColor-240a09ee.png",h="/MicroCityNotes/assets/GraduatedColorProperties-7cfa6748.png",_="/MicroCityNotes/assets/GraduatedColorResult-c782c941.png",m="/MicroCityNotes/assets/GraduatedColorSettings-ed4a8a9a.png",b="/MicroCityNotes/assets/RelateToMapBig-d6b0ca1c.png",S="/MicroCityNotes/assets/RelateToMapSmall-6e9a8bd7.png",C="/MicroCityNotes/assets/RelateToScreenBig-bca4cb07.png",k="/MicroCityNotes/assets/RelateToScreenSmall-3831f1e8.png",T="/MicroCityNotes/assets/RangeDotRelateToMap-20b52dc3.png",f="/MicroCityNotes/assets/SizeProperties-453146b0.png",L="/MicroCityNotes/assets/LabelAttribProperties-626ac855.png",E="/MicroCityNotes/assets/SetParameterProperties-0acb1156.png",M="/MicroCityNotes/assets/PlotPrice1-2328e878.png",P="/MicroCityNotes/assets/PlotPrice2-c18b4f48.png",y="/MicroCityNotes/assets/DL_Heatmap-dd6ce94d.png",B={},A=c('<h1 id="结果可视化" tabindex="-1"><a class="header-anchor" href="#结果可视化" aria-hidden="true">#</a> 结果可视化</h1><p>本文介绍了多种将计算结果可视化的方法。包括改变内容的颜色，改变形状大小，改变元素显示的属性标签等。</p><h2 id="改变形状颜色" tabindex="-1"><a class="header-anchor" href="#改变形状颜色" aria-hidden="true">#</a> 改变形状颜色</h2><p>在程序界面左下角的图形属性框内可以通过改变<code>Colors</code>栏目下的<code>Type</code>属性改变显示颜色的种类。共有3种选项：</p><ul><li>Unique Symbol：为同一个图层的所有图形指定某种颜色，此处不做过多介绍。</li><li><a href="#lookup-table-%E9%80%9A%E8%BF%87%E8%A1%A8%E4%B8%AD%E5%80%BC%E6%94%B9%E5%8F%98%E9%A2%9C%E8%89%B2">Lookup Table</a>：通过数值查询表格显示对应的颜色。</li><li><a href="#graduated-color-%E6%A0%B9%E6%8D%AE%E5%80%BC%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%98%BE%E7%A4%BA%E6%B8%90%E5%8F%98%E8%89%B2">Graduated Color</a>：根据表中数值大小设置渐变色。</li></ul><h3 id="lookup-table-通过表中值改变颜色" tabindex="-1"><a class="header-anchor" href="#lookup-table-通过表中值改变颜色" aria-hidden="true">#</a> Lookup Table 通过表中值改变颜色</h3><p>将<code>Type</code>的属性值改为<code>Lookup Table</code>，根据表格中的数值改变图形的颜色，达到选中指定图形的效果。</p><p><img src="'+p+'" alt="LookupTableProperties.png"></p><p>此处示例将<code>Lookup Table</code>中的<code>Attribute</code>改为表格中的<code>SELECT</code>，通过表中的<code>SELECT</code>列值控制线的颜色（属性设置见上图）。当值为0时显示黑色，值为1时显示红色。表格中<code>SELECT</code>列的值和<code>Lookup Table</code>中的具体设置如下图。</p><p><img src="'+l+'" alt="TableSelect.png"><img src="'+u+'" alt="LookupTableColor.png"></p><p>最终实现的效果 <img src="'+g+'" alt="SelectLinksColor.png"></p><h3 id="graduated-color-根据值的大小显示渐变色" tabindex="-1"><a class="header-anchor" href="#graduated-color-根据值的大小显示渐变色" aria-hidden="true">#</a> Graduated Color 根据值的大小显示渐变色</h3><p>将<code>Type</code>的属性值改为<code>Graduated Color</code>，根据表格中不同数值的大小显示不同的颜色，达到显示渐变色的效果。</p><p><img src="'+h+'" alt="GraduatedColorProperties.png"></p><p>此处示例根据每个国家的人口数量显示渐变色。可以看到中国人口数量大，因此显示红色，印度人口数量也较大，因此显示橙色。其他地区人口数量较低，但也能通过颜色看出一些差别。</p><p><img src="'+_+'" alt="GraduatedColorResult.png"></p><p><code>Graduated Color</code>下的<code>Colors</code>属性中还可以调整其他配色方案。设置界面如下图，此处就不不一一列举了。</p><p><img src="'+m+'" alt="GraduatedColorSettings.png"></p>',18),N=c('<h2 id="更改图形和标签的显示大小" tabindex="-1"><a class="header-anchor" href="#更改图形和标签的显示大小" aria-hidden="true">#</a> 更改图形和标签的显示大小</h2><h3 id="参考系的选择" tabindex="-1"><a class="header-anchor" href="#参考系的选择" aria-hidden="true">#</a> 参考系的选择</h3><p>显示内容尺寸的参考系有2个，一个是以地图为参考系，一个是以屏幕为参考系。此处将图形和标签的显示尺寸都设置为相同的参考系。</p><p>内容<strong>以地图为参考系</strong>时，显示内容的大小会根据地图大小同步缩放，如下图：</p><div style="text-align:center;"><p><img src="'+b+'" alt="RelateToMapBig.png"> (以地图为参考系放大)</p><p><img src="'+S+'" alt="RelateToMapSmall.png"> (以地图为参考系缩小)</p></div><p>内容<strong>以屏幕为参考系</strong>时，无论地图怎么缩放内容的大小都差不多，如下图：</p><div style="text-align:center;"><p><img src="'+C+'" alt="RelateToScreenBig.png"> (以屏幕为参考系放大)</p><p><img src="'+k+'" alt="RelateToScreenSmall.png"> (以屏幕为参考系缩小)</p></div><p>因此，绘图的时候<strong>要根据绘图的目的选定参考系</strong>。</p><ul><li>如果需要在地图上绘制确定尺寸的形状或者标明确定尺寸的标签，如绘制一个半径为10km的圆，此时应选用<strong>以地图为参考系</strong>。</li><li>如果仅需要在任何尺寸下都能清晰显示标签和图形，此时可以选择<strong>以屏幕为参考系</strong>。</li></ul><h4 id="参考系应用实例" tabindex="-1"><a class="header-anchor" href="#参考系应用实例" aria-hidden="true">#</a> 参考系应用实例</h4><p>在图中绘制圆点，将圆的半径设置为圆的大小，并将圆的中心设置在每个绿点的中心上，<strong>灰色圆的大小表示每个绿点的覆盖范围大小</strong>。</p><p><img src="'+T+'" alt="RangeDotRelateToMap.png"></p><p>图中<strong>以地图为参考系(Map Units)</strong>，以16为半径为每个绿点都绘制了一个灰色的圆，表示每个绿点的覆盖范围。这些灰色的圆存放在名为<code>Range.shp</code>的图层内，图层类型为<code>Points</code>。</p><h3 id="参考系的设定" tabindex="-1"><a class="header-anchor" href="#参考系的设定" aria-hidden="true">#</a> 参考系的设定</h3><p>在程序界面左下角的图形属性框内可以设置图形及其标签的尺寸参考系。 <img src="'+f+'" alt="SizeProperties.png"></p><p>如图标记的两个位置可以分别调整图形尺寸的参考系和标签尺寸的参考系。</p><ul><li><strong>图形尺寸参考系设置</strong>：<code>Size</code>栏目下的<code>Size relates to...</code>调整图形尺寸的参考系，<code>Default Size</code>调整图形的相对于坐标系的尺寸。</li><li><strong>标签尺寸参考系设置</strong>：<code>Labels</code>栏目下的<code>Size relates to...</code>调整标签尺寸的参考系，<code>Default Size</code>调整的是标签(Labels)相对于坐标系的尺寸。</li></ul><h2 id="更改显示的标签" tabindex="-1"><a class="header-anchor" href="#更改显示的标签" aria-hidden="true">#</a> 更改显示的标签</h2><h3 id="手动更改显示的标签" tabindex="-1"><a class="header-anchor" href="#手动更改显示的标签" aria-hidden="true">#</a> 手动更改显示的标签</h3><p>在程序界面左下角的图形属性框内可以设置图形及其标签的尺寸参考系。上图中显示的标签为<code>ID</code>，如果需要改为表格中的其他列，可以更改<code>Lables</code>栏目下的<code>Attribute</code>属性实现。</p><p>需要更改的属性位置如图，图中需要显示表中对应<code>MSG</code>列的值，只需要将<code>Labels</code>栏目下的<code>Attribute</code>属性值改为<code>MSG</code>即可。</p><p><img src="'+L+'" alt="LabelAttribProperties.png"></p><p>但是每次更改图形并执行<code>Update()</code>函数后标签（Label）会取消显示。如果需要执行的脚本中含有此对于此图层的<code>Update()</code>函数，不必在每次执行完脚本后手动重新设置显示的标签，<strong>可以通过脚本自动选择显示的标签</strong>。</p><h3 id="自动更改显示的标签" tabindex="-1"><a class="header-anchor" href="#自动更改显示的标签" aria-hidden="true">#</a> 自动更改显示的标签</h3><p><strong>通过<code>SetParameter()</code>函数可以更改属性值</strong>。以上图<code>Labels</code>栏目下的<code>Attribute</code>属性为例，选中这条属性后可以看到底栏显示其<code>ID</code>为<code>LABEL_ATTRIB</code>，其类型为<code>Choice</code>。</p><blockquote><p>需要注意的是，当类型为<code>Choice</code>时，参数值从1开始编号，编号顺次对应下拉菜单的内容。</p></blockquote><p>点开这条属性以后，可以看到<code>MSG</code>在第二个。</p><p><img src="'+E+`" alt="SetParameterProperties.png"></p><p>由于Lua中编号一般由1开始，因此此处<code>ID</code>的编号对应1，<code>MSG</code>的编号对应2。需要操作对象为<code>MSG</code>，所以函数中需要填入<code>Choice</code>类型的参数值为2。</p><p>此时已经得到了所有需要的参数，可以使用<code>SetParameter()</code>函数对显示的标签进行更改。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- transports为图形图层</span>
<span class="token function">SetParameter</span><span class="token punctuation">(</span>transports<span class="token punctuation">,</span> <span class="token string">&quot;LABEL_ATTRIB&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>SetParameter()</code>函数需要在<code>Update()</code>函数执行后再执行，否则效果会被<code>Update()</code>函数覆盖。</p></blockquote><p>现在回过头来再看看<code>SetParameter()</code>函数的具体用法：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">SetParameter</span> <span class="token punctuation">(</span>Shapes<span class="token operator">|</span>Table<span class="token operator">|</span>Grid<span class="token operator">|</span>Scene<span class="token operator">|</span>Module<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> Number<span class="token operator">|</span><span class="token string">&quot;String&quot;</span><span class="token operator">|</span>Object<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>参数1</td><td>输入的对象，可以是<code>Shapes</code>、<code>Table</code>、<code>Grid</code>、<code>Scene</code>、<code>Module</code></td></tr><tr><td>参数2</td><td>其中的<code>id</code>为属性对应的ID。如果是上文的情况，就是<code>LABEL_ATTRIB</code></td></tr><tr><td>参数3</td><td>如果需要更改属性值，只接受数值(Number)、字符串(String)、对象(Object)三种类型</td></tr></tbody></table>`,35),v=o("code",null,"SetParameter()",-1),x=o("h2",{id:"借助栅格图",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#借助栅格图","aria-hidden":"true"},"#"),e(" 借助栅格图")],-1),R=o("strong",null,"绘制热力图",-1),G=o("p",null,[e("一种使用栅格图绘制热力图的场景就是"),o("strong",null,"绘制地价图"),e("。在绘制地价图时，我们可以遍历栅格图上的每个格点，计算该格点到每个仓库的距离之和。然后将该格点的值设置为这个值，就可以得到一张热力图。这种方法可以帮助我们可视化地价的分布情况，并且可以用来发现地价的趋势和规律。")],-1),D=o("p",null,[o("img",{src:M,alt:"PlotPrice1.png"}),o("img",{src:P,alt:"PlotPrice2.png"}),o("img",{src:y,alt:"DL_Heatmap.png"})],-1);function q(z,I){const t=d("RouterLink");return n(),i("div",null,[A,o("p",null,[e("如果感兴趣可以参考文档"),a(t,{to:"/docs/2.1_showing_a_world_map.html"},{default:s(()=>[e("2.1 展示世界地图")]),_:1}),e("中的示例手动尝试更改此属性。")]),N,o("p",null,[v,e("函数的介绍出现在文档 "),a(t,{to:"/docs/4.2_ui_control.html"},{default:s(()=>[e("4.2 控制用户界面")]),_:1}),e(" 中，请参阅。")]),x,o("p",null,[e("栅格图也可以用于可视化，我认为栅格图最常用的场景就是"),R,e("。热力图的绘制主要通过修改栅格图上每个格子的值实现。如果不清楚栅格图的具体结构，可以先参考文档 "),a(t,{to:"/docs/3.3_raster_grids.html"},{default:s(()=>[e("3.3 栅格图")]),_:1}),e("。关于使用脚本控制栅格图，可以参考文档 "),a(t,{to:"/docs/4.4_grids.html"},{default:s(()=>[e("4.4 栅格图形")]),_:1}),e("。")]),G,D])}const w=r(B,[["render",q],["__file","visualization.html.vue"]]);export{w as default};
