import{_ as t,r as n,o as p,c as i,a as o,b as a,d as l,w as c,e}from"./app-C45FEQuP.js";const r={},d=e(`<h1 id="_4-2-操作系统" tabindex="-1"><a class="header-anchor" href="#_4-2-操作系统"><span>4.2 操作系统</span></a></h1><p>这部分功能涉及控制一些基本特性，有些由浏览器提供，其他则源自Lua调试。</p><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器"><span>浏览器</span></a></h2><p>浏览器提供JavaScript运行环境、存储和网络通信功能。</p><p><a id="os.execute"> os.execute (javascript) </a></p><p>访问底层JavaScript引擎的接口。此函数将<strong>等待 eval()</strong> 给定的JavaScript，并将结果作为字符串返回。</p><p>动态执行JavaScript可以极大地扩展MicroCity Web的功能。请注意，Lua引擎在web worker中运行，因此访问DOM需要执行辅助函数<strong>RemoteCall</strong>。以下是一个简单的示例：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line">os<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;RemoteCall(&#39;alert&#39;, &#39;hello!&#39;)&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>一个更复杂的示例是使用Python的fastapi创建应用程序，并在MicroCity Web中调用： <br>1. 首先安装fastapi：<code>pip install fastapi uvicorn</code><br>2. 然后创建 main.py：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">from fastapi import FastAPI</span>
<span class="line">from fastapi.middleware.cors import CORSMiddleware</span>
<span class="line">app = FastAPI()</span>
<span class="line">app.add_middleware(</span>
<span class="line">  CORSMiddleware,</span>
<span class="line">  allow_origins=[&#39;\\*&#39;],</span>
<span class="line">  allow_credentials=True,</span>
<span class="line">  allow_methods=[&#39;\\*&#39;],</span>
<span class="line">  allow_headers=[&#39;\\*&#39;],</span>
<span class="line">)</span>
<span class="line">@app.get(&quot;/msg&quot;)</span>
<span class="line">async def read_msg():</span>
<span class="line">  return {&quot;msg&quot;: &quot;Hello from FastAPI&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3. 执行 main.py：<code>uvicorn main:app --reload</code><br>4. 最后在MicroCity Web中运行以下脚本：</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;(async () =&gt; (await (await fetch(&#39;http://127.0.0.1:8000/msg&#39;)).json()).msg)()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p>或</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;fetch(&#39;http://127.0.0.1:8000/msg&#39;).then(res =&gt; res.json()).then(data =&gt; data.msg)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><a id="os.sleep"> os.sleep (ms) </a></p><p>将睡眠<code>ms</code>毫秒。</p><p><a id="os.getready"> os.getready () </a></p><p>如果单击<strong>暂停</strong><img src="https://mcw.zhhuu.top/img/pause.svg" alt="">将暂停执行，如果单击<strong>停止</strong><img src="https://mcw.zhhuu.top/img/stop.svg" alt="">将返回false。</p><p>这对控制长时间运行脚本很有用。用户可以暂停它，然后在控制台运行一些命令或停止它。</p><p><a id="os.upload"> os.upload ([url]) </a></p><p>访问url链接中的文件或提示用户选择要上传到虚拟磁盘的本地文件。</p><p>此功能用于使脚本访问外部文件变得更便捷。用户可以先上传文件，然后启动程序。</p><p><a id="os.download"> os.download ([fpath]) </a></p><p>从fpath路径或提示用户选择要从虚拟磁盘下载的文件。</p><h2 id="大型语言模型" tabindex="-1"><a class="header-anchor" href="#大型语言模型"><span>大型语言模型</span></a></h2>`,25),u=e('<p><a id="os.chatcmpl"> os.chatcmpl (user [, system])</a></p><p>给定一个系统消息（提示）和由对话组成的用户消息，模型将返回一个响应。</p><p><a id="os.embedding"> os.embedding (input)</a></p><p>创建代表输入文本的嵌入向量（具有1024个浮点数的数组）。</p><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h2><p>调试库保留了 Lua 的原始功能并进行了修改。用户可以在脚本中或控制台上执行它们。</p><p><a id="debug.debug"> debug.debug ([b]) </a></p><p>进入调试模式（无参数或 b 为 true）或退出调试模式（b 为 false）。</p><p><a id="debug.pause"> debug.pause () </a></p><p>在调试模式下暂停执行。</p><p><a id="debug.cont"> debug.cont () </a></p><p>在调试模式下继续执行。</p><p><a id="debug.step"> debug.step () </a></p><p>在调试模式下逐步执行。</p><p><a id="debug.stepi"> debug.stepi () </a></p><p>在调试模式下逐步执行进入。</p><p><a id="debug.stepo"> debug.stepo () </a></p><p>在调试模式下逐步执行退出。</p><p><a id="debug.watch"> debug.watch ([name])</a></p><p>将具有名称（字符串）的变量添加到监视列表，或清除监视列表（没有名称）。</p><blockquote><p>本文使用ChatGPT翻译，如有遗漏请<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>。</p></blockquote>',21);function g(h,m){const s=n("RouteLink");return p(),i("div",null,[d,o("p",null,[a("这些函数可以触发远程REST API进行对话完成和嵌入。API可以进行"),l(s,{to:"/docs/web/3.2_editing_scripts.html#codegen"},{default:c(()=>[a("自定义")]),_:1}),a("。")]),u])}const b=t(r,[["render",g],["__file","4.2_operation_system.html.vue"]]),_=JSON.parse('{"path":"/docs/web/4.2_operation_system.html","title":"4.2 操作系统","lang":"zh-CN","frontmatter":{"description":"4.2 操作系统 这部分功能涉及控制一些基本特性，有些由浏览器提供，其他则源自Lua调试。 浏览器 浏览器提供JavaScript运行环境、存储和网络通信功能。 os.execute (javascript) 访问底层JavaScript引擎的接口。此函数将等待 eval() 给定的JavaScript，并将结果作为字符串返回。 动态执行JavaScr...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/web/4.2_operation_system.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.2 操作系统"}],["meta",{"property":"og:description","content":"4.2 操作系统 这部分功能涉及控制一些基本特性，有些由浏览器提供，其他则源自Lua调试。 浏览器 浏览器提供JavaScript运行环境、存储和网络通信功能。 os.execute (javascript) 访问底层JavaScript引擎的接口。此函数将等待 eval() 给定的JavaScript，并将结果作为字符串返回。 动态执行JavaScr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mcw.zhhuu.top/img/pause.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T05:29:11.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-09T05:29:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.2 操作系统\\",\\"image\\":[\\"https://mcw.zhhuu.top/img/pause.svg\\",\\"https://mcw.zhhuu.top/img/stop.svg\\"],\\"dateModified\\":\\"2024-06-09T05:29:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"浏览器","slug":"浏览器","link":"#浏览器","children":[]},{"level":2,"title":"大型语言模型","slug":"大型语言模型","link":"#大型语言模型","children":[]},{"level":2,"title":"调试","slug":"调试","link":"#调试","children":[]}],"git":{"updatedTime":1717910951000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":5}]},"filePathRelative":"docs/web/4.2_operation_system.md","autoDesc":true,"excerpt":"\\n<p>这部分功能涉及控制一些基本特性，有些由浏览器提供，其他则源自Lua调试。</p>\\n<h2>浏览器</h2>\\n<p>浏览器提供JavaScript运行环境、存储和网络通信功能。</p>\\n<p><a id=\\"os.execute\\"> os.execute (javascript) </a></p>\\n<p>访问底层JavaScript引擎的接口。此函数将<strong>等待 eval()</strong> 给定的JavaScript，并将结果作为字符串返回。</p>\\n<p>动态执行JavaScript可以极大地扩展MicroCity Web的功能。请注意，Lua引擎在web worker中运行，因此访问DOM需要执行辅助函数<strong>RemoteCall</strong>。以下是一个简单的示例：</p>"}');export{b as comp,_ as data};
