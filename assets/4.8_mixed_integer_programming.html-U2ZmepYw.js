import{_ as t}from"./icon_script_editor-ibm_2NsU.js";import{_ as o,r as p,o as l,c,a,b as n,d as e,e as u}from"./app-Q07NRad_.js";const i={},d=a("h1",{id:"_4-8-混合整数线性规划",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_4-8-混合整数线性规划"},[a("span",null,"4.8 混合整数线性规划")])],-1),r={href:"https://sourceforge.net/projects/lpsolve/",target:"_blank",rel:"noopener noreferrer"},g=a("em",null,"lpsolve",-1),k=a("strong",null,"项目",-1),m=a("img",{src:t,alt:"图标"},null,-1),_=a("strong",null,"ScriptEditor",-1),v=u(`<h2 id="模型创建和执行" tabindex="-1"><a class="header-anchor" href="#模型创建和执行"><span>模型创建和执行</span></a></h2><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">CreateLP</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>rows <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>创建一个混合整数线性规划模型并返回<strong>LPModel</strong>对象。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">SetObjFunction</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;MAX&quot;</span><span class="token operator">|</span><span class="token string">&quot;MIN&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>使用存储决策变量系数的<em>Lua Table</em>设置<em>LPModel</em>的目标函数。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">AddConstraint</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> rowTable<span class="token punctuation">,</span> <span class="token string">&quot;&lt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;&gt;=&quot;</span><span class="token operator">|</span><span class="token string">&quot;==&quot;</span><span class="token punctuation">,</span> rhsValue<span class="token punctuation">)</span>
</code></pre></div><p>使用存储决策变量系数的<em>Lua Table</em>向<em>LPModel</em>添加约束。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">SetInteger</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre></div><p>将由索引<em>index</em>指定的决策变量设置为整数变量。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">SetBinary</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre></div><p>将由索引<em>index</em>指定的<em>LPModel</em>的决策变量设置为二进制变量。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">SetUnbounded</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre></div><p>将由索引<em>index</em>指定的<em>LPModel</em>的决策变量设置为无界（正/负无穷大）。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">SolveLP</span> <span class="token punctuation">(</span>LPModel <span class="token punctuation">[</span><span class="token punctuation">,</span> timeoutSec <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>求解<em>LPModel</em>并返回0表示成功，-1表示无效LP模型，-2表示内存不足，1表示次优，2表示不可行，3表示无界，4表示退化，5表示遇到数值错误，6表示用户中止，7表示超时错误，9表示模型可由预处理解决，10表示B&amp;B例程失败，11表示B&amp;B因中断而停止，12表示找到可行的B&amp;B解决方案，13表示没有可行的B&amp;B解决方案。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">GetObjective</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre></div><p>返回<em>LPModel</em>的目标函数值。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">GetVariable</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre></div><p>返回由索引<em>index</em>指定的决策变量的值。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">GetVariables</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre></div><p>返回<em>LPModel</em>的所有决策变量的值。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">GetDual</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
</code></pre></div><p>返回由索引<em>index</em>指定的决策变量的对偶值。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">GetDuals</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">)</span>
</code></pre></div><p>返回<em>LPModel</em>的所有决策变量的对偶值。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">ReadLP</span><span class="token punctuation">(</span><span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>从文件(*.lp, *.mps)中读取<em>LPModel</em>，并在成功时返回<em>LPModel</em>。</p><div class="language-lua" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token function">WriteLP</span> <span class="token punctuation">(</span>LPModel<span class="token punctuation">,</span> <span class="token string">&quot;fileName.mps&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>将<em>LPModel</em>写入文件(*.lp, *.mps)，并在成功时返回true。</p>`,29),x={href:"https://github.com/huuhghhgyg/MicroCityNotes/issues/new",target:"_blank",rel:"noopener noreferrer"},L=a("strong",null,"反馈",-1);function h(f,P){const s=p("ExternalLinkIcon");return l(),c("div",null,[d,a("p",null,[n("MicroCity使用"),a("a",r,[g,e(s)]),n("来解决混合整数线性规划问题。开发人员可以使用嵌入的Lua函数来构建和求解模型。本章的示例代码可以在"),k,n('选项卡中的"optimization_samples"文件夹中找到，图标为'),m,_,n(".")]),v,a("blockquote",null,[a("p",null,[n("这篇文章使用ChatGPT翻译自其他语言，如果有问题请在"),a("a",x,[L,e(s)]),n("页面提交反馈。")])])])}const q=o(i,[["render",h],["__file","4.8_mixed_integer_programming.html.vue"]]);export{q as default};
