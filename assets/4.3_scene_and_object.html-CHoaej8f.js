import{_ as p,r as l,o as c,c as i,a as n,b as a,d as e,w as o,e as s}from"./app-C9cMpZQF.js";const u={},r=s(`<h1 id="_4-3-场景和对象" tabindex="-1"><a class="header-anchor" href="#_4-3-场景和对象"><span>4.3 场景和对象</span></a></h1><p>场景库被设计用来控制场景画布以及其中的对象。</p><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span><a id="scene">场景</a></span></a></h2><p>这部分功能包括设置场景、添加查找对象和坐标转换工具。</p><p><a id="scene.setenv"> scene.setenv (opttab) </a></p><p>根据<code>opttab</code>中的选项设置场景。无返回值。选项列表:</p><ul><li>clear: 如果设置为 true，则清除场景中的所有对象。默认为 false。这可在脚本运行中使用，因为脚本开始运行时场景会被自动清理。</li><li>camtype: 将相机设置为透视 (&quot;persp&quot;) 或正交 (&quot;ortho&quot;) 投影。默认为 &quot;persp&quot;。</li><li>grid: 在xz平面 (&quot;plane&quot;) 或单位球面上 (&quot;sphere&quot;) 设置参考网格。默认为 &quot;none&quot;。</li><li>bgcolor: 设置背景颜色。可使用颜色字符串如 &quot;black&quot; 或 &quot;#000000&quot;。默认为 &quot;white&quot;。</li><li>rotspeed: 鼠标拖动旋转速度。默认为 1。</li><li>transpeed: 鼠标拖动平移速度。默认为 1。</li><li>near: 相机视锥近平面。默认为 2。</li><li>far: 相机视锥远平面。默认为 3000。</li></ul><p>以下是设置相机投影和背景颜色的示例代码:</p><div class="language-lua" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line">scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>camtype<span class="token operator">=</span><span class="token string">&#39;ortho&#39;</span><span class="token punctuation">,</span> bgcolor<span class="token operator">=</span><span class="token string">&#39;black&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre></div><p><a id="scene.addobj"> scene.addobj (type [, opttab]) </a></p><p>将一个特定类型和选项的对象添加到场景的(0, 0, 0)位置。返回这个对象。类型包括:</p><ul><li>&quot;points&quot;: 3D 离散点。使用以下选项: vertices, selectable, color, opacity, hcolor, size。</li><li>&quot;polyline&quot;: 3D 折线。使用以下选项: vertices, selectable, color, opacity, hcolor, size。</li><li>&quot;polygon&quot;: 2D 多边形，位于 xy 平面并朝 z(size) 方向挤压。使用以下选项: vertices, selectable, color, opacity, hcolor, size。</li><li>&quot;mesh&quot;: 网格。使用以下选项: vertices, selectable, color, opacity, hcolor。</li><li>&quot;box&quot;: 具有六个面的盒子。使用以下选项: width, height, length, selectable, color, opacity, hcolor。</li><li>&quot;sphere&quot;: 球体。使用以下选项: radius, segments, selectable, color, opacity, hcolor。</li><li>&quot;label&quot;: 始终朝向摄像机的文本标签。使用以下选项: text, font, selectable, color, opacity, hcolor, size。</li><li>&quot;light&quot;: 始终指向(0, 0, 0)的方向光。使用不透明度选项。</li><li>&quot;.json&quot;: Threejs JSON 文件。使用以下选项: selectable, hcolor。</li><li>&quot;.gltf&quot;: GLTF 文件。使用以下选项: selectable, hcolor。</li><li>&quot;.glb&quot;: GLB 文件。使用以下选项: selectable, hcolor。</li><li>&quot;.geojson&quot;: GeoJSON 文件。使用以下选项: selectable, color, opacity, hcolor。</li></ul><p>opttab 中的选项列表:</p><ul><li>vertices: 一个数组，其中每三个数字代表一个三维点（x，y，z）。对于网格，每三个点组成一个三角形。法线遵循<strong>右手定则</strong>。默认为空。</li><li>width: 以x轴测量的盒子宽度。默认为1。</li><li>height: 以y轴测量的盒子高度。默认为1。</li><li>length: 以z轴测量的盒子长度。默认为1。</li><li>size: 厚度或宽度。默认为1。</li><li>radius: 球体的半径。默认为1。</li><li>segments: 对于球体网格的水平和1/2垂直分段。默认为32。</li><li>selectable: 如果为true，则可以选择该对象。默认为true。</li><li>color: 材质颜色，例如&quot;red&quot;或&quot;#FF0000&quot;。默认为&quot;gray&quot;。</li><li>hcolor: 如果被选中则高亮显示的颜色。默认为&quot;red&quot;。</li><li>opacity: 材质的透明度。默认为1。</li><li>name: 一个字符串，稍后可以被scene.getobj使用。默认为&quot;&quot;。</li><li>text: 标签所使用的文本。默认为&quot;&quot;。</li><li>font: 标签所使用的字体。默认为&quot;Arial&quot;。</li></ul><p>以下是向场景添加对象的一些示例：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line">scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span>grid<span class="token operator">=</span><span class="token string">&#39;plane&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                                                 <span class="token comment">--设置一个平面网格</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;points&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>vertices<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token comment">--添加两个大小为5的点</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polyline&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>vertices<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">--添加一个蓝色折线</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>vertices<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">--添加一个二维多边形</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>text<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                                <span class="token comment">--添加一个标签</span></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                               <span class="token comment">--渲染场景</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a id="scene.getobj"> scene.getobj (name) </a></p><p>遍历场景，并返回第一个匹配名称的对象。相机和选定的对象可用&quot;camera&quot;和&quot;selected&quot;找到。</p><p><a id="scene.tovector"> scene.tovector (radius, phi, theta) </a></p><p>从球坐标转换返回 x、y、z。</p><p><a id="scene.topolar"> scene.topolar (x, y, z) </a></p><p>从向量返回球坐标：半径、phi、theta。</p><p><a id="scene.render"> scene.render ([ms]) </a></p>`,23),d=s('<h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><p>这部分函数控制场景中的对象。请注意，调用 obj:func(args) 是 scene.func(obj, args) 的语法糖。</p><p><a id="obj:getpos"> obj:getpos () </a></p><p>返回对象的位置：x、y、z。</p><p><a id="obj:setpos"> obj:setpos (x, y, z) </a></p><p>设置对象的位置：x、y、z。如果对象是正交摄像机，则 z 也用作摄像机的缩放值。</p><p><a id="obj:getrot"> obj:getrot () </a></p><p>返回对象的旋转（弧度）：x、y、z。</p><p><a id="obj:setrot"> obj:setrot (x, y, z) </a></p><p>设置对象的旋转（弧度）：x、y、z。</p><p><a id="obj:getscale"> obj:getscale () </a></p><p>返回对象的缩放：x、y、z。</p><p><a id="obj:setscale"> obj:setscale (x, y, z) </a></p><p>设置对象的缩放：x、y、z。</p><p><a id="obj:getchildren"> obj:getchildren () </a></p><p>获取所有子对象并将它们放入一个表作为返回值。</p><p><a id="obj:setchildren"> obj:setchildren (childtab) </a></p><p>将表 childtab 中的所有对象设置为该对象的子对象。</p><p><a id="obj:getparent"> obj:getparent () </a></p><p>返回对象的父级对象。</p><p><a id="obj:setparent"> obj:setparent ([parent]) </a></p><p>设置对象的父级对象。对象可以没有父对象。</p><p><a id="obj:getmat"> obj:getmat () </a></p><p>获取对象的材质信息表。信息列表：</p><ul><li>type：材质类型字符串，比如<a href="https://threejs.org/docs/#api/en/materials/MeshBasicMaterial" target="_blank">&quot;MeshBasicMaterial&quot;</a>。</li><li>map：纹理ID号。</li><li>color：颜色字符串，例如&quot;red&quot;、&quot;rgb(250, 0,0)&quot;、&quot;rgb(100%,0%,0%)&quot;、&quot;hsl(0, 100%, 50%)&quot;、&quot;#FF0000&quot;、&quot;#f00&quot;。</li><li>opacity：表示材质透明度的数字。</li></ul><p><a id="obj:setmat"> obj:setmat (opttab) </a></p><p>从opttab中设置对象的材质。选项列表：</p><ul><li>type：材质类型字符串，比如<a href="https://threejs.org/docs/#api/en/materials/MeshBasicMaterial" target="_blank">&quot;MeshBasicMaterial&quot;</a>。</li><li>map：纹理ID号或图像文件路径或URL，例如&quot;map.jpg&quot;。</li><li>color：颜色字符串，例如&quot;red&quot;或&quot;#FF0000&quot;。</li><li>opacity：表示材质透明度的数字。</li></ul><p><a id="obj:getvertices"> obj:getvertices () </a></p><p>返回对象的几何体的顶点数组和索引数组（如果有）。</p><p><a id="obj:setvertices"> obj:setvertices (vertices [, indices]) </a></p><p>设置对象的几何体的顶点数组和索引数组（如果有）。</p><p><a id="obj:getdata"> obj:getdata () </a></p>',33),k=n("a",{href:"https://threejs.org/docs/#api/en/core/Object3D.userData",target:"_blank"},"自定义数据",-1),b=s('<p><a id="obj:setdata"> obj:setdata (datatab) </a></p><p>将 datatab 中的 (key, value) 写入对象的自定义数据字段中。</p><p><a id="obj:tojson"> obj:tojson (fpath) </a></p><p>将对象写入到指定路径的 Threejs JSON 文件中。</p><p><a id="obj:delete"> obj:delete () </a></p><p>递归删除对象及其所有子对象。</p><blockquote><p>本文使用ChatGPT翻译，如有遗漏请<a href="https://github.com/huuhghhgyg/MicroCityNotes/issues/new" target="_blank" rel="noopener noreferrer"><strong>反馈</strong></a>。</p></blockquote>',7);function h(m,g){const t=l("RouteLink");return c(),i("div",null,[r,n("p",null,[a("渲染场景并检查浏览器，类似于 "),e(t,{to:"/docs/web/4.2_operation_system.html#os.getready"},{default:o(()=>[a("os.getready")]),_:1}),a("，然后返回结果。可以通过 ms 参数控制渲染之间的间隔时间（毫秒）。")]),d,n("p",null,[a("返回存储对象的"),k,a("的表格。请参考"),e(t,{to:"/docs/web/2.2_searching_for_countries.html"},{default:o(()=>[a("2.2 Searching for Countries")]),_:1}),a("获取示例代码。")]),b])}const j=p(u,[["render",h],["__file","4.3_scene_and_object.html.vue"]]),y=JSON.parse('{"path":"/docs/web/4.3_scene_and_object.html","title":"4.3 场景和对象","lang":"zh-CN","frontmatter":{"description":"4.3 场景和对象 场景库被设计用来控制场景画布以及其中的对象。 场景 这部分功能包括设置场景、添加查找对象和坐标转换工具。 scene.setenv (opttab) 根据opttab中的选项设置场景。无返回值。选项列表: clear: 如果设置为 true，则清除场景中的所有对象。默认为 false。这可在脚本运行中使用，因为脚本开始运行时场景会被...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/docs/web/4.3_scene_and_object.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"4.3 场景和对象"}],["meta",{"property":"og:description","content":"4.3 场景和对象 场景库被设计用来控制场景画布以及其中的对象。 场景 这部分功能包括设置场景、添加查找对象和坐标转换工具。 scene.setenv (opttab) 根据opttab中的选项设置场景。无返回值。选项列表: clear: 如果设置为 true，则清除场景中的所有对象。默认为 false。这可在脚本运行中使用，因为脚本开始运行时场景会被..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-09T05:29:11.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-09T05:29:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4.3 场景和对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T05:29:11.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]}],"git":{"updatedTime":1717910951000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":5}]},"filePathRelative":"docs/web/4.3_scene_and_object.md","autoDesc":true,"excerpt":"\\n<p>场景库被设计用来控制场景画布以及其中的对象。</p>\\n<h2><a class=\\"header-anchor\\" href=\\"#场景\\"><span></span></a><a id=\\"scene\\">场景</a></h2>\\n<p>这部分功能包括设置场景、添加查找对象和坐标转换工具。</p>\\n<p><a id=\\"scene.setenv\\"> scene.setenv (opttab) </a></p>\\n<p>根据<code>opttab</code>中的选项设置场景。无返回值。选项列表:</p>\\n<ul>\\n<li>clear: 如果设置为 true，则清除场景中的所有对象。默认为 false。这可在脚本运行中使用，因为脚本开始运行时场景会被自动清理。</li>\\n<li>camtype: 将相机设置为透视 (\\"persp\\") 或正交 (\\"ortho\\") 投影。默认为 \\"persp\\"。</li>\\n<li>grid: 在xz平面 (\\"plane\\") 或单位球面上 (\\"sphere\\") 设置参考网格。默认为 \\"none\\"。</li>\\n<li>bgcolor: 设置背景颜色。可使用颜色字符串如 \\"black\\" 或 \\"#000000\\"。默认为 \\"white\\"。</li>\\n<li>rotspeed: 鼠标拖动旋转速度。默认为 1。</li>\\n<li>transpeed: 鼠标拖动平移速度。默认为 1。</li>\\n<li>near: 相机视锥近平面。默认为 2。</li>\\n<li>far: 相机视锥远平面。默认为 3000。</li>\\n</ul>"}');export{j as comp,y as data};
