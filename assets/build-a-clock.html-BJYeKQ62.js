import{_ as p,o as e,c as t,e as a,a as s,b as n}from"./app-Di-TeKy7.js";const l="/MicroCityNotes/assets/clock_hour_hand_velocity-Bo8Es1de.svg",c="/MicroCityNotes/assets/clock_minute_hand_velocity-BmNw-pZ4.svg",o={},i=a(`<h1 id="绘制一个时钟" tabindex="-1"><a class="header-anchor" href="#绘制一个时钟"><span>绘制一个时钟</span></a></h1><h2 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h2><p>本文的目标是制作一个时钟，每秒钟时针和分针都会进行非线性运动，并且能够持续循环，这也可以算是一种仿真。</p><p>具体的运动如下：</p><ul><li>时针每 1 秒为周期旋转 45°，并且每个周期内的速度非线性，先快后慢；</li><li>分针每 1 秒为周期旋转 360°，同样以非线性速度运动。</li></ul><h2 id="绘制时钟" tabindex="-1"><a class="header-anchor" href="#绘制时钟"><span>绘制时钟</span></a></h2><h3 id="时针和分针" tabindex="-1"><a class="header-anchor" href="#时针和分针"><span>时针和分针</span></a></h3><p>如何画指针</p><p>以绘制时针为例，我们可以通过绘制一个长方形来实现。首先，将时针长方形的长度设置为参数 <code>len_hour</code>；由于时针和分针的宽度相同，都设置为参数 <code>radius</code>。通过添加一个 polygon 对象，我们可以绘制一个长方形。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token keyword">local</span> hand_minute <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>radius<span class="token punctuation">,</span> len_minute<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> len_minute<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分针同理，只需将 <code>len_hour</code> 替换为 <code>len_minute</code> 即可。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token keyword">local</span> hand_hour <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>radius<span class="token punctuation">,</span> len_hour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> len_hour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="背景板和转轴" tabindex="-1"><a class="header-anchor" href="#背景板和转轴"><span>背景板和转轴</span></a></h3><p>时钟的背景板和时针的转轴都是圆形，而 MicroCity 中没有提供绘制圆形的函数。但是我们可以通过绘制多边形来模拟圆形。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token comment">-- circle</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> vertices_circle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">local</span> segment <span class="token operator">=</span> <span class="token number">360</span></span>
<span class="line">    <span class="token keyword">local</span> radius_step <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> segment</span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> segment <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">local</span> k <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> radius <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i <span class="token operator">*</span> radius_step<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            radius <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>i <span class="token operator">*</span> radius_step<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> vertices_circle</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数的思路是，将圆分成指定的份数（通过参数 <code>segment</code> 设置），然后通过三角函数计算出每个点的坐标。这样就可以得到一个近似圆形的多边形。</p><p>然后我们可以通过这个函数绘制背景板和转轴，转轴已经通过 <code>radius</code> 参数控制其半径大小；背景板通过 <code>radius_bg</code> 参数控制大小。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token comment">-- draw background circle</span></span>
<span class="line"><span class="token keyword">local</span> bg_circle <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius_bg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;#fec300&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">bg_circle<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- draw pointer core circle</span></span>
<span class="line"><span class="token keyword">local</span> core_circle <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="让指针运动" tabindex="-1"><a class="header-anchor" href="#让指针运动"><span>让指针运动</span></a></h2><h3 id="运动函数" tabindex="-1"><a class="header-anchor" href="#运动函数"><span>运动函数</span></a></h3><p>我们首先确定时针的运动函数。为了实现时针的非线性运动，我们可以使用三角函数。通过适当的函数变换，我们可以使得时针在每个周期的开始和结束时速度为 0，而在周期中间时速度逐渐加快然后再减慢。</p><p>这个函数的基本表达式为：</p>`,22),u=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"v"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mn",null,"8"),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," v=1-cos(8t) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"cos"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"8"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])])])],-1),r=s("p",null,[s("img",{src:l,alt:"时针速度函数"})],-1),k=s("p",null,"而分针每个周期的运动速度正好是时针的 8 倍，因此分针的运动函数只需在时针运动函数的基础上修改三角函数的参数即可。",-1),m=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"v"),s("mo",null,"="),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"s"),s("mo",{stretchy:"false"},"("),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," v=1-cos(t) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"cos"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])])])],-1),d=s("p",null,[s("img",{src:c,alt:"分针速度函数"})],-1),v=s("h3",{id:"函数转换",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#函数转换"},[s("span",null,"函数转换")])],-1),h=s("p",null,"如果 x 表示为时针真实走过的弧度，将上面的运动函数积分可以得到时针 x-t 关系的函数：",-1),b=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"="),s("mo",null,"∫"),s("mi",null,"v"),s("mi",null,"d"),s("mi",null,"t"),s("mo",null,"="),s("mo",null,"∫"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"s"),s("mn",null,"8"),s("mi",null,"t"),s("mo",{stretchy:"false"},")"),s("mi",null,"d"),s("mi",null,"t"),s("mo",null,"="),s("mi",null,"t"),s("mo",null,"−"),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"8")]),s("mi",null,"s"),s("mi",null,"i"),s("mi",null,"n"),s("mn",null,"8"),s("mi",null,"t")]),s("annotation",{encoding:"application/x-tex"}," x=\\int v dt = \\int (1-cos8t) dt = t - \\frac{1}{8}sin8t ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.2222em","vertical-align":"-0.8622em"}}),s("span",{class:"mop op-symbol large-op",style:{"margin-right":"0.44445em",position:"relative",top:"-0.0011em"}},"∫"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.2222em","vertical-align":"-0.8622em"}}),s("span",{class:"mop op-symbol large-op",style:{"margin-right":"0.44445em",position:"relative",top:"-0.0011em"}},"∫"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"cos"),s("span",{class:"mord"},"8"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6984em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.0074em","vertical-align":"-0.686em"}}),s("span",{class:"mord"},[s("span",{class:"mopen nulldelimiter"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.3214em"}},[s("span",{style:{top:"-2.314em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"8")])]),s("span",{style:{top:"-3.23em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),s("span",{style:{top:"-3.677em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.686em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter"})]),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mord"},"8"),s("span",{class:"mord mathnormal"},"t")])])])])],-1),g=s("p",null,"同理，分针的运动函数为：",-1),y=s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mi",null,"x"),s("mo",null,"="),s("mi",null,"t"),s("mo",null,"−"),s("mi",null,"s"),s("mi",null,"i"),s("mi",null,"n"),s("mo",{stretchy:"false"},"("),s("mi",null,"t"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"}," x=t-sin(t) ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"x"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6984em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mord mathnormal"},"in"),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"t"),s("span",{class:"mclose"},")")])])])])],-1),w=a(`<h3 id="设置运动" tabindex="-1"><a class="header-anchor" href="#设置运动"><span>设置运动</span></a></h3><p>在 MicroCity 中，通过 <code>setrot()</code> 函数设置时针的旋转角度。由于旋转方向是顺时针，而正方向为逆时针，因此需要对角度进行取反。</p><p>得到时针和分针的弧度位置代码如下：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token keyword">function</span> <span class="token function">x_hour</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">x_minute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x=s("p",null,[n("根据上图可知，时针和分针的周期分别为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"π"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"4")]),s("annotation",{encoding:"application/x-tex"},"\\pi/4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π"),s("span",{class:"mord"},"/4")])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"π")]),s("annotation",{encoding:"application/x-tex"},"2\\pi")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),n("。为了与我们构建的目标相对应，我们需要将时间周期（1s）分别缩放为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"π"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"4")]),s("annotation",{encoding:"application/x-tex"},"\\pi/4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π"),s("span",{class:"mord"},"/4")])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"π")]),s("annotation",{encoding:"application/x-tex"},"2\\pi")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),n("，实现与目标周期相对应。")],-1),f=a(`<p>可以在具体调用时进行调整（方便适应未来修改为不同的周期）：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token keyword">local</span> speed <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- set rotation</span></span>
<span class="line">hand_hour<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_hour</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">hand_minute<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_minute</span><span class="token punctuation">(</span>t <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与现实时间对应" tabindex="-1"><a class="header-anchor" href="#与现实时间对应"><span>与现实时间对应</span></a></h2><p>现在时针和分针已经可以按照给定的输入实现非线性的速度运动了，但是这个运动并没有与现实时间对应起来。</p><p>我们可以通过 <code>os.clock()</code> 函数获取当前的时间，并通过记录这个值计算出每次调用这个函数的时间差，以此令仿真时间 <code>t</code> 与真实世界时间相对应。</p><p>因此，循环部分可以这样写：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token keyword">local</span> t <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">local</span> last_time <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">while</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token comment">-- align with real world time</span></span>
<span class="line">    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> last_time<span class="token punctuation">)</span></span>
<span class="line">    last_time <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- set rotation</span></span>
<span class="line">    hand_hour<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_hour</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    hand_minute<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_minute</span><span class="token punctuation">(</span>t <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;t =&#39;</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要检验时针与分针是否真的在1秒时完成一次周期，可以在循环最后通过如下代码检验：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line"><span class="token comment">-- 检验1圈为2*pi</span></span>
<span class="line"><span class="token keyword">if</span> t<span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token keyword">break</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="效果和代码" tabindex="-1"><a class="header-anchor" href="#效果和代码"><span>效果和代码</span></a></h2><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h3><p>最终实现的仿真效果如下：</p><iframe src="https://microcity.github.io/#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" width="100%" height="600" style="border-radius:8px;"></iframe><p>🔗 <a href="https://microcity.github.io/#sf5ymu" target="_blank" rel="noopener noreferrer">在MicroCityWeb中打开</a></p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h3><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="line">scene<span class="token punctuation">.</span><span class="token function">setenv</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    camtype <span class="token operator">=</span> <span class="token string">&#39;ortho&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- definitions</span></span>
<span class="line"><span class="token keyword">local</span> radius <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">local</span> len_minute <span class="token operator">=</span> <span class="token number">8</span></span>
<span class="line"><span class="token keyword">local</span> len_hour <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"><span class="token keyword">local</span> radius_bg <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- shapes</span></span>
<span class="line"><span class="token keyword">local</span> hand_minute <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>radius<span class="token punctuation">,</span> len_minute<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> len_minute<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">local</span> hand_hour <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>radius<span class="token punctuation">,</span> len_hour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> len_hour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- circle</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">local</span> vertices_circle <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">local</span> segment <span class="token operator">=</span> <span class="token number">360</span></span>
<span class="line">    <span class="token keyword">local</span> radius_step <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> segment</span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> segment <span class="token keyword">do</span></span>
<span class="line">        <span class="token keyword">local</span> k <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> vertices_circle<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> radius <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>i <span class="token operator">*</span> radius_step<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            radius <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>i <span class="token operator">*</span> radius_step<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> vertices_circle</span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- draw background circle</span></span>
<span class="line"><span class="token keyword">local</span> bg_circle <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius_bg<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;#fec300&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">bg_circle<span class="token punctuation">:</span><span class="token function">setpos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- draw pointer core circle</span></span>
<span class="line"><span class="token keyword">local</span> core_circle <span class="token operator">=</span> scene<span class="token punctuation">.</span><span class="token function">addobj</span><span class="token punctuation">(</span><span class="token string">&quot;polygon&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    vertices <span class="token operator">=</span> <span class="token function">get_circle_vertices</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    color <span class="token operator">=</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">x_hour</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">x_minute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">local</span> t <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">local</span> speed <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token keyword">local</span> last_time <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">while</span> scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token comment">-- align with real world time</span></span>
<span class="line">    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> last_time<span class="token punctuation">)</span></span>
<span class="line">    last_time <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- set rotation</span></span>
<span class="line">    hand_hour<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_hour</span><span class="token punctuation">(</span>t <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    hand_minute<span class="token punctuation">:</span><span class="token function">setrot</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">x_minute</span><span class="token punctuation">(</span>t <span class="token operator">*</span> speed<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;t=&#39;</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">-- 检验1圈为2*pi</span></span>
<span class="line">    <span class="token comment">-- if t&gt;=1 then</span></span>
<span class="line">    <span class="token comment">--     break</span></span>
<span class="line">    <span class="token comment">-- end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),_=[i,u,r,k,m,d,v,h,b,g,y,w,x,f];function A(M,j){return e(),t("div",null,_)}const U=p(o,[["render",A],["__file","build-a-clock.html.vue"]]),q=JSON.parse('{"path":"/notes/gallery/build-a-clock.html","title":"绘制一个时钟","lang":"zh-CN","frontmatter":{"description":"绘制一个时钟 目标 本文的目标是制作一个时钟，每秒钟时针和分针都会进行非线性运动，并且能够持续循环，这也可以算是一种仿真。 具体的运动如下： 时针每 1 秒为周期旋转 45°，并且每个周期内的速度非线性，先快后慢； 分针每 1 秒为周期旋转 360°，同样以非线性速度运动。 绘制时钟 时针和分针 如何画指针 以绘制时针为例，我们可以通过绘制一个长方形来...","head":[["meta",{"property":"og:url","content":"https://huuhghhgyg.github.io/MicroCityNotes/notes/gallery/build-a-clock.html"}],["meta",{"property":"og:site_name","content":"MicroCity笔记"}],["meta",{"property":"og:title","content":"绘制一个时钟"}],["meta",{"property":"og:description","content":"绘制一个时钟 目标 本文的目标是制作一个时钟，每秒钟时针和分针都会进行非线性运动，并且能够持续循环，这也可以算是一种仿真。 具体的运动如下： 时针每 1 秒为周期旋转 45°，并且每个周期内的速度非线性，先快后慢； 分针每 1 秒为周期旋转 360°，同样以非线性速度运动。 绘制时钟 时针和分针 如何画指针 以绘制时针为例，我们可以通过绘制一个长方形来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-16T08:17:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-16T08:17:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"绘制一个时钟\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-16T08:17:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"绘制时钟","slug":"绘制时钟","link":"#绘制时钟","children":[{"level":3,"title":"时针和分针","slug":"时针和分针","link":"#时针和分针","children":[]},{"level":3,"title":"背景板和转轴","slug":"背景板和转轴","link":"#背景板和转轴","children":[]}]},{"level":2,"title":"让指针运动","slug":"让指针运动","link":"#让指针运动","children":[{"level":3,"title":"运动函数","slug":"运动函数","link":"#运动函数","children":[]},{"level":3,"title":"函数转换","slug":"函数转换","link":"#函数转换","children":[]},{"level":3,"title":"设置运动","slug":"设置运动","link":"#设置运动","children":[]}]},{"level":2,"title":"与现实时间对应","slug":"与现实时间对应","link":"#与现实时间对应","children":[]},{"level":2,"title":"效果和代码","slug":"效果和代码","link":"#效果和代码","children":[{"level":3,"title":"效果","slug":"效果","link":"#效果","children":[]},{"level":3,"title":"代码","slug":"代码","link":"#代码","children":[]}]}],"git":{"updatedTime":1718525849000,"contributors":[{"name":"huuhghhgyg","email":"huuhghhgyg@outlook.com","commits":1}]},"filePathRelative":"notes/gallery/build-a-clock.md","autoDesc":true,"excerpt":"\\n<h2>目标</h2>\\n<p>本文的目标是制作一个时钟，每秒钟时针和分针都会进行非线性运动，并且能够持续循环，这也可以算是一种仿真。</p>\\n<p>具体的运动如下：</p>\\n<ul>\\n<li>时针每 1 秒为周期旋转 45°，并且每个周期内的速度非线性，先快后慢；</li>\\n<li>分针每 1 秒为周期旋转 360°，同样以非线性速度运动。</li>\\n</ul>\\n<h2>绘制时钟</h2>\\n<h3>时针和分针</h3>\\n<p>如何画指针</p>\\n<p>以绘制时针为例，我们可以通过绘制一个长方形来实现。首先，将时针长方形的长度设置为参数 <code>len_hour</code>；由于时针和分针的宽度相同，都设置为参数 <code>radius</code>。通过添加一个 polygon 对象，我们可以绘制一个长方形。</p>"}');export{U as comp,q as data};
